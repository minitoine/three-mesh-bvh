{"mappings":"ACAA,kFAAkF,EAClF,IAAI,EAAqB,CAAA,CACrB,AAAkB,CAAA,aAAlB,OAAO,QACP,KAAK,gBAAgB,CAAC,UAAW,IAAM,KAAK,WAAW,IACvD,KAAK,gBAAgB,CAAC,WAAY,AAAC,GAAU,EAAM,SAAS,CAAC,KAAK,OAAO,CAAC,KAAK,KAE/E,KAAK,gBAAgB,CAAC,UAAW,AAAC,IACzB,EAAG,IAAI,GAED,AAAiB,eAAjB,EAAG,IAAI,CAAC,IAAI,CACnB,KAAK,YAAY,CACZ,UAAU,GACV,IAAI,CAAC,IACK,KAAK,OAAO,CAAC,QAAQ,IAE/B,IAAI,CAAC,AAAA,IACF,EAAQ,OAAO,CAAC,AAAC,GAAW,EAAO,QAAQ,CAAC,EAAO,GAAG,EAC1D,GACoB,uBAAjB,EAAG,IAAI,CAAC,IAAI,EACnB,CAAA,EAAqB,EAAG,IAAI,CAAC,KAAK,AAAL,EAErC,GAEA,KAAK,gBAAgB,CAAC,QAAS,SAAU,CAAK,EAC1C,IAAM,EAAI,EAAM,OAAO,CACvB,GAAI,AAAY,mBAAZ,EAAE,KAAK,EAAyB,AAAW,gBAAX,EAAE,IAAI,CACtC,OAGJ,IAAM,EAAW,GAAsB,AAAW,YAAX,EAAE,IAAI,CACvC,IAAI,QAAQ,EAAG,CACb,YAAa,MACjB,GACE,EACN,EAAM,WAAW,CACb,MAAM,GACD,IAAI,CAAC,AAAC,IACH,GAAI,AAAoB,IAApB,EAAS,MAAM,CACf,OAAO,EAGX,IAAM,EAAa,IAAI,QAAQ,EAAS,OAAO,EAS/C,OARA,EAAW,GAAG,CAAC,+BACX,EAAqB,iBAAmB,gBAEvC,GACD,EAAW,GAAG,CAAC,+BAAgC,gBAEnD,EAAW,GAAG,CAAC,6BAA8B,eAEtC,IAAI,SAAS,EAAS,IAAI,CAAE,CAC/B,OAAQ,EAAS,MAAM,CACvB,WAAY,EAAS,UAAU,CAC/B,QAAS,CACb,EACJ,GACC,KAAK,CAAC,AAAC,GAAM,QAAQ,KAAK,CAAC,IAExC,IAGC,AAAA,CAAA,KAEG,IAAM,EAAM,CACR,eAAgB,IAAM,CAAA,EACtB,iBAAkB,IAAM,CAAA,EACxB,mBAAoB,IAAM,CAAE,CAAA,OAAO,MAAM,EAAI,OAAO,QAAO,AAAP,EACpD,SAAU,IAAM,OAAO,QAAQ,CAAC,MAAM,GACtC,MAAO,CAAA,EACP,GAAG,OAAO,GAAG,AACjB,EAEM,EAAI,UAeV,GAbI,EAAE,aAAa,EAAI,EAAE,aAAa,CAAC,UAAU,GAC7C,EAAE,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,CACnC,KAAM,qBACN,MAAO,EAAI,kBAAkB,EACjC,GAEI,EAAI,gBAAgB,IACpB,EAAE,aAAa,CAAC,UAAU,CAAC,WAAW,CAAC,CAAE,KAAM,YAAa,IAMhE,AAA+B,CAAA,IAA/B,OAAO,mBAAmB,EAAe,EAAI,cAAc,IAE/D,GAAI,CAAC,OAAO,eAAe,CAAE,CACzB,AAAC,EAAI,KAAK,EAAI,QAAQ,GAAG,CAAC,0EAC1B,MACJ,CAGI,EAAE,aAAa,EACf,EAAE,aAAa,CAAC,QAAQ,CAAC,OAAO,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,IAAI,CAC5D,AAAC,IACG,AAAC,EAAI,KAAK,EAAI,QAAQ,GAAG,CAAC,sCAAuC,EAAa,KAAK,EAEnF,EAAa,gBAAgB,CAAC,cAAe,KACzC,AAAC,EAAI,KAAK,EAAI,QAAQ,GAAG,CAAC,mEAC1B,EAAI,QAAQ,EAChB,GAGI,EAAa,MAAM,EAAI,CAAC,EAAE,aAAa,CAAC,UAAU,GAClD,AAAC,EAAI,KAAK,EAAI,QAAQ,GAAG,CAAC,2DAC1B,EAAI,QAAQ,GAEpB,EACA,AAAC,IACG,AAAC,EAAI,KAAK,EAAI,QAAQ,KAAK,CAAC,+CAAgD,EAChF,GAGZ,CAAA","sources":["<anon>","example/lib/coi-serviceworker.js"],"sourcesContent":["/*! coi-serviceworker v0.1.7 - Guido Zuidhof and contributors, licensed under MIT */ let coepCredentialless = false;\nif (typeof window === \"undefined\") {\n    self.addEventListener(\"install\", ()=>self.skipWaiting());\n    self.addEventListener(\"activate\", (event)=>event.waitUntil(self.clients.claim()));\n    self.addEventListener(\"message\", (ev)=>{\n        if (!ev.data) return;\n        else if (ev.data.type === \"deregister\") self.registration.unregister().then(()=>{\n            return self.clients.matchAll();\n        }).then((clients)=>{\n            clients.forEach((client)=>client.navigate(client.url));\n        });\n        else if (ev.data.type === \"coepCredentialless\") coepCredentialless = ev.data.value;\n    });\n    self.addEventListener(\"fetch\", function(event) {\n        const r = event.request;\n        if (r.cache === \"only-if-cached\" && r.mode !== \"same-origin\") return;\n        const request = coepCredentialless && r.mode === \"no-cors\" ? new Request(r, {\n            credentials: \"omit\"\n        }) : r;\n        event.respondWith(fetch(request).then((response)=>{\n            if (response.status === 0) return response;\n            const newHeaders = new Headers(response.headers);\n            newHeaders.set(\"Cross-Origin-Embedder-Policy\", coepCredentialless ? \"credentialless\" : \"require-corp\");\n            if (!coepCredentialless) newHeaders.set(\"Cross-Origin-Resource-Policy\", \"cross-origin\");\n            newHeaders.set(\"Cross-Origin-Opener-Policy\", \"same-origin\");\n            return new Response(response.body, {\n                status: response.status,\n                statusText: response.statusText,\n                headers: newHeaders\n            });\n        }).catch((e)=>console.error(e)));\n    });\n} else (()=>{\n    // You can customize the behavior of this script through a global `coi` variable.\n    const coi = {\n        shouldRegister: ()=>true,\n        shouldDeregister: ()=>false,\n        coepCredentialless: ()=>!(window.chrome || window.netscape),\n        doReload: ()=>window.location.reload(),\n        quiet: false,\n        ...window.coi\n    };\n    const n = navigator;\n    if (n.serviceWorker && n.serviceWorker.controller) {\n        n.serviceWorker.controller.postMessage({\n            type: \"coepCredentialless\",\n            value: coi.coepCredentialless()\n        });\n        if (coi.shouldDeregister()) n.serviceWorker.controller.postMessage({\n            type: \"deregister\"\n        });\n    }\n    // If we're already coi: do nothing. Perhaps it's due to this script doing its job, or COOP/COEP are\n    // already set from the origin server. Also if the browser has no notion of crossOriginIsolated, just give up here.\n    if (window.crossOriginIsolated !== false || !coi.shouldRegister()) return;\n    if (!window.isSecureContext) {\n        !coi.quiet && console.log(\"COOP/COEP Service Worker not registered, a secure context is required.\");\n        return;\n    }\n    // In some environments (e.g. Chrome incognito mode) this won't be available\n    if (n.serviceWorker) n.serviceWorker.register(window.document.currentScript.src).then((registration)=>{\n        !coi.quiet && console.log(\"COOP/COEP Service Worker registered\", registration.scope);\n        registration.addEventListener(\"updatefound\", ()=>{\n            !coi.quiet && console.log(\"Reloading page to make use of updated COOP/COEP Service Worker.\");\n            coi.doReload();\n        });\n        // If the registration is active, but it's not controlling the page\n        if (registration.active && !n.serviceWorker.controller) {\n            !coi.quiet && console.log(\"Reloading page to make use of COOP/COEP Service Worker.\");\n            coi.doReload();\n        }\n    }, (err)=>{\n        !coi.quiet && console.error(\"COOP/COEP Service Worker failed to register:\", err);\n    });\n})();\n\n//# sourceMappingURL=asyncGenerate.eac07d2a.js.map\n","/*! coi-serviceworker v0.1.7 - Guido Zuidhof and contributors, licensed under MIT */\nlet coepCredentialless = false;\nif (typeof window === 'undefined') {\n    self.addEventListener(\"install\", () => self.skipWaiting());\n    self.addEventListener(\"activate\", (event) => event.waitUntil(self.clients.claim()));\n\n    self.addEventListener(\"message\", (ev) => {\n        if (!ev.data) {\n            return;\n        } else if (ev.data.type === \"deregister\") {\n            self.registration\n                .unregister()\n                .then(() => {\n                    return self.clients.matchAll();\n                })\n                .then(clients => {\n                    clients.forEach((client) => client.navigate(client.url));\n                });\n        } else if (ev.data.type === \"coepCredentialless\") {\n            coepCredentialless = ev.data.value;\n        }\n    });\n\n    self.addEventListener(\"fetch\", function (event) {\n        const r = event.request;\n        if (r.cache === \"only-if-cached\" && r.mode !== \"same-origin\") {\n            return;\n        }\n\n        const request = (coepCredentialless && r.mode === \"no-cors\")\n            ? new Request(r, {\n                credentials: \"omit\",\n            })\n            : r;\n        event.respondWith(\n            fetch(request)\n                .then((response) => {\n                    if (response.status === 0) {\n                        return response;\n                    }\n\n                    const newHeaders = new Headers(response.headers);\n                    newHeaders.set(\"Cross-Origin-Embedder-Policy\",\n                        coepCredentialless ? \"credentialless\" : \"require-corp\"\n                    );\n                    if (!coepCredentialless) {\n                        newHeaders.set(\"Cross-Origin-Resource-Policy\", \"cross-origin\");\n                    }\n                    newHeaders.set(\"Cross-Origin-Opener-Policy\", \"same-origin\");\n\n                    return new Response(response.body, {\n                        status: response.status,\n                        statusText: response.statusText,\n                        headers: newHeaders,\n                    });\n                })\n                .catch((e) => console.error(e))\n        );\n    });\n\n} else {\n    (() => {\n        // You can customize the behavior of this script through a global `coi` variable.\n        const coi = {\n            shouldRegister: () => true,\n            shouldDeregister: () => false,\n            coepCredentialless: () => !(window.chrome || window.netscape),\n            doReload: () => window.location.reload(),\n            quiet: false,\n            ...window.coi\n        };\n\n        const n = navigator;\n\n        if (n.serviceWorker && n.serviceWorker.controller) {\n            n.serviceWorker.controller.postMessage({\n                type: \"coepCredentialless\",\n                value: coi.coepCredentialless(),\n            });\n\n            if (coi.shouldDeregister()) {\n                n.serviceWorker.controller.postMessage({ type: \"deregister\" });\n            }\n        }\n\n        // If we're already coi: do nothing. Perhaps it's due to this script doing its job, or COOP/COEP are\n        // already set from the origin server. Also if the browser has no notion of crossOriginIsolated, just give up here.\n        if (window.crossOriginIsolated !== false || !coi.shouldRegister()) return;\n\n        if (!window.isSecureContext) {\n            !coi.quiet && console.log(\"COOP/COEP Service Worker not registered, a secure context is required.\");\n            return;\n        }\n\n        // In some environments (e.g. Chrome incognito mode) this won't be available\n        if (n.serviceWorker) {\n            n.serviceWorker.register(window.document.currentScript.src).then(\n                (registration) => {\n                    !coi.quiet && console.log(\"COOP/COEP Service Worker registered\", registration.scope);\n\n                    registration.addEventListener(\"updatefound\", () => {\n                        !coi.quiet && console.log(\"Reloading page to make use of updated COOP/COEP Service Worker.\");\n                        coi.doReload();\n                    });\n\n                    // If the registration is active, but it's not controlling the page\n                    if (registration.active && !n.serviceWorker.controller) {\n                        !coi.quiet && console.log(\"Reloading page to make use of COOP/COEP Service Worker.\");\n                        coi.doReload();\n                    }\n                },\n                (err) => {\n                    !coi.quiet && console.error(\"COOP/COEP Service Worker failed to register:\", err);\n                }\n            );\n        }\n    })();\n}\n"],"names":["coepCredentialless","window","self","addEventListener","skipWaiting","event","waitUntil","clients","claim","ev","data","type","registration","unregister","then","matchAll","forEach","client","navigate","url","value","r","request","cache","mode","Request","credentials","respondWith","fetch","response","status","newHeaders","Headers","headers","set","Response","body","statusText","catch","e","console","error","coi","shouldRegister","shouldDeregister","chrome","netscape","doReload","location","reload","quiet","n","navigator","serviceWorker","controller","postMessage","crossOriginIsolated","isSecureContext","log","register","document","currentScript","src","scope","active","err"],"version":3,"file":"asyncGenerate.eac07d2a.js.map"}