{"mappings":"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","sources":["<anon>","node_modules/stats.js/src/Stats.js","src/utils/ExtensionUtilities.js","src/utils/GeometryRayIntersectUtilities.js","example/collectTriangles.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4485\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4485\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hBOJ2\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $cd1d3d651be7f2fc$export$2e2bcd8739ae039);\n/**\n * @author mrdoob / http://mrdoob.com/\n */ var $cd1d3d651be7f2fc$export$2e2bcd8739ae039 = function() {\n    var mode = 0;\n    var container = document.createElement(\"div\");\n    container.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n    container.addEventListener(\"click\", function(event) {\n        event.preventDefault();\n        showPanel(++mode % container.children.length);\n    }, false);\n    //\n    function addPanel(panel) {\n        container.appendChild(panel.dom);\n        return panel;\n    }\n    function showPanel(id) {\n        for(var i = 0; i < container.children.length; i++)container.children[i].style.display = i === id ? \"block\" : \"none\";\n        mode = id;\n    }\n    //\n    var beginTime = (performance || Date).now(), prevTime = beginTime, frames = 0;\n    var fpsPanel = addPanel(new $cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel(\"FPS\", \"#0ff\", \"#002\"));\n    var msPanel = addPanel(new $cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel(\"MS\", \"#0f0\", \"#020\"));\n    if (self.performance && self.performance.memory) var memPanel = addPanel(new $cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel(\"MB\", \"#f08\", \"#201\"));\n    showPanel(0);\n    return {\n        REVISION: 16,\n        dom: container,\n        addPanel: addPanel,\n        showPanel: showPanel,\n        begin: function() {\n            beginTime = (performance || Date).now();\n        },\n        end: function() {\n            frames++;\n            var time = (performance || Date).now();\n            msPanel.update(time - beginTime, 200);\n            if (time > prevTime + 1000) {\n                fpsPanel.update(frames * 1000 / (time - prevTime), 100);\n                prevTime = time;\n                frames = 0;\n                if (memPanel) {\n                    var memory = performance.memory;\n                    memPanel.update(memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576);\n                }\n            }\n            return time;\n        },\n        update: function() {\n            beginTime = this.end();\n        },\n        // Backwards Compatibility\n        domElement: container,\n        setMode: showPanel\n    };\n};\n$cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel = function(name, fg, bg) {\n    var min = Infinity, max = 0, round = Math.round;\n    var PR = round(window.devicePixelRatio || 1);\n    var WIDTH = 80 * PR, HEIGHT = 48 * PR, TEXT_X = 3 * PR, TEXT_Y = 2 * PR, GRAPH_X = 3 * PR, GRAPH_Y = 15 * PR, GRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = WIDTH;\n    canvas.height = HEIGHT;\n    canvas.style.cssText = \"width:80px;height:48px\";\n    var context = canvas.getContext(\"2d\");\n    context.font = \"bold \" + 9 * PR + \"px Helvetica,Arial,sans-serif\";\n    context.textBaseline = \"top\";\n    context.fillStyle = bg;\n    context.fillRect(0, 0, WIDTH, HEIGHT);\n    context.fillStyle = fg;\n    context.fillText(name, TEXT_X, TEXT_Y);\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    context.fillStyle = bg;\n    context.globalAlpha = 0.9;\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    return {\n        dom: canvas,\n        update: function(value, maxValue) {\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n            context.fillStyle = bg;\n            context.globalAlpha = 1;\n            context.fillRect(0, 0, WIDTH, GRAPH_Y);\n            context.fillStyle = fg;\n            context.fillText(round(value) + \" \" + name + \" (\" + round(min) + \"-\" + round(max) + \")\", TEXT_X, TEXT_Y);\n            context.drawImage(canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT);\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT);\n            context.fillStyle = bg;\n            context.globalAlpha = 0.9;\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round((1 - value / maxValue) * GRAPH_HEIGHT));\n        }\n    };\n};\n\n});\n\nparcelRegister(\"4h5hN\", function(module, exports) {\n\n$parcel$export(module.exports, \"acceleratedRaycast\", () => $31ccd9a92979d6bb$export$a0dc2935489c814a);\n$parcel$export(module.exports, \"computeBoundsTree\", () => $31ccd9a92979d6bb$export$749bba8a65fa6d70);\n$parcel$export(module.exports, \"disposeBoundsTree\", () => $31ccd9a92979d6bb$export$e0a981a7a32ddba4);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $b4YKL = parcelRequire(\"b4YKL\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $31ccd9a92979d6bb$var$ray = /* @__PURE__ */ new (0, $ilwiq.Ray)();\nconst $31ccd9a92979d6bb$var$tmpInverseMatrix = /* @__PURE__ */ new (0, $ilwiq.Matrix4)();\nconst $31ccd9a92979d6bb$var$origMeshRaycastFunc = (0, $ilwiq.Mesh).prototype.raycast;\nfunction $31ccd9a92979d6bb$export$a0dc2935489c814a(raycaster, intersects) {\n    if (this.geometry.boundsTree) {\n        if (this.material === undefined) return;\n        $31ccd9a92979d6bb$var$tmpInverseMatrix.copy(this.matrixWorld).invert();\n        $31ccd9a92979d6bb$var$ray.copy(raycaster.ray).applyMatrix4($31ccd9a92979d6bb$var$tmpInverseMatrix);\n        const bvh = this.geometry.boundsTree;\n        if (raycaster.firstHitOnly === true) {\n            const hit = (0, $b4YKL.convertRaycastIntersect)(bvh.raycastFirst($31ccd9a92979d6bb$var$ray, this.material), this, raycaster);\n            if (hit) intersects.push(hit);\n        } else {\n            const hits = bvh.raycast($31ccd9a92979d6bb$var$ray, this.material);\n            for(let i = 0, l = hits.length; i < l; i++){\n                const hit = (0, $b4YKL.convertRaycastIntersect)(hits[i], this, raycaster);\n                if (hit) intersects.push(hit);\n            }\n        }\n    } else $31ccd9a92979d6bb$var$origMeshRaycastFunc.call(this, raycaster, intersects);\n}\nfunction $31ccd9a92979d6bb$export$749bba8a65fa6d70(options) {\n    this.boundsTree = new (0, $ff8ed.MeshBVH)(this, options);\n    return this.boundsTree;\n}\nfunction $31ccd9a92979d6bb$export$e0a981a7a32ddba4() {\n    this.boundsTree = null;\n}\n\n});\nparcelRegister(\"b4YKL\", function(module, exports) {\n\n$parcel$export(module.exports, \"convertRaycastIntersect\", () => $810f31c6ff4f494e$export$adb106eed99e8cd8);\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nfunction $810f31c6ff4f494e$export$adb106eed99e8cd8(hit, object, raycaster) {\n    if (hit === null) return null;\n    hit.point.applyMatrix4(object.matrixWorld);\n    hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n    hit.object = object;\n    if (hit.distance < raycaster.near || hit.distance > raycaster.far) return null;\n    else return hit;\n}\n\n});\n\n\n\nvar $hBOJ2 = parcelRequire(\"hBOJ2\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $4h5hN = parcelRequire(\"4h5hN\");\nvar $Mleu6 = parcelRequire(\"Mleu6\");\n$ilwiq.Mesh.prototype.raycast = (0, $4h5hN.acceleratedRaycast);\n$ilwiq.BufferGeometry.prototype.computeBoundsTree = (0, $4h5hN.computeBoundsTree);\n$ilwiq.BufferGeometry.prototype.disposeBoundsTree = (0, $4h5hN.disposeBoundsTree);\nconst $c3236ee521401da8$var$params = {\n    size: 0.1,\n    rotate: true\n};\nlet $c3236ee521401da8$var$stats;\nlet $c3236ee521401da8$var$scene, $c3236ee521401da8$var$camera, $c3236ee521401da8$var$renderer, $c3236ee521401da8$var$controls;\nlet $c3236ee521401da8$var$targetMesh, $c3236ee521401da8$var$brushMesh;\nlet $c3236ee521401da8$var$mouse = new $ilwiq.Vector2();\nlet $c3236ee521401da8$var$mouseType = -1, $c3236ee521401da8$var$brushActive = false;\nlet $c3236ee521401da8$var$lastTime;\nfunction $c3236ee521401da8$var$init() {\n    const bgColor = 1251612;\n    // renderer setup\n    $c3236ee521401da8$var$renderer = new $ilwiq.WebGLRenderer({\n        antialias: true\n    });\n    $c3236ee521401da8$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $c3236ee521401da8$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $c3236ee521401da8$var$renderer.setClearColor(bgColor, 1);\n    $c3236ee521401da8$var$renderer.outputEncoding = $ilwiq.sRGBEncoding;\n    document.body.appendChild($c3236ee521401da8$var$renderer.domElement);\n    $c3236ee521401da8$var$renderer.domElement.style.touchAction = \"none\";\n    // scene setup\n    $c3236ee521401da8$var$scene = new $ilwiq.Scene();\n    $c3236ee521401da8$var$scene.fog = new $ilwiq.Fog(1251612, 20, 60);\n    const light = new $ilwiq.DirectionalLight(0xffffff, 0.5);\n    light.position.set(1, 1, 1);\n    $c3236ee521401da8$var$scene.add(light);\n    $c3236ee521401da8$var$scene.add(new $ilwiq.AmbientLight(0xffffff, 0.4));\n    // geometry setup\n    const radius = 1;\n    const tube = 0.4;\n    const tubularSegments = 800;\n    const radialSegments = 400;\n    const knotGeometry = new $ilwiq.TorusKnotGeometry(radius, tube, tubularSegments, radialSegments).toNonIndexed();\n    const colorArray = new Uint8Array(knotGeometry.attributes.position.count * 3);\n    colorArray.fill(255);\n    const colorAttr = new $ilwiq.BufferAttribute(colorArray, 3, true);\n    colorAttr.setUsage($ilwiq.DynamicDrawUsage);\n    knotGeometry.setAttribute(\"color\", colorAttr);\n    const knotMaterial = new $ilwiq.MeshStandardMaterial({\n        color: 0xffffff,\n        roughness: 0.3,\n        metalness: 0,\n        vertexColors: true\n    });\n    $c3236ee521401da8$var$targetMesh = new $ilwiq.Mesh(knotGeometry, knotMaterial);\n    $c3236ee521401da8$var$targetMesh.geometry.computeBoundsTree();\n    $c3236ee521401da8$var$scene.add($c3236ee521401da8$var$targetMesh);\n    const brushGeometry = new $ilwiq.SphereGeometry(1, 40, 40);\n    const brushMaterial = new $ilwiq.MeshStandardMaterial({\n        color: 0xEC407A,\n        roughness: 0.75,\n        metalness: 0,\n        transparent: true,\n        opacity: 0.5,\n        premultipliedAlpha: true,\n        emissive: 0xEC407A,\n        emissiveIntensity: 0.5\n    });\n    $c3236ee521401da8$var$brushMesh = new $ilwiq.Mesh(brushGeometry, brushMaterial);\n    $c3236ee521401da8$var$scene.add($c3236ee521401da8$var$brushMesh);\n    // camera setup\n    $c3236ee521401da8$var$camera = new $ilwiq.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);\n    $c3236ee521401da8$var$camera.position.set(3, 3, 3);\n    $c3236ee521401da8$var$camera.far = 100;\n    $c3236ee521401da8$var$camera.updateProjectionMatrix();\n    // stats setup\n    $c3236ee521401da8$var$stats = new (0, $hBOJ2.default)();\n    document.body.appendChild($c3236ee521401da8$var$stats.dom);\n    const gui = new $jiuw3.GUI();\n    gui.add($c3236ee521401da8$var$params, \"size\").min(0.1).max(1).step(0.1);\n    gui.add($c3236ee521401da8$var$params, \"rotate\");\n    gui.open();\n    window.addEventListener(\"resize\", function() {\n        $c3236ee521401da8$var$camera.aspect = window.innerWidth / window.innerHeight;\n        $c3236ee521401da8$var$camera.updateProjectionMatrix();\n        $c3236ee521401da8$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    }, false);\n    window.addEventListener(\"pointermove\", function(e) {\n        $c3236ee521401da8$var$mouse.x = e.clientX / window.innerWidth * 2 - 1;\n        $c3236ee521401da8$var$mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n        $c3236ee521401da8$var$brushActive = true;\n    });\n    window.addEventListener(\"pointerdown\", function(e) {\n        $c3236ee521401da8$var$mouse.x = e.clientX / window.innerWidth * 2 - 1;\n        $c3236ee521401da8$var$mouse.y = -(e.clientY / window.innerHeight) * 2 + 1;\n        $c3236ee521401da8$var$mouseType = e.button;\n        // disable the controls early if we're over the object because on touch screens\n        // we're not constantly tracking where the cursor is.\n        const raycaster = new $ilwiq.Raycaster();\n        raycaster.setFromCamera($c3236ee521401da8$var$mouse, $c3236ee521401da8$var$camera);\n        raycaster.firstHitOnly = true;\n        const res = raycaster.intersectObject($c3236ee521401da8$var$targetMesh, true);\n        $c3236ee521401da8$var$brushActive = true;\n        $c3236ee521401da8$var$controls.enabled = res.length === 0;\n    }, true);\n    window.addEventListener(\"pointerup\", function(e) {\n        $c3236ee521401da8$var$mouseType = -1;\n        if (e.pointerType === \"touch\") // disable the brush visualization when the pointer action is done only\n        // if it's on a touch device.\n        $c3236ee521401da8$var$brushActive = false;\n    }, true);\n    window.addEventListener(\"contextmenu\", function(e) {\n        e.preventDefault();\n    });\n    window.addEventListener(\"wheel\", function(e) {\n        let delta = e.deltaY;\n        if (e.deltaMode === 1) delta *= 40;\n        if (e.deltaMode === 2) delta *= 40;\n        $c3236ee521401da8$var$params.size += delta * 0.0005;\n        $c3236ee521401da8$var$params.size = Math.max(Math.min($c3236ee521401da8$var$params.size, 1), 0.1);\n        gui.controllersRecursive().forEach((c)=>c.updateDisplay());\n    });\n    $c3236ee521401da8$var$controls = new (0, $5Rd1x.OrbitControls)($c3236ee521401da8$var$camera, $c3236ee521401da8$var$renderer.domElement);\n    $c3236ee521401da8$var$controls.addEventListener(\"start\", function() {\n        this.active = true;\n    });\n    $c3236ee521401da8$var$controls.addEventListener(\"end\", function() {\n        this.active = false;\n    });\n    $c3236ee521401da8$var$lastTime = window.performance.now();\n}\nfunction $c3236ee521401da8$var$render() {\n    requestAnimationFrame($c3236ee521401da8$var$render);\n    $c3236ee521401da8$var$stats.begin();\n    const geometry = $c3236ee521401da8$var$targetMesh.geometry;\n    const bvh = geometry.boundsTree;\n    const colorAttr = geometry.getAttribute(\"color\");\n    const indexAttr = geometry.index;\n    if ($c3236ee521401da8$var$controls.active || !$c3236ee521401da8$var$brushActive) $c3236ee521401da8$var$brushMesh.visible = false;\n    else {\n        $c3236ee521401da8$var$brushMesh.scale.setScalar($c3236ee521401da8$var$params.size);\n        const raycaster = new $ilwiq.Raycaster();\n        raycaster.setFromCamera($c3236ee521401da8$var$mouse, $c3236ee521401da8$var$camera);\n        raycaster.firstHitOnly = true;\n        const res = raycaster.intersectObject($c3236ee521401da8$var$targetMesh, true);\n        if (res.length) {\n            $c3236ee521401da8$var$brushMesh.position.copy(res[0].point);\n            $c3236ee521401da8$var$controls.enabled = false;\n            $c3236ee521401da8$var$brushMesh.visible = true;\n            const inverseMatrix = new $ilwiq.Matrix4();\n            inverseMatrix.copy($c3236ee521401da8$var$targetMesh.matrixWorld).invert();\n            const sphere = new $ilwiq.Sphere();\n            sphere.center.copy($c3236ee521401da8$var$brushMesh.position).applyMatrix4(inverseMatrix);\n            sphere.radius = $c3236ee521401da8$var$params.size;\n            const indices = [];\n            const tempVec = new $ilwiq.Vector3();\n            bvh.shapecast({\n                intersectsBounds: (box)=>{\n                    const intersects = sphere.intersectsBox(box);\n                    const { min: min, max: max } = box;\n                    if (intersects) {\n                        for(let x = 0; x <= 1; x++){\n                            for(let y = 0; y <= 1; y++)for(let z = 0; z <= 1; z++){\n                                tempVec.set(x === 0 ? min.x : max.x, y === 0 ? min.y : max.y, z === 0 ? min.z : max.z);\n                                if (!sphere.containsPoint(tempVec)) return 0, $Mleu6.INTERSECTED;\n                            }\n                        }\n                        return 0, $Mleu6.CONTAINED;\n                    }\n                    return intersects ? (0, $Mleu6.INTERSECTED) : (0, $Mleu6.NOT_INTERSECTED);\n                },\n                intersectsTriangle: (tri, i, contained)=>{\n                    if (contained || tri.intersectsSphere(sphere)) {\n                        const i3 = 3 * i;\n                        indices.push(i3, i3 + 1, i3 + 2);\n                    }\n                    return false;\n                }\n            });\n            if ($c3236ee521401da8$var$mouseType === 0 || $c3236ee521401da8$var$mouseType === 2) {\n                let r = 1, g = 1, b = 1;\n                if ($c3236ee521401da8$var$mouseType === 0) {\n                    r = 15 / 255;\n                    g = 78 / 255;\n                    b = 85 / 255;\n                }\n                for(let i = 0, l = indices.length; i < l; i++){\n                    const i2 = indexAttr.getX(indices[i]);\n                    colorAttr.setX(i2, r);\n                    colorAttr.setY(i2, g);\n                    colorAttr.setZ(i2, b);\n                }\n                colorAttr.needsUpdate = true;\n            }\n        } else {\n            $c3236ee521401da8$var$controls.enabled = true;\n            $c3236ee521401da8$var$brushMesh.visible = false;\n        }\n    }\n    const currTime = window.performance.now();\n    if ($c3236ee521401da8$var$params.rotate) {\n        const delta = currTime - $c3236ee521401da8$var$lastTime;\n        $c3236ee521401da8$var$targetMesh.rotation.y += delta * 0.001;\n    }\n    $c3236ee521401da8$var$lastTime = currTime;\n    $c3236ee521401da8$var$renderer.render($c3236ee521401da8$var$scene, $c3236ee521401da8$var$camera);\n    $c3236ee521401da8$var$stats.end();\n}\n$c3236ee521401da8$var$init();\n$c3236ee521401da8$var$render();\n\n\n//# sourceMappingURL=collectTriangles.5007d929.js.map\n","/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time > prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport { Stats as default };\n","import { Ray, Matrix4, Mesh } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst ray = /* @__PURE__ */ new Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n","// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\treturn null;\n\n\t} else {\n\n\t\treturn hit;\n\n\t}\n\n}\n","import Stats from 'stats.js/src/Stats';\nimport * as dat from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { acceleratedRaycast, computeBoundsTree, disposeBoundsTree, CONTAINED, INTERSECTED, NOT_INTERSECTED } from '..';\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nconst params = {\n\tsize: 0.1,\n\trotate: true,\n};\n\nlet stats;\nlet scene, camera, renderer, controls;\nlet targetMesh, brushMesh;\nlet mouse = new THREE.Vector2();\nlet mouseType = - 1, brushActive = false;\nlet lastTime;\n\nfunction init() {\n\n\tconst bgColor = 0x263238 / 2;\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\trenderer.domElement.style.touchAction = 'none';\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\tscene.fog = new THREE.Fog( 0x263238 / 2, 20, 60 );\n\n\tconst light = new THREE.DirectionalLight( 0xffffff, 0.5 );\n\tlight.position.set( 1, 1, 1 );\n\tscene.add( light );\n\tscene.add( new THREE.AmbientLight( 0xffffff, 0.4 ) );\n\n\t// geometry setup\n\tconst radius = 1;\n\tconst tube = 0.4;\n\tconst tubularSegments = 800;\n\tconst radialSegments = 400;\n\n\tconst knotGeometry = new THREE.TorusKnotGeometry( radius, tube, tubularSegments, radialSegments ).toNonIndexed();\n\tconst colorArray = new Uint8Array( knotGeometry.attributes.position.count * 3 );\n\tcolorArray.fill( 255 );\n\tconst colorAttr = new THREE.BufferAttribute( colorArray, 3, true );\n\tcolorAttr.setUsage( THREE.DynamicDrawUsage );\n\tknotGeometry.setAttribute( 'color', colorAttr );\n\n\tconst knotMaterial = new THREE.MeshStandardMaterial( { color: 0xffffff, roughness: 0.3, metalness: 0, vertexColors: true } );\n\ttargetMesh = new THREE.Mesh( knotGeometry, knotMaterial );\n\ttargetMesh.geometry.computeBoundsTree();\n\tscene.add( targetMesh );\n\n\tconst brushGeometry = new THREE.SphereGeometry( 1, 40, 40 );\n\tconst brushMaterial = new THREE.MeshStandardMaterial( {\n\t\tcolor: 0xEC407A,\n\t\troughness: 0.75,\n\t\tmetalness: 0,\n\t\ttransparent: true,\n\t\topacity: 0.5,\n\t\tpremultipliedAlpha: true,\n\t\temissive: 0xEC407A,\n\t\temissiveIntensity: 0.5,\n\t} );\n\n\tbrushMesh = new THREE.Mesh( brushGeometry, brushMaterial );\n\tscene.add( brushMesh );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 3, 3, 3 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\tconst gui = new dat.GUI();\n\tgui.add( params, 'size' ).min( 0.1 ).max( 1 ).step( 0.1 );\n\tgui.add( params, 'rotate' );\n\tgui.open();\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\twindow.addEventListener( 'pointermove', function ( e ) {\n\n\t\tmouse.x = ( e.clientX / window.innerWidth ) * 2 - 1;\n\t\tmouse.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\n\t\tbrushActive = true;\n\n\t} );\n\n\twindow.addEventListener( 'pointerdown', function ( e ) {\n\n\t\tmouse.x = ( e.clientX / window.innerWidth ) * 2 - 1;\n\t\tmouse.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\n\t\tmouseType = e.button;\n\n\t\t// disable the controls early if we're over the object because on touch screens\n\t\t// we're not constantly tracking where the cursor is.\n\t\tconst raycaster = new THREE.Raycaster();\n\t\traycaster.setFromCamera( mouse, camera );\n\t\traycaster.firstHitOnly = true;\n\n\t\tconst res = raycaster.intersectObject( targetMesh, true );\n\t\tbrushActive = true;\n\t\tcontrols.enabled = res.length === 0;\n\n\t}, true );\n\n\twindow.addEventListener( 'pointerup', function ( e ) {\n\n\t\tmouseType = - 1;\n\t\tif ( e.pointerType === 'touch' ) {\n\n\t\t\t// disable the brush visualization when the pointer action is done only\n\t\t\t// if it's on a touch device.\n\t\t\tbrushActive = false;\n\n\t\t}\n\n\t}, true );\n\n\twindow.addEventListener( 'contextmenu', function ( e ) {\n\n\t\te.preventDefault();\n\n\t} );\n\n\twindow.addEventListener( 'wheel', function ( e ) {\n\n\t\tlet delta = e.deltaY;\n\n\t\tif ( e.deltaMode === 1 ) {\n\n\t\t\tdelta *= 40;\n\n\t\t}\n\n\t\tif ( e.deltaMode === 2 ) {\n\n\t\t\tdelta *= 40;\n\n\t\t}\n\n\t\tparams.size += delta * 0.0005;\n\t\tparams.size = Math.max( Math.min( params.size, 1 ), 0.1 );\n\n\t\tgui.controllersRecursive().forEach( c => c.updateDisplay() );\n\n\t} );\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\tcontrols.addEventListener( 'start', function () {\n\n\t\tthis.active = true;\n\n\t} );\n\n\tcontrols.addEventListener( 'end', function () {\n\n\t\tthis.active = false;\n\n\t} );\n\n\tlastTime = window.performance.now();\n\n}\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\tstats.begin();\n\n\tconst geometry = targetMesh.geometry;\n\tconst bvh = geometry.boundsTree;\n\tconst colorAttr = geometry.getAttribute( 'color' );\n\tconst indexAttr = geometry.index;\n\n\tif ( controls.active || ! brushActive ) {\n\n\t\tbrushMesh.visible = false;\n\n\t} else {\n\n\t\tbrushMesh.scale.setScalar( params.size );\n\n\t\tconst raycaster = new THREE.Raycaster();\n\t\traycaster.setFromCamera( mouse, camera );\n\t\traycaster.firstHitOnly = true;\n\n\t\tconst res = raycaster.intersectObject( targetMesh, true );\n\t\tif ( res.length ) {\n\n\t\t\tbrushMesh.position.copy( res[ 0 ].point );\n\t\t\tcontrols.enabled = false;\n\t\t\tbrushMesh.visible = true;\n\n\t\t\tconst inverseMatrix = new THREE.Matrix4();\n\t\t\tinverseMatrix.copy( targetMesh.matrixWorld ).invert();\n\n\t\t\tconst sphere = new THREE.Sphere();\n\t\t\tsphere.center.copy( brushMesh.position ).applyMatrix4( inverseMatrix );\n\t\t\tsphere.radius = params.size;\n\n\t\t\tconst indices = [];\n\t\t\tconst tempVec = new THREE.Vector3();\n\t\t\tbvh.shapecast( {\n\n\t\t\t\tintersectsBounds: box => {\n\n\t\t\t\t\tconst intersects = sphere.intersectsBox( box );\n\t\t\t\t\tconst { min, max } = box;\n\t\t\t\t\tif ( intersects ) {\n\n\t\t\t\t\t\tfor ( let x = 0; x <= 1; x ++ ) {\n\n\t\t\t\t\t\t\tfor ( let y = 0; y <= 1; y ++ ) {\n\n\t\t\t\t\t\t\t\tfor ( let z = 0; z <= 1; z ++ ) {\n\n\t\t\t\t\t\t\t\t\ttempVec.set(\n\t\t\t\t\t\t\t\t\t\tx === 0 ? min.x : max.x,\n\t\t\t\t\t\t\t\t\t\ty === 0 ? min.y : max.y,\n\t\t\t\t\t\t\t\t\t\tz === 0 ? min.z : max.z\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\tif ( ! sphere.containsPoint( tempVec ) ) {\n\n\t\t\t\t\t\t\t\t\t\treturn INTERSECTED;\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn CONTAINED;\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn intersects ? INTERSECTED : NOT_INTERSECTED;\n\n\t\t\t\t},\n\n\t\t\t\tintersectsTriangle: ( tri, i, contained ) => {\n\n\t\t\t\t\tif ( contained || tri.intersectsSphere( sphere ) ) {\n\n\t\t\t\t\t\tconst i3 = 3 * i;\n\t\t\t\t\t\tindices.push( i3, i3 + 1, i3 + 2 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( mouseType === 0 || mouseType === 2 ) {\n\n\t\t\t\tlet r = 1, g = 1, b = 1;\n\t\t\t\tif ( mouseType === 0 ) {\n\n\t\t\t\t\tr = 15 / 255;\n\t\t\t\t\tg = 78 / 255;\n\t\t\t\t\tb = 85 / 255;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst i2 = indexAttr.getX( indices[ i ] );\n\t\t\t\t\tcolorAttr.setX( i2, r );\n\t\t\t\t\tcolorAttr.setY( i2, g );\n\t\t\t\t\tcolorAttr.setZ( i2, b );\n\n\t\t\t\t}\n\n\t\t\t\tcolorAttr.needsUpdate = true;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tcontrols.enabled = true;\n\t\t\tbrushMesh.visible = false;\n\n\t\t}\n\n\t}\n\n\tconst currTime = window.performance.now();\n\tif ( params.rotate ) {\n\n\t\tconst delta = currTime - lastTime;\n\t\ttargetMesh.rotation.y += delta * 0.001;\n\n\t}\n\n\tlastTime = currTime;\n\n\trenderer.render( scene, camera );\n\tstats.end();\n\n}\n\n\ninit();\nrender();\n"],"names":["$c3236ee521401da8$var$stats","$c3236ee521401da8$var$scene","$c3236ee521401da8$var$camera","$c3236ee521401da8$var$renderer","$c3236ee521401da8$var$controls","$c3236ee521401da8$var$targetMesh","$c3236ee521401da8$var$brushMesh","$c3236ee521401da8$var$lastTime","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$cd1d3d651be7f2fc$export$2e2bcd8739ae039","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","i","children","length","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","name","fg","bg","min","Infinity","max","round","Math","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","value","maxValue","drawImage","$31ccd9a92979d6bb$export$a0dc2935489c814a","$31ccd9a92979d6bb$export$749bba8a65fa6d70","$31ccd9a92979d6bb$export$e0a981a7a32ddba4","$ilwiq","$b4YKL","$ff8ed","$31ccd9a92979d6bb$var$ray","Ray","$31ccd9a92979d6bb$var$tmpInverseMatrix","Matrix4","$31ccd9a92979d6bb$var$origMeshRaycastFunc","Mesh","prototype","raycast","raycaster","intersects","geometry","boundsTree","undefined","material","copy","matrixWorld","invert","ray","applyMatrix4","bvh","firstHitOnly","hit","convertRaycastIntersect","raycastFirst","push","hits","l","options","MeshBVH","$810f31c6ff4f494e$export$adb106eed99e8cd8","object","point","distance","distanceTo","origin","near","far","$hBOJ2","$jiuw3","$5Rd1x","$4h5hN","$Mleu6","acceleratedRaycast","BufferGeometry","computeBoundsTree","disposeBoundsTree","$c3236ee521401da8$var$params","size","rotate","$c3236ee521401da8$var$mouse","Vector2","$c3236ee521401da8$var$mouseType","$c3236ee521401da8$var$brushActive","$c3236ee521401da8$var$init","WebGLRenderer","antialias","setPixelRatio","setSize","innerWidth","innerHeight","setClearColor","outputEncoding","sRGBEncoding","body","touchAction","Scene","fog","Fog","light","DirectionalLight","position","add","AmbientLight","knotGeometry","TorusKnotGeometry","toNonIndexed","colorArray","Uint8Array","attributes","count","fill","colorAttr","BufferAttribute","setUsage","DynamicDrawUsage","setAttribute","knotMaterial","MeshStandardMaterial","color","roughness","metalness","vertexColors","brushGeometry","SphereGeometry","brushMaterial","transparent","opacity","premultipliedAlpha","emissive","emissiveIntensity","PerspectiveCamera","updateProjectionMatrix","default","gui","GUI","step","open","aspect","x","clientX","y","clientY","button","Raycaster","setFromCamera","res","intersectObject","enabled","pointerType","delta","deltaY","deltaMode","controllersRecursive","forEach","c","updateDisplay","OrbitControls","active","$c3236ee521401da8$var$render","requestAnimationFrame","getAttribute","indexAttr","index","visible","scale","setScalar","inverseMatrix","sphere","Sphere","center","radius","indices","tempVec","Vector3","shapecast","intersectsBounds","box","intersectsBox","z","containsPoint","INTERSECTED","CONTAINED","NOT_INTERSECTED","intersectsTriangle","tri","contained","intersectsSphere","i3","r","g","b","i2","getX","setX","setY","setZ","needsUpdate","currTime","rotation","render"],"version":3,"file":"collectTriangles.5007d929.js.map"}