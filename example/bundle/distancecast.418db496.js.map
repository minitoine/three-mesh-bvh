{"mappings":"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","sources":["<anon>","node_modules/stats.js/src/Stats.js","src/utils/ExtensionUtilities.js","src/utils/GeometryRayIntersectUtilities.js","src/objects/MeshBVHHelper.js","example/distancecast.js","example/lib/MarchingCubes.js","node_modules/simplex-noise/simplex-noise.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4485\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4485\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hBOJ2\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $cd1d3d651be7f2fc$export$2e2bcd8739ae039);\n/**\n * @author mrdoob / http://mrdoob.com/\n */ var $cd1d3d651be7f2fc$export$2e2bcd8739ae039 = function() {\n    var mode = 0;\n    var container = document.createElement(\"div\");\n    container.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n    container.addEventListener(\"click\", function(event) {\n        event.preventDefault();\n        showPanel(++mode % container.children.length);\n    }, false);\n    //\n    function addPanel(panel) {\n        container.appendChild(panel.dom);\n        return panel;\n    }\n    function showPanel(id) {\n        for(var i = 0; i < container.children.length; i++)container.children[i].style.display = i === id ? \"block\" : \"none\";\n        mode = id;\n    }\n    //\n    var beginTime = (performance || Date).now(), prevTime = beginTime, frames = 0;\n    var fpsPanel = addPanel(new $cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel(\"FPS\", \"#0ff\", \"#002\"));\n    var msPanel = addPanel(new $cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel(\"MS\", \"#0f0\", \"#020\"));\n    if (self.performance && self.performance.memory) var memPanel = addPanel(new $cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel(\"MB\", \"#f08\", \"#201\"));\n    showPanel(0);\n    return {\n        REVISION: 16,\n        dom: container,\n        addPanel: addPanel,\n        showPanel: showPanel,\n        begin: function() {\n            beginTime = (performance || Date).now();\n        },\n        end: function() {\n            frames++;\n            var time = (performance || Date).now();\n            msPanel.update(time - beginTime, 200);\n            if (time > prevTime + 1000) {\n                fpsPanel.update(frames * 1000 / (time - prevTime), 100);\n                prevTime = time;\n                frames = 0;\n                if (memPanel) {\n                    var memory = performance.memory;\n                    memPanel.update(memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576);\n                }\n            }\n            return time;\n        },\n        update: function() {\n            beginTime = this.end();\n        },\n        // Backwards Compatibility\n        domElement: container,\n        setMode: showPanel\n    };\n};\n$cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel = function(name, fg, bg) {\n    var min = Infinity, max = 0, round = Math.round;\n    var PR = round(window.devicePixelRatio || 1);\n    var WIDTH = 80 * PR, HEIGHT = 48 * PR, TEXT_X = 3 * PR, TEXT_Y = 2 * PR, GRAPH_X = 3 * PR, GRAPH_Y = 15 * PR, GRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = WIDTH;\n    canvas.height = HEIGHT;\n    canvas.style.cssText = \"width:80px;height:48px\";\n    var context = canvas.getContext(\"2d\");\n    context.font = \"bold \" + 9 * PR + \"px Helvetica,Arial,sans-serif\";\n    context.textBaseline = \"top\";\n    context.fillStyle = bg;\n    context.fillRect(0, 0, WIDTH, HEIGHT);\n    context.fillStyle = fg;\n    context.fillText(name, TEXT_X, TEXT_Y);\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    context.fillStyle = bg;\n    context.globalAlpha = 0.9;\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    return {\n        dom: canvas,\n        update: function(value, maxValue) {\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n            context.fillStyle = bg;\n            context.globalAlpha = 1;\n            context.fillRect(0, 0, WIDTH, GRAPH_Y);\n            context.fillStyle = fg;\n            context.fillText(round(value) + \" \" + name + \" (\" + round(min) + \"-\" + round(max) + \")\", TEXT_X, TEXT_Y);\n            context.drawImage(canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT);\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT);\n            context.fillStyle = bg;\n            context.globalAlpha = 0.9;\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round((1 - value / maxValue) * GRAPH_HEIGHT));\n        }\n    };\n};\n\n});\n\nparcelRegister(\"4h5hN\", function(module, exports) {\n\n$parcel$export(module.exports, \"acceleratedRaycast\", () => $31ccd9a92979d6bb$export$a0dc2935489c814a);\n$parcel$export(module.exports, \"computeBoundsTree\", () => $31ccd9a92979d6bb$export$749bba8a65fa6d70);\n$parcel$export(module.exports, \"disposeBoundsTree\", () => $31ccd9a92979d6bb$export$e0a981a7a32ddba4);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $b4YKL = parcelRequire(\"b4YKL\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $31ccd9a92979d6bb$var$ray = /* @__PURE__ */ new (0, $ilwiq.Ray)();\nconst $31ccd9a92979d6bb$var$tmpInverseMatrix = /* @__PURE__ */ new (0, $ilwiq.Matrix4)();\nconst $31ccd9a92979d6bb$var$origMeshRaycastFunc = (0, $ilwiq.Mesh).prototype.raycast;\nfunction $31ccd9a92979d6bb$export$a0dc2935489c814a(raycaster, intersects) {\n    if (this.geometry.boundsTree) {\n        if (this.material === undefined) return;\n        $31ccd9a92979d6bb$var$tmpInverseMatrix.copy(this.matrixWorld).invert();\n        $31ccd9a92979d6bb$var$ray.copy(raycaster.ray).applyMatrix4($31ccd9a92979d6bb$var$tmpInverseMatrix);\n        const bvh = this.geometry.boundsTree;\n        if (raycaster.firstHitOnly === true) {\n            const hit = (0, $b4YKL.convertRaycastIntersect)(bvh.raycastFirst($31ccd9a92979d6bb$var$ray, this.material), this, raycaster);\n            if (hit) intersects.push(hit);\n        } else {\n            const hits = bvh.raycast($31ccd9a92979d6bb$var$ray, this.material);\n            for(let i = 0, l = hits.length; i < l; i++){\n                const hit = (0, $b4YKL.convertRaycastIntersect)(hits[i], this, raycaster);\n                if (hit) intersects.push(hit);\n            }\n        }\n    } else $31ccd9a92979d6bb$var$origMeshRaycastFunc.call(this, raycaster, intersects);\n}\nfunction $31ccd9a92979d6bb$export$749bba8a65fa6d70(options) {\n    this.boundsTree = new (0, $ff8ed.MeshBVH)(this, options);\n    return this.boundsTree;\n}\nfunction $31ccd9a92979d6bb$export$e0a981a7a32ddba4() {\n    this.boundsTree = null;\n}\n\n});\nparcelRegister(\"b4YKL\", function(module, exports) {\n\n$parcel$export(module.exports, \"convertRaycastIntersect\", () => $810f31c6ff4f494e$export$adb106eed99e8cd8);\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nfunction $810f31c6ff4f494e$export$adb106eed99e8cd8(hit, object, raycaster) {\n    if (hit === null) return null;\n    hit.point.applyMatrix4(object.matrixWorld);\n    hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n    hit.object = object;\n    if (hit.distance < raycaster.near || hit.distance > raycaster.far) return null;\n    else return hit;\n}\n\n});\n\n\nparcelRegister(\"5ca9G\", function(module, exports) {\n\n$parcel$export(module.exports, \"MeshBVHHelper\", () => $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $aw71y = parcelRequire(\"aw71y\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $3c85f35a8c29fa9b$var$boundingBox = /* @__PURE__ */ new (0, $ilwiq.Box3)();\nclass $3c85f35a8c29fa9b$var$MeshBVHRootHelper extends (0, $ilwiq.Object3D) {\n    get isMesh() {\n        return !this.displayEdges;\n    }\n    get isLineSegments() {\n        return this.displayEdges;\n    }\n    get isLine() {\n        return this.displayEdges;\n    }\n    constructor(bvh, material, depth = 10, group = 0){\n        super();\n        this.material = material;\n        this.geometry = new (0, $ilwiq.BufferGeometry)();\n        this.name = \"MeshBVHRootHelper\";\n        this.depth = depth;\n        this.displayParents = false;\n        this.bvh = bvh;\n        this.displayEdges = true;\n        this._group = group;\n    }\n    raycast() {}\n    update() {\n        const geometry = this.geometry;\n        const boundsTree = this.bvh;\n        const group = this._group;\n        geometry.dispose();\n        this.visible = false;\n        if (boundsTree) {\n            // count the number of bounds required\n            const targetDepth = this.depth - 1;\n            const displayParents = this.displayParents;\n            let boundsCount = 0;\n            boundsTree.traverse((depth, isLeaf)=>{\n                if (depth >= targetDepth || isLeaf) {\n                    boundsCount++;\n                    return true;\n                } else if (displayParents) boundsCount++;\n            }, group);\n            // fill in the position buffer with the bounds corners\n            let posIndex = 0;\n            const positionArray = new Float32Array(24 * boundsCount);\n            boundsTree.traverse((depth, isLeaf, boundingData)=>{\n                const terminate = depth >= targetDepth || isLeaf;\n                if (terminate || displayParents) {\n                    (0, $aw71y.arrayToBox)(0, boundingData, $3c85f35a8c29fa9b$var$boundingBox);\n                    const { min: min, max: max } = $3c85f35a8c29fa9b$var$boundingBox;\n                    for(let x = -1; x <= 1; x += 2){\n                        const xVal = x < 0 ? min.x : max.x;\n                        for(let y = -1; y <= 1; y += 2){\n                            const yVal = y < 0 ? min.y : max.y;\n                            for(let z = -1; z <= 1; z += 2){\n                                const zVal = z < 0 ? min.z : max.z;\n                                positionArray[posIndex + 0] = xVal;\n                                positionArray[posIndex + 1] = yVal;\n                                positionArray[posIndex + 2] = zVal;\n                                posIndex += 3;\n                            }\n                        }\n                    }\n                    return terminate;\n                }\n            }, group);\n            let indexArray;\n            let indices;\n            if (this.displayEdges) // fill in the index buffer to point to the corner points\n            indices = new Uint8Array([\n                // x axis\n                0,\n                4,\n                1,\n                5,\n                2,\n                6,\n                3,\n                7,\n                // y axis\n                0,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                7,\n                // z axis\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7\n            ]);\n            else indices = new Uint8Array([\n                // X-, X+\n                0,\n                1,\n                2,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                6,\n                7,\n                5,\n                // Y-, Y+\n                1,\n                4,\n                5,\n                0,\n                4,\n                1,\n                2,\n                3,\n                6,\n                3,\n                7,\n                6,\n                // Z-, Z+\n                0,\n                2,\n                4,\n                2,\n                6,\n                4,\n                1,\n                5,\n                3,\n                3,\n                5,\n                7\n            ]);\n            if (positionArray.length > 65535) indexArray = new Uint32Array(indices.length * boundsCount);\n            else indexArray = new Uint16Array(indices.length * boundsCount);\n            const indexLength = indices.length;\n            for(let i = 0; i < boundsCount; i++){\n                const posOffset = i * 8;\n                const indexOffset = i * indexLength;\n                for(let j = 0; j < indexLength; j++)indexArray[indexOffset + j] = posOffset + indices[j];\n            }\n            // update the geometry\n            geometry.setIndex(new (0, $ilwiq.BufferAttribute)(indexArray, 1, false));\n            geometry.setAttribute(\"position\", new (0, $ilwiq.BufferAttribute)(positionArray, 3, false));\n            this.visible = true;\n        }\n    }\n}\nclass $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 extends (0, $ilwiq.Group) {\n    get color() {\n        return this.edgeMaterial.color;\n    }\n    get opacity() {\n        return this.edgeMaterial.opacity;\n    }\n    set opacity(v) {\n        this.edgeMaterial.opacity = v;\n        this.meshMaterial.opacity = v;\n    }\n    constructor(mesh = null, bvh = null, depth = 10){\n        // handle bvh, depth signature\n        if (mesh instanceof (0, $ff8ed.MeshBVH)) {\n            depth = bvh || 10;\n            bvh = mesh;\n            mesh = null;\n        }\n        // handle mesh, depth signature\n        if (typeof bvh === \"number\") {\n            depth = bvh;\n            bvh = null;\n        }\n        super();\n        this.name = \"MeshBVHHelper\";\n        this.depth = depth;\n        this.mesh = mesh;\n        this.bvh = bvh;\n        this.displayParents = false;\n        this.displayEdges = true;\n        this._roots = [];\n        const edgeMaterial = new (0, $ilwiq.LineBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        const meshMaterial = new (0, $ilwiq.MeshBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        meshMaterial.color = edgeMaterial.color;\n        this.edgeMaterial = edgeMaterial;\n        this.meshMaterial = meshMaterial;\n        this.update();\n    }\n    update() {\n        const bvh = this.bvh || this.mesh.geometry.boundsTree;\n        const totalRoots = bvh ? bvh._roots.length : 0;\n        while(this._roots.length > totalRoots){\n            const root = this._roots.pop();\n            root.geometry.dispose();\n            this.remove(root);\n        }\n        for(let i = 0; i < totalRoots; i++){\n            const { depth: depth, edgeMaterial: edgeMaterial, meshMaterial: meshMaterial, displayParents: displayParents, displayEdges: displayEdges } = this;\n            if (i >= this._roots.length) {\n                const root = new $3c85f35a8c29fa9b$var$MeshBVHRootHelper(bvh, edgeMaterial, depth, i);\n                this.add(root);\n                this._roots.push(root);\n            }\n            const root = this._roots[i];\n            root.bvh = bvh;\n            root.depth = depth;\n            root.displayParents = displayParents;\n            root.displayEdges = displayEdges;\n            root.material = displayEdges ? edgeMaterial : meshMaterial;\n            root.update();\n        }\n    }\n    updateMatrixWorld(...args) {\n        const mesh = this.mesh;\n        const parent = this.parent;\n        if (mesh !== null) {\n            mesh.updateWorldMatrix(true, false);\n            if (parent) this.matrix.copy(parent.matrixWorld).invert().multiply(mesh.matrixWorld);\n            else this.matrix.copy(mesh.matrixWorld);\n            this.matrix.decompose(this.position, this.quaternion, this.scale);\n        }\n        super.updateMatrixWorld(...args);\n    }\n    copy(source) {\n        this.depth = source.depth;\n        this.mesh = source.mesh;\n        this.bvh = source.bvh;\n        this.opacity = source.opacity;\n        this.color.copy(source.color);\n    }\n    clone() {\n        return new $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5(this.mesh, this.bvh, this.depth);\n    }\n    dispose() {\n        this.edgeMaterial.dispose();\n        this.meshMaterial.dispose();\n        const children = this.children;\n        for(let i = 0, l = children.length; i < l; i++)children[i].geometry.dispose();\n    }\n}\nclass $3c85f35a8c29fa9b$export$5ead38ed5c75a1c8 extends $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 {\n    constructor(...args){\n        super(...args);\n        console.warn(\"MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.\");\n    }\n}\n\n});\n\n\nvar $hBOJ2 = parcelRequire(\"hBOJ2\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $fUhpq = parcelRequire(\"fUhpq\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n/**\n * Port of http://webglsamples.org/blob/blob.html\n */ class $bfb18d85c853c85d$export$14387c46dff8604b extends (0, $ilwiq.Mesh) {\n    constructor(resolution, material, enableUvs = false, enableColors = false, maxPolyCount = 10000){\n        const geometry = new (0, $ilwiq.BufferGeometry)();\n        super(geometry, material);\n        const scope = this;\n        // temp buffers used in polygonize\n        const vlist = new Float32Array(36);\n        const nlist = new Float32Array(36);\n        const clist = new Float32Array(36);\n        this.enableUvs = enableUvs;\n        this.enableColors = enableColors;\n        this.autoUpdate = true;\n        // functions have to be object properties\n        // prototype functions kill performance\n        // (tested and it was 4x slower !!!)\n        this.init = function(resolution) {\n            this.resolution = resolution;\n            // parameters\n            this.isolation = 80.0;\n            // size of field, 32 is pushing it in Javascript :)\n            this.size = resolution;\n            this.size2 = this.size * this.size;\n            this.size3 = this.size2 * this.size;\n            this.halfsize = this.size / 2.0;\n            // deltas\n            this.delta = 2.0 / this.size;\n            this.yd = this.size;\n            this.zd = this.size2;\n            this.field = new Float32Array(this.size3);\n            this.normal_cache = new Float32Array(this.size3 * 3);\n            this.palette = new Float32Array(this.size3 * 3);\n            //\n            this.count = 0;\n            const maxVertexCount = maxPolyCount * 3;\n            this.positionArray = new Float32Array(maxVertexCount * 3);\n            const positionAttribute = new (0, $ilwiq.BufferAttribute)(this.positionArray, 3);\n            positionAttribute.setUsage((0, $ilwiq.DynamicDrawUsage));\n            geometry.setAttribute(\"position\", positionAttribute);\n            this.normalArray = new Float32Array(maxVertexCount * 3);\n            const normalAttribute = new (0, $ilwiq.BufferAttribute)(this.normalArray, 3);\n            normalAttribute.setUsage((0, $ilwiq.DynamicDrawUsage));\n            geometry.setAttribute(\"normal\", normalAttribute);\n            if (this.enableUvs) {\n                this.uvArray = new Float32Array(maxVertexCount * 2);\n                const uvAttribute = new (0, $ilwiq.BufferAttribute)(this.uvArray, 2);\n                uvAttribute.setUsage((0, $ilwiq.DynamicDrawUsage));\n                geometry.setAttribute(\"uv\", uvAttribute);\n            }\n            if (this.enableColors) {\n                this.colorArray = new Float32Array(maxVertexCount * 3);\n                const colorAttribute = new (0, $ilwiq.BufferAttribute)(this.colorArray, 3);\n                colorAttribute.setUsage((0, $ilwiq.DynamicDrawUsage));\n                geometry.setAttribute(\"color\", colorAttribute);\n            }\n        };\n        ///////////////////////\n        // Polygonization\n        ///////////////////////\n        function lerp(a, b, t) {\n            return a + (b - a) * t;\n        }\n        function VIntX(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n            const mu = (isol - valp1) / (valp2 - valp1), nc = scope.normal_cache;\n            vlist[offset + 0] = x + mu * scope.delta;\n            vlist[offset + 1] = y;\n            vlist[offset + 2] = z;\n            nlist[offset + 0] = lerp(nc[q + 0], nc[q + 3], mu);\n            nlist[offset + 1] = lerp(nc[q + 1], nc[q + 4], mu);\n            nlist[offset + 2] = lerp(nc[q + 2], nc[q + 5], mu);\n            clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu);\n            clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu);\n            clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu);\n        }\n        function VIntY(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n            const mu = (isol - valp1) / (valp2 - valp1), nc = scope.normal_cache;\n            vlist[offset + 0] = x;\n            vlist[offset + 1] = y + mu * scope.delta;\n            vlist[offset + 2] = z;\n            const q2 = q + scope.yd * 3;\n            nlist[offset + 0] = lerp(nc[q + 0], nc[q2 + 0], mu);\n            nlist[offset + 1] = lerp(nc[q + 1], nc[q2 + 1], mu);\n            nlist[offset + 2] = lerp(nc[q + 2], nc[q2 + 2], mu);\n            clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu);\n            clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu);\n            clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu);\n        }\n        function VIntZ(q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2) {\n            const mu = (isol - valp1) / (valp2 - valp1), nc = scope.normal_cache;\n            vlist[offset + 0] = x;\n            vlist[offset + 1] = y;\n            vlist[offset + 2] = z + mu * scope.delta;\n            const q2 = q + scope.zd * 3;\n            nlist[offset + 0] = lerp(nc[q + 0], nc[q2 + 0], mu);\n            nlist[offset + 1] = lerp(nc[q + 1], nc[q2 + 1], mu);\n            nlist[offset + 2] = lerp(nc[q + 2], nc[q2 + 2], mu);\n            clist[offset + 0] = lerp(scope.palette[c_offset1 * 3 + 0], scope.palette[c_offset2 * 3 + 0], mu);\n            clist[offset + 1] = lerp(scope.palette[c_offset1 * 3 + 1], scope.palette[c_offset2 * 3 + 1], mu);\n            clist[offset + 2] = lerp(scope.palette[c_offset1 * 3 + 2], scope.palette[c_offset2 * 3 + 2], mu);\n        }\n        function compNorm(q) {\n            const q3 = q * 3;\n            if (scope.normal_cache[q3] === 0.0) {\n                scope.normal_cache[q3 + 0] = scope.field[q - 1] - scope.field[q + 1];\n                scope.normal_cache[q3 + 1] = scope.field[q - scope.yd] - scope.field[q + scope.yd];\n                scope.normal_cache[q3 + 2] = scope.field[q - scope.zd] - scope.field[q + scope.zd];\n            }\n        }\n        // Returns total number of triangles. Fills triangles.\n        // (this is where most of time is spent - it's inner work of O(n3) loop )\n        function polygonize(fx, fy, fz, q, isol) {\n            // cache indices\n            const q1 = q + 1, qy = q + scope.yd, qz = q + scope.zd, q1y = q1 + scope.yd, q1z = q1 + scope.zd, qyz = q + scope.yd + scope.zd, q1yz = q1 + scope.yd + scope.zd;\n            let cubeindex = 0;\n            const field0 = scope.field[q], field1 = scope.field[q1], field2 = scope.field[qy], field3 = scope.field[q1y], field4 = scope.field[qz], field5 = scope.field[q1z], field6 = scope.field[qyz], field7 = scope.field[q1yz];\n            if (field0 < isol) cubeindex |= 1;\n            if (field1 < isol) cubeindex |= 2;\n            if (field2 < isol) cubeindex |= 8;\n            if (field3 < isol) cubeindex |= 4;\n            if (field4 < isol) cubeindex |= 16;\n            if (field5 < isol) cubeindex |= 32;\n            if (field6 < isol) cubeindex |= 128;\n            if (field7 < isol) cubeindex |= 64;\n            // if cube is entirely in/out of the surface - bail, nothing to draw\n            const bits = $bfb18d85c853c85d$export$3862a3f34ed06da0[cubeindex];\n            if (bits === 0) return 0;\n            const d = scope.delta, fx2 = fx + d, fy2 = fy + d, fz2 = fz + d;\n            // top of the cube\n            if (bits & 1) {\n                compNorm(q);\n                compNorm(q1);\n                VIntX(q * 3, 0, isol, fx, fy, fz, field0, field1, q, q1);\n            }\n            if (bits & 2) {\n                compNorm(q1);\n                compNorm(q1y);\n                VIntY(q1 * 3, 3, isol, fx2, fy, fz, field1, field3, q1, q1y);\n            }\n            if (bits & 4) {\n                compNorm(qy);\n                compNorm(q1y);\n                VIntX(qy * 3, 6, isol, fx, fy2, fz, field2, field3, qy, q1y);\n            }\n            if (bits & 8) {\n                compNorm(q);\n                compNorm(qy);\n                VIntY(q * 3, 9, isol, fx, fy, fz, field0, field2, q, qy);\n            }\n            // bottom of the cube\n            if (bits & 16) {\n                compNorm(qz);\n                compNorm(q1z);\n                VIntX(qz * 3, 12, isol, fx, fy, fz2, field4, field5, qz, q1z);\n            }\n            if (bits & 32) {\n                compNorm(q1z);\n                compNorm(q1yz);\n                VIntY(q1z * 3, 15, isol, fx2, fy, fz2, field5, field7, q1z, q1yz);\n            }\n            if (bits & 64) {\n                compNorm(qyz);\n                compNorm(q1yz);\n                VIntX(qyz * 3, 18, isol, fx, fy2, fz2, field6, field7, qyz, q1yz);\n            }\n            if (bits & 128) {\n                compNorm(qz);\n                compNorm(qyz);\n                VIntY(qz * 3, 21, isol, fx, fy, fz2, field4, field6, qz, qyz);\n            }\n            // vertical lines of the cube\n            if (bits & 256) {\n                compNorm(q);\n                compNorm(qz);\n                VIntZ(q * 3, 24, isol, fx, fy, fz, field0, field4, q, qz);\n            }\n            if (bits & 512) {\n                compNorm(q1);\n                compNorm(q1z);\n                VIntZ(q1 * 3, 27, isol, fx2, fy, fz, field1, field5, q1, q1z);\n            }\n            if (bits & 1024) {\n                compNorm(q1y);\n                compNorm(q1yz);\n                VIntZ(q1y * 3, 30, isol, fx2, fy2, fz, field3, field7, q1y, q1yz);\n            }\n            if (bits & 2048) {\n                compNorm(qy);\n                compNorm(qyz);\n                VIntZ(qy * 3, 33, isol, fx, fy2, fz, field2, field6, qy, qyz);\n            }\n            cubeindex <<= 4; // re-purpose cubeindex into an offset into triTable\n            let o1, o2, o3, numtris = 0, i = 0;\n            // here is where triangles are created\n            while($bfb18d85c853c85d$export$58dc940266ca4076[cubeindex + i] != -1){\n                o1 = cubeindex + i;\n                o2 = o1 + 1;\n                o3 = o1 + 2;\n                posnormtriv(vlist, nlist, clist, 3 * $bfb18d85c853c85d$export$58dc940266ca4076[o1], 3 * $bfb18d85c853c85d$export$58dc940266ca4076[o2], 3 * $bfb18d85c853c85d$export$58dc940266ca4076[o3]);\n                i += 3;\n                numtris++;\n            }\n            return numtris;\n        }\n        function posnormtriv(pos, norm, colors, o1, o2, o3) {\n            const c = scope.count * 3;\n            // positions\n            scope.positionArray[c + 0] = pos[o1];\n            scope.positionArray[c + 1] = pos[o1 + 1];\n            scope.positionArray[c + 2] = pos[o1 + 2];\n            scope.positionArray[c + 3] = pos[o2];\n            scope.positionArray[c + 4] = pos[o2 + 1];\n            scope.positionArray[c + 5] = pos[o2 + 2];\n            scope.positionArray[c + 6] = pos[o3];\n            scope.positionArray[c + 7] = pos[o3 + 1];\n            scope.positionArray[c + 8] = pos[o3 + 2];\n            // normals\n            if (scope.material.flatShading === true) {\n                const nx = (norm[o1 + 0] + norm[o2 + 0] + norm[o3 + 0]) / 3;\n                const ny = (norm[o1 + 1] + norm[o2 + 1] + norm[o3 + 1]) / 3;\n                const nz = (norm[o1 + 2] + norm[o2 + 2] + norm[o3 + 2]) / 3;\n                scope.normalArray[c + 0] = nx;\n                scope.normalArray[c + 1] = ny;\n                scope.normalArray[c + 2] = nz;\n                scope.normalArray[c + 3] = nx;\n                scope.normalArray[c + 4] = ny;\n                scope.normalArray[c + 5] = nz;\n                scope.normalArray[c + 6] = nx;\n                scope.normalArray[c + 7] = ny;\n                scope.normalArray[c + 8] = nz;\n            } else {\n                scope.normalArray[c + 0] = norm[o1 + 0];\n                scope.normalArray[c + 1] = norm[o1 + 1];\n                scope.normalArray[c + 2] = norm[o1 + 2];\n                scope.normalArray[c + 3] = norm[o2 + 0];\n                scope.normalArray[c + 4] = norm[o2 + 1];\n                scope.normalArray[c + 5] = norm[o2 + 2];\n                scope.normalArray[c + 6] = norm[o3 + 0];\n                scope.normalArray[c + 7] = norm[o3 + 1];\n                scope.normalArray[c + 8] = norm[o3 + 2];\n            }\n            // uvs\n            if (scope.enableUvs) {\n                const d = scope.count * 2;\n                scope.uvArray[d + 0] = pos[o1 + 0];\n                scope.uvArray[d + 1] = pos[o1 + 2];\n                scope.uvArray[d + 2] = pos[o2 + 0];\n                scope.uvArray[d + 3] = pos[o2 + 2];\n                scope.uvArray[d + 4] = pos[o3 + 0];\n                scope.uvArray[d + 5] = pos[o3 + 2];\n            }\n            // colors\n            if (scope.enableColors) {\n                scope.colorArray[c + 0] = colors[o1 + 0];\n                scope.colorArray[c + 1] = colors[o1 + 1];\n                scope.colorArray[c + 2] = colors[o1 + 2];\n                scope.colorArray[c + 3] = colors[o2 + 0];\n                scope.colorArray[c + 4] = colors[o2 + 1];\n                scope.colorArray[c + 5] = colors[o2 + 2];\n                scope.colorArray[c + 6] = colors[o3 + 0];\n                scope.colorArray[c + 7] = colors[o3 + 1];\n                scope.colorArray[c + 8] = colors[o3 + 2];\n            }\n            scope.count += 3;\n        }\n        /////////////////////////////////////\n        // Metaballs\n        /////////////////////////////////////\n        // Adds a reciprocal ball (nice and blobby) that, to be fast, fades to zero after\n        // a fixed distance, determined by strength and subtract.\n        this.addBall = function(ballx, bally, ballz, strength, subtract, colors) {\n            const sign = Math.sign(strength);\n            strength = Math.abs(strength);\n            const userDefineColor = !(colors === undefined || colors === null);\n            let ballColor = new (0, $ilwiq.Color)(ballx, bally, ballz);\n            if (userDefineColor) try {\n                ballColor = colors instanceof (0, $ilwiq.Color) ? colors : Array.isArray(colors) ? new (0, $ilwiq.Color)(Math.min(Math.abs(colors[0]), 1), Math.min(Math.abs(colors[1]), 1), Math.min(Math.abs(colors[2]), 1)) : new (0, $ilwiq.Color)(colors);\n            } catch (err) {\n                ballColor = new (0, $ilwiq.Color)(ballx, bally, ballz);\n            }\n            // Let's solve the equation to find the radius:\n            // 1.0 / (0.000001 + radius^2) * strength - subtract = 0\n            // strength / (radius^2) = subtract\n            // strength = subtract * radius^2\n            // radius^2 = strength / subtract\n            // radius = sqrt(strength / subtract)\n            const radius = this.size * Math.sqrt(strength / subtract), zs = ballz * this.size, ys = bally * this.size, xs = ballx * this.size;\n            let min_z = Math.floor(zs - radius);\n            if (min_z < 1) min_z = 1;\n            let max_z = Math.floor(zs + radius);\n            if (max_z > this.size - 1) max_z = this.size - 1;\n            let min_y = Math.floor(ys - radius);\n            if (min_y < 1) min_y = 1;\n            let max_y = Math.floor(ys + radius);\n            if (max_y > this.size - 1) max_y = this.size - 1;\n            let min_x = Math.floor(xs - radius);\n            if (min_x < 1) min_x = 1;\n            let max_x = Math.floor(xs + radius);\n            if (max_x > this.size - 1) max_x = this.size - 1;\n            // Don't polygonize in the outer layer because normals aren't\n            // well-defined there.\n            let x, y, z, y_offset, z_offset, fx, fy, fz, fz2, fy2, val;\n            for(z = min_z; z < max_z; z++){\n                z_offset = this.size2 * z;\n                fz = z / this.size - ballz;\n                fz2 = fz * fz;\n                for(y = min_y; y < max_y; y++){\n                    y_offset = z_offset + this.size * y;\n                    fy = y / this.size - bally;\n                    fy2 = fy * fy;\n                    for(x = min_x; x < max_x; x++){\n                        fx = x / this.size - ballx;\n                        val = strength / (0.000001 + fx * fx + fy2 + fz2) - subtract;\n                        if (val > 0.0) {\n                            this.field[y_offset + x] += val * sign;\n                            // optimization\n                            // http://www.geisswerks.com/ryan/BLOBS/blobs.html\n                            const ratio = Math.sqrt((x - xs) * (x - xs) + (y - ys) * (y - ys) + (z - zs) * (z - zs)) / radius;\n                            const contrib = 1 - ratio * ratio * ratio * (ratio * (ratio * 6 - 15) + 10);\n                            this.palette[(y_offset + x) * 3 + 0] += ballColor.r * contrib;\n                            this.palette[(y_offset + x) * 3 + 1] += ballColor.g * contrib;\n                            this.palette[(y_offset + x) * 3 + 2] += ballColor.b * contrib;\n                        }\n                    }\n                }\n            }\n        };\n        this.addPlaneX = function(strength, subtract) {\n            // cache attribute lookups\n            const size = this.size, yd = this.yd, zd = this.zd, field = this.field;\n            let x, y, z, xx, val, xdiv, cxy, dist = size * Math.sqrt(strength / subtract);\n            if (dist > size) dist = size;\n            for(x = 0; x < dist; x++){\n                xdiv = x / size;\n                xx = xdiv * xdiv;\n                val = strength / (0.0001 + xx) - subtract;\n                if (val > 0.0) for(y = 0; y < size; y++){\n                    cxy = x + y * yd;\n                    for(z = 0; z < size; z++)field[zd * z + cxy] += val;\n                }\n            }\n        };\n        this.addPlaneY = function(strength, subtract) {\n            // cache attribute lookups\n            const size = this.size, yd = this.yd, zd = this.zd, field = this.field;\n            let x, y, z, yy, val, ydiv, cy, cxy, dist = size * Math.sqrt(strength / subtract);\n            if (dist > size) dist = size;\n            for(y = 0; y < dist; y++){\n                ydiv = y / size;\n                yy = ydiv * ydiv;\n                val = strength / (0.0001 + yy) - subtract;\n                if (val > 0.0) {\n                    cy = y * yd;\n                    for(x = 0; x < size; x++){\n                        cxy = cy + x;\n                        for(z = 0; z < size; z++)field[zd * z + cxy] += val;\n                    }\n                }\n            }\n        };\n        this.addPlaneZ = function(strength, subtract) {\n            // cache attribute lookups\n            const size = this.size, yd = this.yd, zd = this.zd, field = this.field;\n            let x, y, z, zz, val, zdiv, cz, cyz, dist = size * Math.sqrt(strength / subtract);\n            if (dist > size) dist = size;\n            for(z = 0; z < dist; z++){\n                zdiv = z / size;\n                zz = zdiv * zdiv;\n                val = strength / (0.0001 + zz) - subtract;\n                if (val > 0.0) {\n                    cz = zd * z;\n                    for(y = 0; y < size; y++){\n                        cyz = cz + y * yd;\n                        for(x = 0; x < size; x++)field[cyz + x] += val;\n                    }\n                }\n            }\n        };\n        /////////////////////////////////////\n        // Updates\n        /////////////////////////////////////\n        this.setCell = function(x, y, z, value) {\n            const index = this.size2 * z + this.size * y + x;\n            this.field[index] = value;\n        };\n        this.getCell = function(x, y, z) {\n            const index = this.size2 * z + this.size * y + x;\n            return this.field[index];\n        };\n        this.blur = function(intensity = 1) {\n            const field = this.field;\n            const fieldCopy = field.slice();\n            const size = this.size;\n            const size2 = this.size2;\n            for(let x = 0; x < size; x++){\n                for(let y = 0; y < size; y++)for(let z = 0; z < size; z++){\n                    const index = size2 * z + size * y + x;\n                    let val = fieldCopy[index];\n                    let count = 1;\n                    for(let x2 = -1; x2 <= 1; x2 += 2){\n                        const x3 = x2 + x;\n                        if (x3 < 0 || x3 >= size) continue;\n                        for(let y2 = -1; y2 <= 1; y2 += 2){\n                            const y3 = y2 + y;\n                            if (y3 < 0 || y3 >= size) continue;\n                            for(let z2 = -1; z2 <= 1; z2 += 2){\n                                const z3 = z2 + z;\n                                if (z3 < 0 || z3 >= size) continue;\n                                const index2 = size2 * z3 + size * y3 + x3;\n                                const val2 = fieldCopy[index2];\n                                count++;\n                                val += intensity * (val2 - val) / count;\n                            }\n                        }\n                    }\n                    field[index] = val;\n                }\n            }\n        };\n        this.reset = function() {\n            // wipe the normal cache\n            for(let i = 0; i < this.size3; i++){\n                this.normal_cache[i * 3] = 0.0;\n                this.field[i] = 0.0;\n                this.palette[i * 3] = this.palette[i * 3 + 1] = this.palette[i * 3 + 2] = 0.0;\n            }\n        };\n        this.update = function() {\n            this.count = 0;\n            // Triangulate. Yeah, this is slow.\n            const smin2 = this.size - 2;\n            for(let z = 1; z < smin2; z++){\n                const z_offset = this.size2 * z;\n                const fz = (z - this.halfsize) / this.halfsize; //+ 1\n                for(let y = 1; y < smin2; y++){\n                    const y_offset = z_offset + this.size * y;\n                    const fy = (y - this.halfsize) / this.halfsize; //+ 1\n                    for(let x = 1; x < smin2; x++){\n                        const fx = (x - this.halfsize) / this.halfsize; //+ 1\n                        const q = y_offset + x;\n                        polygonize(fx, fy, fz, q, this.isolation);\n                    }\n                }\n            }\n            this.geometry.setDrawRange(0, this.count);\n            // update geometry data\n            geometry.getAttribute(\"position\").needsUpdate = true;\n            geometry.getAttribute(\"normal\").needsUpdate = true;\n            if (this.enableUvs) geometry.getAttribute(\"uv\").needsUpdate = true;\n            if (this.enableColors) geometry.getAttribute(\"color\").needsUpdate = true;\n            // safety check\n            if (this.count / 3 > maxPolyCount) console.warn(\"THREE.MarchingCubes: Geometry buffers too small for rendering. Please create an instance with a higher poly count.\");\n        };\n        this.onBeforeRender = function() {\n            if (this.autoUpdate) this.update();\n        };\n        this.init(resolution);\n    }\n}\n$bfb18d85c853c85d$export$14387c46dff8604b.prototype.isMarchingCubes = true;\n/////////////////////////////////////\n// Marching cubes lookup tables\n/////////////////////////////////////\n// These tables are straight from Paul Bourke's page:\n// http://paulbourke.net/geometry/polygonise/\n// who in turn got them from Cory Gene Bloyd.\nconst $bfb18d85c853c85d$export$3862a3f34ed06da0 = new Int32Array([\n    0x0,\n    0x109,\n    0x203,\n    0x30a,\n    0x406,\n    0x50f,\n    0x605,\n    0x70c,\n    0x80c,\n    0x905,\n    0xa0f,\n    0xb06,\n    0xc0a,\n    0xd03,\n    0xe09,\n    0xf00,\n    0x190,\n    0x99,\n    0x393,\n    0x29a,\n    0x596,\n    0x49f,\n    0x795,\n    0x69c,\n    0x99c,\n    0x895,\n    0xb9f,\n    0xa96,\n    0xd9a,\n    0xc93,\n    0xf99,\n    0xe90,\n    0x230,\n    0x339,\n    0x33,\n    0x13a,\n    0x636,\n    0x73f,\n    0x435,\n    0x53c,\n    0xa3c,\n    0xb35,\n    0x83f,\n    0x936,\n    0xe3a,\n    0xf33,\n    0xc39,\n    0xd30,\n    0x3a0,\n    0x2a9,\n    0x1a3,\n    0xaa,\n    0x7a6,\n    0x6af,\n    0x5a5,\n    0x4ac,\n    0xbac,\n    0xaa5,\n    0x9af,\n    0x8a6,\n    0xfaa,\n    0xea3,\n    0xda9,\n    0xca0,\n    0x460,\n    0x569,\n    0x663,\n    0x76a,\n    0x66,\n    0x16f,\n    0x265,\n    0x36c,\n    0xc6c,\n    0xd65,\n    0xe6f,\n    0xf66,\n    0x86a,\n    0x963,\n    0xa69,\n    0xb60,\n    0x5f0,\n    0x4f9,\n    0x7f3,\n    0x6fa,\n    0x1f6,\n    0xff,\n    0x3f5,\n    0x2fc,\n    0xdfc,\n    0xcf5,\n    0xfff,\n    0xef6,\n    0x9fa,\n    0x8f3,\n    0xbf9,\n    0xaf0,\n    0x650,\n    0x759,\n    0x453,\n    0x55a,\n    0x256,\n    0x35f,\n    0x55,\n    0x15c,\n    0xe5c,\n    0xf55,\n    0xc5f,\n    0xd56,\n    0xa5a,\n    0xb53,\n    0x859,\n    0x950,\n    0x7c0,\n    0x6c9,\n    0x5c3,\n    0x4ca,\n    0x3c6,\n    0x2cf,\n    0x1c5,\n    0xcc,\n    0xfcc,\n    0xec5,\n    0xdcf,\n    0xcc6,\n    0xbca,\n    0xac3,\n    0x9c9,\n    0x8c0,\n    0x8c0,\n    0x9c9,\n    0xac3,\n    0xbca,\n    0xcc6,\n    0xdcf,\n    0xec5,\n    0xfcc,\n    0xcc,\n    0x1c5,\n    0x2cf,\n    0x3c6,\n    0x4ca,\n    0x5c3,\n    0x6c9,\n    0x7c0,\n    0x950,\n    0x859,\n    0xb53,\n    0xa5a,\n    0xd56,\n    0xc5f,\n    0xf55,\n    0xe5c,\n    0x15c,\n    0x55,\n    0x35f,\n    0x256,\n    0x55a,\n    0x453,\n    0x759,\n    0x650,\n    0xaf0,\n    0xbf9,\n    0x8f3,\n    0x9fa,\n    0xef6,\n    0xfff,\n    0xcf5,\n    0xdfc,\n    0x2fc,\n    0x3f5,\n    0xff,\n    0x1f6,\n    0x6fa,\n    0x7f3,\n    0x4f9,\n    0x5f0,\n    0xb60,\n    0xa69,\n    0x963,\n    0x86a,\n    0xf66,\n    0xe6f,\n    0xd65,\n    0xc6c,\n    0x36c,\n    0x265,\n    0x16f,\n    0x66,\n    0x76a,\n    0x663,\n    0x569,\n    0x460,\n    0xca0,\n    0xda9,\n    0xea3,\n    0xfaa,\n    0x8a6,\n    0x9af,\n    0xaa5,\n    0xbac,\n    0x4ac,\n    0x5a5,\n    0x6af,\n    0x7a6,\n    0xaa,\n    0x1a3,\n    0x2a9,\n    0x3a0,\n    0xd30,\n    0xc39,\n    0xf33,\n    0xe3a,\n    0x936,\n    0x83f,\n    0xb35,\n    0xa3c,\n    0x53c,\n    0x435,\n    0x73f,\n    0x636,\n    0x13a,\n    0x33,\n    0x339,\n    0x230,\n    0xe90,\n    0xf99,\n    0xc93,\n    0xd9a,\n    0xa96,\n    0xb9f,\n    0x895,\n    0x99c,\n    0x69c,\n    0x795,\n    0x49f,\n    0x596,\n    0x29a,\n    0x393,\n    0x99,\n    0x190,\n    0xf00,\n    0xe09,\n    0xd03,\n    0xc0a,\n    0xb06,\n    0xa0f,\n    0x905,\n    0x80c,\n    0x70c,\n    0x605,\n    0x50f,\n    0x406,\n    0x30a,\n    0x203,\n    0x109,\n    0x0\n]);\nconst $bfb18d85c853c85d$export$58dc940266ca4076 = new Int32Array([\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    8,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    8,\n    3,\n    9,\n    8,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    2,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    8,\n    3,\n    1,\n    2,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    2,\n    10,\n    0,\n    2,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    8,\n    3,\n    2,\n    10,\n    8,\n    10,\n    9,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    11,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    11,\n    2,\n    8,\n    11,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    9,\n    0,\n    2,\n    3,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    11,\n    2,\n    1,\n    9,\n    11,\n    9,\n    8,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    10,\n    1,\n    11,\n    10,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    10,\n    1,\n    0,\n    8,\n    10,\n    8,\n    11,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    9,\n    0,\n    3,\n    11,\n    9,\n    11,\n    10,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    8,\n    10,\n    10,\n    8,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    7,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    3,\n    0,\n    7,\n    3,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    9,\n    8,\n    4,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    1,\n    9,\n    4,\n    7,\n    1,\n    7,\n    3,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    2,\n    10,\n    8,\n    4,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    4,\n    7,\n    3,\n    0,\n    4,\n    1,\n    2,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    2,\n    10,\n    9,\n    0,\n    2,\n    8,\n    4,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    10,\n    9,\n    2,\n    9,\n    7,\n    2,\n    7,\n    3,\n    7,\n    9,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    4,\n    7,\n    3,\n    11,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    11,\n    4,\n    7,\n    11,\n    2,\n    4,\n    2,\n    0,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    0,\n    1,\n    8,\n    4,\n    7,\n    2,\n    3,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    7,\n    11,\n    9,\n    4,\n    11,\n    9,\n    11,\n    2,\n    9,\n    2,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    10,\n    1,\n    3,\n    11,\n    10,\n    7,\n    8,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    11,\n    10,\n    1,\n    4,\n    11,\n    1,\n    0,\n    4,\n    7,\n    11,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    7,\n    8,\n    9,\n    0,\n    11,\n    9,\n    11,\n    10,\n    11,\n    0,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    7,\n    11,\n    4,\n    11,\n    9,\n    9,\n    11,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    5,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    5,\n    4,\n    0,\n    8,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    5,\n    4,\n    1,\n    5,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    5,\n    4,\n    8,\n    3,\n    5,\n    3,\n    1,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    2,\n    10,\n    9,\n    5,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    0,\n    8,\n    1,\n    2,\n    10,\n    4,\n    9,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    2,\n    10,\n    5,\n    4,\n    2,\n    4,\n    0,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    10,\n    5,\n    3,\n    2,\n    5,\n    3,\n    5,\n    4,\n    3,\n    4,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    5,\n    4,\n    2,\n    3,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    11,\n    2,\n    0,\n    8,\n    11,\n    4,\n    9,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    5,\n    4,\n    0,\n    1,\n    5,\n    2,\n    3,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    1,\n    5,\n    2,\n    5,\n    8,\n    2,\n    8,\n    11,\n    4,\n    8,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    3,\n    11,\n    10,\n    1,\n    3,\n    9,\n    5,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    9,\n    5,\n    0,\n    8,\n    1,\n    8,\n    10,\n    1,\n    8,\n    11,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    4,\n    0,\n    5,\n    0,\n    11,\n    5,\n    11,\n    10,\n    11,\n    0,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    4,\n    8,\n    5,\n    8,\n    10,\n    10,\n    8,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    7,\n    8,\n    5,\n    7,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    3,\n    0,\n    9,\n    5,\n    3,\n    5,\n    7,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    7,\n    8,\n    0,\n    1,\n    7,\n    1,\n    5,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    5,\n    3,\n    3,\n    5,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    7,\n    8,\n    9,\n    5,\n    7,\n    10,\n    1,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    1,\n    2,\n    9,\n    5,\n    0,\n    5,\n    3,\n    0,\n    5,\n    7,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    0,\n    2,\n    8,\n    2,\n    5,\n    8,\n    5,\n    7,\n    10,\n    5,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    10,\n    5,\n    2,\n    5,\n    3,\n    3,\n    5,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    9,\n    5,\n    7,\n    8,\n    9,\n    3,\n    11,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    5,\n    7,\n    9,\n    7,\n    2,\n    9,\n    2,\n    0,\n    2,\n    7,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    3,\n    11,\n    0,\n    1,\n    8,\n    1,\n    7,\n    8,\n    1,\n    5,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    11,\n    2,\n    1,\n    11,\n    1,\n    7,\n    7,\n    1,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    5,\n    8,\n    8,\n    5,\n    7,\n    10,\n    1,\n    3,\n    10,\n    3,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    7,\n    0,\n    5,\n    0,\n    9,\n    7,\n    11,\n    0,\n    1,\n    0,\n    10,\n    11,\n    10,\n    0,\n    -1,\n    11,\n    10,\n    0,\n    11,\n    0,\n    3,\n    10,\n    5,\n    0,\n    8,\n    0,\n    7,\n    5,\n    7,\n    0,\n    -1,\n    11,\n    10,\n    5,\n    7,\n    11,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    6,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    8,\n    3,\n    5,\n    10,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    0,\n    1,\n    5,\n    10,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    8,\n    3,\n    1,\n    9,\n    8,\n    5,\n    10,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    6,\n    5,\n    2,\n    6,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    6,\n    5,\n    1,\n    2,\n    6,\n    3,\n    0,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    6,\n    5,\n    9,\n    0,\n    6,\n    0,\n    2,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    9,\n    8,\n    5,\n    8,\n    2,\n    5,\n    2,\n    6,\n    3,\n    2,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    3,\n    11,\n    10,\n    6,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    11,\n    0,\n    8,\n    11,\n    2,\n    0,\n    10,\n    6,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    9,\n    2,\n    3,\n    11,\n    5,\n    10,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    10,\n    6,\n    1,\n    9,\n    2,\n    9,\n    11,\n    2,\n    9,\n    8,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    3,\n    11,\n    6,\n    5,\n    3,\n    5,\n    1,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    8,\n    11,\n    0,\n    11,\n    5,\n    0,\n    5,\n    1,\n    5,\n    11,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    11,\n    6,\n    0,\n    3,\n    6,\n    0,\n    6,\n    5,\n    0,\n    5,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    5,\n    9,\n    6,\n    9,\n    11,\n    11,\n    9,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    10,\n    6,\n    4,\n    7,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    3,\n    0,\n    4,\n    7,\n    3,\n    6,\n    5,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    9,\n    0,\n    5,\n    10,\n    6,\n    8,\n    4,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    6,\n    5,\n    1,\n    9,\n    7,\n    1,\n    7,\n    3,\n    7,\n    9,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    1,\n    2,\n    6,\n    5,\n    1,\n    4,\n    7,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    2,\n    5,\n    5,\n    2,\n    6,\n    3,\n    0,\n    4,\n    3,\n    4,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    4,\n    7,\n    9,\n    0,\n    5,\n    0,\n    6,\n    5,\n    0,\n    2,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    3,\n    9,\n    7,\n    9,\n    4,\n    3,\n    2,\n    9,\n    5,\n    9,\n    6,\n    2,\n    6,\n    9,\n    -1,\n    3,\n    11,\n    2,\n    7,\n    8,\n    4,\n    10,\n    6,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    10,\n    6,\n    4,\n    7,\n    2,\n    4,\n    2,\n    0,\n    2,\n    7,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    9,\n    4,\n    7,\n    8,\n    2,\n    3,\n    11,\n    5,\n    10,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    2,\n    1,\n    9,\n    11,\n    2,\n    9,\n    4,\n    11,\n    7,\n    11,\n    4,\n    5,\n    10,\n    6,\n    -1,\n    8,\n    4,\n    7,\n    3,\n    11,\n    5,\n    3,\n    5,\n    1,\n    5,\n    11,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    1,\n    11,\n    5,\n    11,\n    6,\n    1,\n    0,\n    11,\n    7,\n    11,\n    4,\n    0,\n    4,\n    11,\n    -1,\n    0,\n    5,\n    9,\n    0,\n    6,\n    5,\n    0,\n    3,\n    6,\n    11,\n    6,\n    3,\n    8,\n    4,\n    7,\n    -1,\n    6,\n    5,\n    9,\n    6,\n    9,\n    11,\n    4,\n    7,\n    9,\n    7,\n    11,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    4,\n    9,\n    6,\n    4,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    10,\n    6,\n    4,\n    9,\n    10,\n    0,\n    8,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    0,\n    1,\n    10,\n    6,\n    0,\n    6,\n    4,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    3,\n    1,\n    8,\n    1,\n    6,\n    8,\n    6,\n    4,\n    6,\n    1,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    4,\n    9,\n    1,\n    2,\n    4,\n    2,\n    6,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    0,\n    8,\n    1,\n    2,\n    9,\n    2,\n    4,\n    9,\n    2,\n    6,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    2,\n    4,\n    4,\n    2,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    3,\n    2,\n    8,\n    2,\n    4,\n    4,\n    2,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    4,\n    9,\n    10,\n    6,\n    4,\n    11,\n    2,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    8,\n    2,\n    2,\n    8,\n    11,\n    4,\n    9,\n    10,\n    4,\n    10,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    11,\n    2,\n    0,\n    1,\n    6,\n    0,\n    6,\n    4,\n    6,\n    1,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    4,\n    1,\n    6,\n    1,\n    10,\n    4,\n    8,\n    1,\n    2,\n    1,\n    11,\n    8,\n    11,\n    1,\n    -1,\n    9,\n    6,\n    4,\n    9,\n    3,\n    6,\n    9,\n    1,\n    3,\n    11,\n    6,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    11,\n    1,\n    8,\n    1,\n    0,\n    11,\n    6,\n    1,\n    9,\n    1,\n    4,\n    6,\n    4,\n    1,\n    -1,\n    3,\n    11,\n    6,\n    3,\n    6,\n    0,\n    0,\n    6,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    4,\n    8,\n    11,\n    6,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    10,\n    6,\n    7,\n    8,\n    10,\n    8,\n    9,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    7,\n    3,\n    0,\n    10,\n    7,\n    0,\n    9,\n    10,\n    6,\n    7,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    6,\n    7,\n    1,\n    10,\n    7,\n    1,\n    7,\n    8,\n    1,\n    8,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    6,\n    7,\n    10,\n    7,\n    1,\n    1,\n    7,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    2,\n    6,\n    1,\n    6,\n    8,\n    1,\n    8,\n    9,\n    8,\n    6,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    6,\n    9,\n    2,\n    9,\n    1,\n    6,\n    7,\n    9,\n    0,\n    9,\n    3,\n    7,\n    3,\n    9,\n    -1,\n    7,\n    8,\n    0,\n    7,\n    0,\n    6,\n    6,\n    0,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    3,\n    2,\n    6,\n    7,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    3,\n    11,\n    10,\n    6,\n    8,\n    10,\n    8,\n    9,\n    8,\n    6,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    0,\n    7,\n    2,\n    7,\n    11,\n    0,\n    9,\n    7,\n    6,\n    7,\n    10,\n    9,\n    10,\n    7,\n    -1,\n    1,\n    8,\n    0,\n    1,\n    7,\n    8,\n    1,\n    10,\n    7,\n    6,\n    7,\n    10,\n    2,\n    3,\n    11,\n    -1,\n    11,\n    2,\n    1,\n    11,\n    1,\n    7,\n    10,\n    6,\n    1,\n    6,\n    7,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    9,\n    6,\n    8,\n    6,\n    7,\n    9,\n    1,\n    6,\n    11,\n    6,\n    3,\n    1,\n    3,\n    6,\n    -1,\n    0,\n    9,\n    1,\n    11,\n    6,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    8,\n    0,\n    7,\n    0,\n    6,\n    3,\n    11,\n    0,\n    11,\n    6,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    11,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    6,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    0,\n    8,\n    11,\n    7,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    9,\n    11,\n    7,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    1,\n    9,\n    8,\n    3,\n    1,\n    11,\n    7,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    1,\n    2,\n    6,\n    11,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    2,\n    10,\n    3,\n    0,\n    8,\n    6,\n    11,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    9,\n    0,\n    2,\n    10,\n    9,\n    6,\n    11,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    11,\n    7,\n    2,\n    10,\n    3,\n    10,\n    8,\n    3,\n    10,\n    9,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    2,\n    3,\n    6,\n    2,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    0,\n    8,\n    7,\n    6,\n    0,\n    6,\n    2,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    7,\n    6,\n    2,\n    3,\n    7,\n    0,\n    1,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    6,\n    2,\n    1,\n    8,\n    6,\n    1,\n    9,\n    8,\n    8,\n    7,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    7,\n    6,\n    10,\n    1,\n    7,\n    1,\n    3,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    7,\n    6,\n    1,\n    7,\n    10,\n    1,\n    8,\n    7,\n    1,\n    0,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    3,\n    7,\n    0,\n    7,\n    10,\n    0,\n    10,\n    9,\n    6,\n    10,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    6,\n    10,\n    7,\n    10,\n    8,\n    8,\n    10,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    8,\n    4,\n    11,\n    8,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    6,\n    11,\n    3,\n    0,\n    6,\n    0,\n    4,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    6,\n    11,\n    8,\n    4,\n    6,\n    9,\n    0,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    4,\n    6,\n    9,\n    6,\n    3,\n    9,\n    3,\n    1,\n    11,\n    3,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    8,\n    4,\n    6,\n    11,\n    8,\n    2,\n    10,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    2,\n    10,\n    3,\n    0,\n    11,\n    0,\n    6,\n    11,\n    0,\n    4,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    11,\n    8,\n    4,\n    6,\n    11,\n    0,\n    2,\n    9,\n    2,\n    10,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    9,\n    3,\n    10,\n    3,\n    2,\n    9,\n    4,\n    3,\n    11,\n    3,\n    6,\n    4,\n    6,\n    3,\n    -1,\n    8,\n    2,\n    3,\n    8,\n    4,\n    2,\n    4,\n    6,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    4,\n    2,\n    4,\n    6,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    9,\n    0,\n    2,\n    3,\n    4,\n    2,\n    4,\n    6,\n    4,\n    3,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    9,\n    4,\n    1,\n    4,\n    2,\n    2,\n    4,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    1,\n    3,\n    8,\n    6,\n    1,\n    8,\n    4,\n    6,\n    6,\n    10,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    1,\n    0,\n    10,\n    0,\n    6,\n    6,\n    0,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    6,\n    3,\n    4,\n    3,\n    8,\n    6,\n    10,\n    3,\n    0,\n    3,\n    9,\n    10,\n    9,\n    3,\n    -1,\n    10,\n    9,\n    4,\n    6,\n    10,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    9,\n    5,\n    7,\n    6,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    8,\n    3,\n    4,\n    9,\n    5,\n    11,\n    7,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    0,\n    1,\n    5,\n    4,\n    0,\n    7,\n    6,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    11,\n    7,\n    6,\n    8,\n    3,\n    4,\n    3,\n    5,\n    4,\n    3,\n    1,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    5,\n    4,\n    10,\n    1,\n    2,\n    7,\n    6,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    11,\n    7,\n    1,\n    2,\n    10,\n    0,\n    8,\n    3,\n    4,\n    9,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    6,\n    11,\n    5,\n    4,\n    10,\n    4,\n    2,\n    10,\n    4,\n    0,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    4,\n    8,\n    3,\n    5,\n    4,\n    3,\n    2,\n    5,\n    10,\n    5,\n    2,\n    11,\n    7,\n    6,\n    -1,\n    7,\n    2,\n    3,\n    7,\n    6,\n    2,\n    5,\n    4,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    5,\n    4,\n    0,\n    8,\n    6,\n    0,\n    6,\n    2,\n    6,\n    8,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    6,\n    2,\n    3,\n    7,\n    6,\n    1,\n    5,\n    0,\n    5,\n    4,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    2,\n    8,\n    6,\n    8,\n    7,\n    2,\n    1,\n    8,\n    4,\n    8,\n    5,\n    1,\n    5,\n    8,\n    -1,\n    9,\n    5,\n    4,\n    10,\n    1,\n    6,\n    1,\n    7,\n    6,\n    1,\n    3,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    6,\n    10,\n    1,\n    7,\n    6,\n    1,\n    0,\n    7,\n    8,\n    7,\n    0,\n    9,\n    5,\n    4,\n    -1,\n    4,\n    0,\n    10,\n    4,\n    10,\n    5,\n    0,\n    3,\n    10,\n    6,\n    10,\n    7,\n    3,\n    7,\n    10,\n    -1,\n    7,\n    6,\n    10,\n    7,\n    10,\n    8,\n    5,\n    4,\n    10,\n    4,\n    8,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    9,\n    5,\n    6,\n    11,\n    9,\n    11,\n    8,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    6,\n    11,\n    0,\n    6,\n    3,\n    0,\n    5,\n    6,\n    0,\n    9,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    11,\n    8,\n    0,\n    5,\n    11,\n    0,\n    1,\n    5,\n    5,\n    6,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    6,\n    11,\n    3,\n    6,\n    3,\n    5,\n    5,\n    3,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    2,\n    10,\n    9,\n    5,\n    11,\n    9,\n    11,\n    8,\n    11,\n    5,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    11,\n    3,\n    0,\n    6,\n    11,\n    0,\n    9,\n    6,\n    5,\n    6,\n    9,\n    1,\n    2,\n    10,\n    -1,\n    11,\n    8,\n    5,\n    11,\n    5,\n    6,\n    8,\n    0,\n    5,\n    10,\n    5,\n    2,\n    0,\n    2,\n    5,\n    -1,\n    6,\n    11,\n    3,\n    6,\n    3,\n    5,\n    2,\n    10,\n    3,\n    10,\n    5,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    8,\n    9,\n    5,\n    2,\n    8,\n    5,\n    6,\n    2,\n    3,\n    8,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    5,\n    6,\n    9,\n    6,\n    0,\n    0,\n    6,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    5,\n    8,\n    1,\n    8,\n    0,\n    5,\n    6,\n    8,\n    3,\n    8,\n    2,\n    6,\n    2,\n    8,\n    -1,\n    1,\n    5,\n    6,\n    2,\n    1,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    3,\n    6,\n    1,\n    6,\n    10,\n    3,\n    8,\n    6,\n    5,\n    6,\n    9,\n    8,\n    9,\n    6,\n    -1,\n    10,\n    1,\n    0,\n    10,\n    0,\n    6,\n    9,\n    5,\n    0,\n    5,\n    6,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    3,\n    8,\n    5,\n    6,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    5,\n    6,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    11,\n    5,\n    10,\n    7,\n    5,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    11,\n    5,\n    10,\n    11,\n    7,\n    5,\n    8,\n    3,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    11,\n    7,\n    5,\n    10,\n    11,\n    1,\n    9,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    7,\n    5,\n    10,\n    11,\n    7,\n    9,\n    8,\n    1,\n    8,\n    3,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    11,\n    1,\n    2,\n    11,\n    7,\n    1,\n    7,\n    5,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    8,\n    3,\n    1,\n    2,\n    7,\n    1,\n    7,\n    5,\n    7,\n    2,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    7,\n    5,\n    9,\n    2,\n    7,\n    9,\n    0,\n    2,\n    2,\n    11,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    7,\n    5,\n    2,\n    7,\n    2,\n    11,\n    5,\n    9,\n    2,\n    3,\n    2,\n    8,\n    9,\n    8,\n    2,\n    -1,\n    2,\n    5,\n    10,\n    2,\n    3,\n    5,\n    3,\n    7,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    2,\n    0,\n    8,\n    5,\n    2,\n    8,\n    7,\n    5,\n    10,\n    2,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    0,\n    1,\n    5,\n    10,\n    3,\n    5,\n    3,\n    7,\n    3,\n    10,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    8,\n    2,\n    9,\n    2,\n    1,\n    8,\n    7,\n    2,\n    10,\n    2,\n    5,\n    7,\n    5,\n    2,\n    -1,\n    1,\n    3,\n    5,\n    3,\n    7,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    8,\n    7,\n    0,\n    7,\n    1,\n    1,\n    7,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    0,\n    3,\n    9,\n    3,\n    5,\n    5,\n    3,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    8,\n    7,\n    5,\n    9,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    8,\n    4,\n    5,\n    10,\n    8,\n    10,\n    11,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    0,\n    4,\n    5,\n    11,\n    0,\n    5,\n    10,\n    11,\n    11,\n    3,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    9,\n    8,\n    4,\n    10,\n    8,\n    10,\n    11,\n    10,\n    4,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    10,\n    11,\n    4,\n    10,\n    4,\n    5,\n    11,\n    3,\n    4,\n    9,\n    4,\n    1,\n    3,\n    1,\n    4,\n    -1,\n    2,\n    5,\n    1,\n    2,\n    8,\n    5,\n    2,\n    11,\n    8,\n    4,\n    5,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    4,\n    11,\n    0,\n    11,\n    3,\n    4,\n    5,\n    11,\n    2,\n    11,\n    1,\n    5,\n    1,\n    11,\n    -1,\n    0,\n    2,\n    5,\n    0,\n    5,\n    9,\n    2,\n    11,\n    5,\n    4,\n    5,\n    8,\n    11,\n    8,\n    5,\n    -1,\n    9,\n    4,\n    5,\n    2,\n    11,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    5,\n    10,\n    3,\n    5,\n    2,\n    3,\n    4,\n    5,\n    3,\n    8,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    5,\n    10,\n    2,\n    5,\n    2,\n    4,\n    4,\n    2,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    10,\n    2,\n    3,\n    5,\n    10,\n    3,\n    8,\n    5,\n    4,\n    5,\n    8,\n    0,\n    1,\n    9,\n    -1,\n    5,\n    10,\n    2,\n    5,\n    2,\n    4,\n    1,\n    9,\n    2,\n    9,\n    4,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    4,\n    5,\n    8,\n    5,\n    3,\n    3,\n    5,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    4,\n    5,\n    1,\n    0,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    8,\n    4,\n    5,\n    8,\n    5,\n    3,\n    9,\n    0,\n    5,\n    0,\n    3,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    4,\n    5,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    11,\n    7,\n    4,\n    9,\n    11,\n    9,\n    10,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    8,\n    3,\n    4,\n    9,\n    7,\n    9,\n    11,\n    7,\n    9,\n    10,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    10,\n    11,\n    1,\n    11,\n    4,\n    1,\n    4,\n    0,\n    7,\n    4,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    1,\n    4,\n    3,\n    4,\n    8,\n    1,\n    10,\n    4,\n    7,\n    4,\n    11,\n    10,\n    11,\n    4,\n    -1,\n    4,\n    11,\n    7,\n    9,\n    11,\n    4,\n    9,\n    2,\n    11,\n    9,\n    1,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    7,\n    4,\n    9,\n    11,\n    7,\n    9,\n    1,\n    11,\n    2,\n    11,\n    1,\n    0,\n    8,\n    3,\n    -1,\n    11,\n    7,\n    4,\n    11,\n    4,\n    2,\n    2,\n    4,\n    0,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    11,\n    7,\n    4,\n    11,\n    4,\n    2,\n    8,\n    3,\n    4,\n    3,\n    2,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    9,\n    10,\n    2,\n    7,\n    9,\n    2,\n    3,\n    7,\n    7,\n    4,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    10,\n    7,\n    9,\n    7,\n    4,\n    10,\n    2,\n    7,\n    8,\n    7,\n    0,\n    2,\n    0,\n    7,\n    -1,\n    3,\n    7,\n    10,\n    3,\n    10,\n    2,\n    7,\n    4,\n    10,\n    1,\n    10,\n    0,\n    4,\n    0,\n    10,\n    -1,\n    1,\n    10,\n    2,\n    8,\n    7,\n    4,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    9,\n    1,\n    4,\n    1,\n    7,\n    7,\n    1,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    9,\n    1,\n    4,\n    1,\n    7,\n    0,\n    8,\n    1,\n    8,\n    7,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    0,\n    3,\n    7,\n    4,\n    3,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    4,\n    8,\n    7,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    10,\n    8,\n    10,\n    11,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    0,\n    9,\n    3,\n    9,\n    11,\n    11,\n    9,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    1,\n    10,\n    0,\n    10,\n    8,\n    8,\n    10,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    1,\n    10,\n    11,\n    3,\n    10,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    2,\n    11,\n    1,\n    11,\n    9,\n    9,\n    11,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    0,\n    9,\n    3,\n    9,\n    11,\n    1,\n    2,\n    9,\n    2,\n    11,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    2,\n    11,\n    8,\n    0,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    3,\n    2,\n    11,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    3,\n    8,\n    2,\n    8,\n    10,\n    10,\n    8,\n    9,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    9,\n    10,\n    2,\n    0,\n    9,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    2,\n    3,\n    8,\n    2,\n    8,\n    10,\n    0,\n    1,\n    8,\n    1,\n    10,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    10,\n    2,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    1,\n    3,\n    8,\n    9,\n    1,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    9,\n    1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    0,\n    3,\n    8,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1,\n    -1\n]);\n\n\nvar $7f9986d0b71cf3d1$exports = {};\n/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */ (function() {\n    \"use strict\";\n    var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n    var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n    var F3 = 1.0 / 3.0;\n    var G3 = 1.0 / 6.0;\n    var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n    var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n    function SimplexNoise(randomOrSeed) {\n        var random;\n        if (typeof randomOrSeed == \"function\") random = randomOrSeed;\n        else if (randomOrSeed) random = alea(randomOrSeed);\n        else random = Math.random;\n        this.p = buildPermutationTable(random);\n        this.perm = new Uint8Array(512);\n        this.permMod12 = new Uint8Array(512);\n        for(var i = 0; i < 512; i++){\n            this.perm[i] = this.p[i & 255];\n            this.permMod12[i] = this.perm[i] % 12;\n        }\n    }\n    SimplexNoise.prototype = {\n        grad3: new Float32Array([\n            1,\n            1,\n            0,\n            -1,\n            1,\n            0,\n            1,\n            -1,\n            0,\n            -1,\n            -1,\n            0,\n            1,\n            0,\n            1,\n            -1,\n            0,\n            1,\n            1,\n            0,\n            -1,\n            -1,\n            0,\n            -1,\n            0,\n            1,\n            1,\n            0,\n            -1,\n            1,\n            0,\n            1,\n            -1,\n            0,\n            -1,\n            -1\n        ]),\n        grad4: new Float32Array([\n            0,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            -1,\n            0,\n            1,\n            -1,\n            1,\n            0,\n            1,\n            -1,\n            -1,\n            0,\n            -1,\n            1,\n            1,\n            0,\n            -1,\n            1,\n            -1,\n            0,\n            -1,\n            -1,\n            1,\n            0,\n            -1,\n            -1,\n            -1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            0,\n            1,\n            -1,\n            1,\n            0,\n            -1,\n            1,\n            1,\n            0,\n            -1,\n            -1,\n            -1,\n            0,\n            1,\n            1,\n            -1,\n            0,\n            1,\n            -1,\n            -1,\n            0,\n            -1,\n            1,\n            -1,\n            0,\n            -1,\n            -1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            1,\n            0,\n            -1,\n            1,\n            -1,\n            0,\n            1,\n            1,\n            -1,\n            0,\n            -1,\n            -1,\n            1,\n            0,\n            1,\n            -1,\n            1,\n            0,\n            -1,\n            -1,\n            -1,\n            0,\n            1,\n            -1,\n            -1,\n            0,\n            -1,\n            1,\n            1,\n            1,\n            0,\n            1,\n            1,\n            -1,\n            0,\n            1,\n            -1,\n            1,\n            0,\n            1,\n            -1,\n            -1,\n            0,\n            -1,\n            1,\n            1,\n            0,\n            -1,\n            1,\n            -1,\n            0,\n            -1,\n            -1,\n            1,\n            0,\n            -1,\n            -1,\n            -1,\n            0\n        ]),\n        noise2D: function(xin, yin) {\n            var permMod12 = this.permMod12;\n            var perm = this.perm;\n            var grad3 = this.grad3;\n            var n0 = 0; // Noise contributions from the three corners\n            var n1 = 0;\n            var n2 = 0;\n            // Skew the input space to determine which simplex cell we're in\n            var s = (xin + yin) * F2; // Hairy factor for 2D\n            var i = Math.floor(xin + s);\n            var j = Math.floor(yin + s);\n            var t = (i + j) * G2;\n            var X0 = i - t; // Unskew the cell origin back to (x,y) space\n            var Y0 = j - t;\n            var x0 = xin - X0; // The x,y distances from the cell origin\n            var y0 = yin - Y0;\n            // For the 2D case, the simplex shape is an equilateral triangle.\n            // Determine which simplex we are in.\n            var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n            if (x0 > y0) {\n                i1 = 1;\n                j1 = 0;\n            } else {\n                i1 = 0;\n                j1 = 1;\n            } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n            // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n            // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n            // c = (3-sqrt(3))/6\n            var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n            var y1 = y0 - j1 + G2;\n            var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n            var y2 = y0 - 1.0 + 2.0 * G2;\n            // Work out the hashed gradient indices of the three simplex corners\n            var ii = i & 255;\n            var jj = j & 255;\n            // Calculate the contribution from the three corners\n            var t0 = 0.5 - x0 * x0 - y0 * y0;\n            if (t0 >= 0) {\n                var gi0 = permMod12[ii + perm[jj]] * 3;\n                t0 *= t0;\n                n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n            }\n            var t1 = 0.5 - x1 * x1 - y1 * y1;\n            if (t1 >= 0) {\n                var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n                t1 *= t1;\n                n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n            }\n            var t2 = 0.5 - x2 * x2 - y2 * y2;\n            if (t2 >= 0) {\n                var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n                t2 *= t2;\n                n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n            }\n            // Add contributions from each corner to get the final noise value.\n            // The result is scaled to return values in the interval [-1,1].\n            return 70.0 * (n0 + n1 + n2);\n        },\n        // 3D simplex noise\n        noise3D: function(xin, yin, zin) {\n            var permMod12 = this.permMod12;\n            var perm = this.perm;\n            var grad3 = this.grad3;\n            var n0, n1, n2, n3; // Noise contributions from the four corners\n            // Skew the input space to determine which simplex cell we're in\n            var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n            var i = Math.floor(xin + s);\n            var j = Math.floor(yin + s);\n            var k = Math.floor(zin + s);\n            var t = (i + j + k) * G3;\n            var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n            var Y0 = j - t;\n            var Z0 = k - t;\n            var x0 = xin - X0; // The x,y,z distances from the cell origin\n            var y0 = yin - Y0;\n            var z0 = zin - Z0;\n            // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n            // Determine which simplex we are in.\n            var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n            var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n            if (x0 >= y0) {\n                if (y0 >= z0) {\n                    i1 = 1;\n                    j1 = 0;\n                    k1 = 0;\n                    i2 = 1;\n                    j2 = 1;\n                    k2 = 0;\n                } else if (x0 >= z0) {\n                    i1 = 1;\n                    j1 = 0;\n                    k1 = 0;\n                    i2 = 1;\n                    j2 = 0;\n                    k2 = 1;\n                } else {\n                    i1 = 0;\n                    j1 = 0;\n                    k1 = 1;\n                    i2 = 1;\n                    j2 = 0;\n                    k2 = 1;\n                } // Z X Y order\n            } else {\n                if (y0 < z0) {\n                    i1 = 0;\n                    j1 = 0;\n                    k1 = 1;\n                    i2 = 0;\n                    j2 = 1;\n                    k2 = 1;\n                } else if (x0 < z0) {\n                    i1 = 0;\n                    j1 = 1;\n                    k1 = 0;\n                    i2 = 0;\n                    j2 = 1;\n                    k2 = 1;\n                } else {\n                    i1 = 0;\n                    j1 = 1;\n                    k1 = 0;\n                    i2 = 1;\n                    j2 = 1;\n                    k2 = 0;\n                } // Y X Z order\n            }\n            // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n            // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n            // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n            // c = 1/6.\n            var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n            var y1 = y0 - j1 + G3;\n            var z1 = z0 - k1 + G3;\n            var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n            var y2 = y0 - j2 + 2.0 * G3;\n            var z2 = z0 - k2 + 2.0 * G3;\n            var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n            var y3 = y0 - 1.0 + 3.0 * G3;\n            var z3 = z0 - 1.0 + 3.0 * G3;\n            // Work out the hashed gradient indices of the four simplex corners\n            var ii = i & 255;\n            var jj = j & 255;\n            var kk = k & 255;\n            // Calculate the contribution from the four corners\n            var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n            if (t0 < 0) n0 = 0.0;\n            else {\n                var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n                t0 *= t0;\n                n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n            }\n            var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n            if (t1 < 0) n1 = 0.0;\n            else {\n                var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n                t1 *= t1;\n                n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n            }\n            var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n            if (t2 < 0) n2 = 0.0;\n            else {\n                var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n                t2 *= t2;\n                n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n            }\n            var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n            if (t3 < 0) n3 = 0.0;\n            else {\n                var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n                t3 *= t3;\n                n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n            }\n            // Add contributions from each corner to get the final noise value.\n            // The result is scaled to stay just inside [-1,1]\n            return 32.0 * (n0 + n1 + n2 + n3);\n        },\n        // 4D simplex noise, better simplex rank ordering method 2012-03-09\n        noise4D: function(x, y, z, w) {\n            var perm = this.perm;\n            var grad4 = this.grad4;\n            var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n            // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n            var s = (x + y + z + w) * F4; // Factor for 4D skewing\n            var i = Math.floor(x + s);\n            var j = Math.floor(y + s);\n            var k = Math.floor(z + s);\n            var l = Math.floor(w + s);\n            var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n            var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n            var Y0 = j - t;\n            var Z0 = k - t;\n            var W0 = l - t;\n            var x0 = x - X0; // The x,y,z,w distances from the cell origin\n            var y0 = y - Y0;\n            var z0 = z - Z0;\n            var w0 = w - W0;\n            // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n            // To find out which of the 24 possible simplices we're in, we need to\n            // determine the magnitude ordering of x0, y0, z0 and w0.\n            // Six pair-wise comparisons are performed between each possible pair\n            // of the four coordinates, and the results are used to rank the numbers.\n            var rankx = 0;\n            var ranky = 0;\n            var rankz = 0;\n            var rankw = 0;\n            if (x0 > y0) rankx++;\n            else ranky++;\n            if (x0 > z0) rankx++;\n            else rankz++;\n            if (x0 > w0) rankx++;\n            else rankw++;\n            if (y0 > z0) ranky++;\n            else rankz++;\n            if (y0 > w0) ranky++;\n            else rankw++;\n            if (z0 > w0) rankz++;\n            else rankw++;\n            var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n            var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n            var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n            // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n            // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n            // impossible. Only the 24 indices which have non-zero entries make any sense.\n            // We use a thresholding to set the coordinates in turn from the largest magnitude.\n            // Rank 3 denotes the largest coordinate.\n            i1 = rankx >= 3 ? 1 : 0;\n            j1 = ranky >= 3 ? 1 : 0;\n            k1 = rankz >= 3 ? 1 : 0;\n            l1 = rankw >= 3 ? 1 : 0;\n            // Rank 2 denotes the second largest coordinate.\n            i2 = rankx >= 2 ? 1 : 0;\n            j2 = ranky >= 2 ? 1 : 0;\n            k2 = rankz >= 2 ? 1 : 0;\n            l2 = rankw >= 2 ? 1 : 0;\n            // Rank 1 denotes the second smallest coordinate.\n            i3 = rankx >= 1 ? 1 : 0;\n            j3 = ranky >= 1 ? 1 : 0;\n            k3 = rankz >= 1 ? 1 : 0;\n            l3 = rankw >= 1 ? 1 : 0;\n            // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n            var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n            var y1 = y0 - j1 + G4;\n            var z1 = z0 - k1 + G4;\n            var w1 = w0 - l1 + G4;\n            var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n            var y2 = y0 - j2 + 2.0 * G4;\n            var z2 = z0 - k2 + 2.0 * G4;\n            var w2 = w0 - l2 + 2.0 * G4;\n            var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n            var y3 = y0 - j3 + 3.0 * G4;\n            var z3 = z0 - k3 + 3.0 * G4;\n            var w3 = w0 - l3 + 3.0 * G4;\n            var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n            var y4 = y0 - 1.0 + 4.0 * G4;\n            var z4 = z0 - 1.0 + 4.0 * G4;\n            var w4 = w0 - 1.0 + 4.0 * G4;\n            // Work out the hashed gradient indices of the five simplex corners\n            var ii = i & 255;\n            var jj = j & 255;\n            var kk = k & 255;\n            var ll = l & 255;\n            // Calculate the contribution from the five corners\n            var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n            if (t0 < 0) n0 = 0.0;\n            else {\n                var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32 * 4;\n                t0 *= t0;\n                n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n            }\n            var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n            if (t1 < 0) n1 = 0.0;\n            else {\n                var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32 * 4;\n                t1 *= t1;\n                n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n            }\n            var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n            if (t2 < 0) n2 = 0.0;\n            else {\n                var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32 * 4;\n                t2 *= t2;\n                n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n            }\n            var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n            if (t3 < 0) n3 = 0.0;\n            else {\n                var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32 * 4;\n                t3 *= t3;\n                n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n            }\n            var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n            if (t4 < 0) n4 = 0.0;\n            else {\n                var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32 * 4;\n                t4 *= t4;\n                n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n            }\n            // Sum up and scale the result to cover the range [-1,1]\n            return 27.0 * (n0 + n1 + n2 + n3 + n4);\n        }\n    };\n    function buildPermutationTable(random) {\n        var i;\n        var p = new Uint8Array(256);\n        for(i = 0; i < 256; i++)p[i] = i;\n        for(i = 0; i < 255; i++){\n            var r = i + ~~(random() * (256 - i));\n            var aux = p[i];\n            p[i] = p[r];\n            p[r] = aux;\n        }\n        return p;\n    }\n    SimplexNoise._buildPermutationTable = buildPermutationTable;\n    function alea() {\n        // Johannes Baagøe <baagoe@baagoe.com>, 2010\n        var s0 = 0;\n        var s1 = 0;\n        var s2 = 0;\n        var c = 1;\n        var mash = masher();\n        s0 = mash(\" \");\n        s1 = mash(\" \");\n        s2 = mash(\" \");\n        for(var i = 0; i < arguments.length; i++){\n            s0 -= mash(arguments[i]);\n            if (s0 < 0) s0 += 1;\n            s1 -= mash(arguments[i]);\n            if (s1 < 0) s1 += 1;\n            s2 -= mash(arguments[i]);\n            if (s2 < 0) s2 += 1;\n        }\n        mash = null;\n        return function() {\n            var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n            s0 = s1;\n            s1 = s2;\n            return s2 = t - (c = t | 0);\n        };\n    }\n    function masher() {\n        var n = 0xefc8249d;\n        return function(data) {\n            data = data.toString();\n            for(var i = 0; i < data.length; i++){\n                n += data.charCodeAt(i);\n                var h = 0.02519603282416938 * n;\n                n = h >>> 0;\n                h -= n;\n                h *= n;\n                n = h >>> 0;\n                h -= n;\n                n += h * 0x100000000; // 2^32\n            }\n            return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n        };\n    }\n    // amd\n    if (typeof define !== \"undefined\" && define.amd) define(function() {\n        return SimplexNoise;\n    });\n    $7f9986d0b71cf3d1$exports.SimplexNoise = SimplexNoise;\n    $7f9986d0b71cf3d1$exports = SimplexNoise;\n})();\n\n\n\nvar $4h5hN = parcelRequire(\"4h5hN\");\nvar $5ca9G = parcelRequire(\"5ca9G\");\n$ilwiq.Mesh.prototype.raycast = (0, $4h5hN.acceleratedRaycast);\n$ilwiq.BufferGeometry.prototype.computeBoundsTree = (0, $4h5hN.computeBoundsTree);\n$ilwiq.BufferGeometry.prototype.disposeBoundsTree = (0, $4h5hN.disposeBoundsTree);\nconst $0c9a3c24fe6f8491$var$params = {\n    visualizeBounds: false,\n    visualBoundsDepth: 10,\n    volume: {\n        display: 1,\n        hideWhileGenerating: false,\n        alwaysShowDistance: true,\n        surfaceOnly: false,\n        distance: 1,\n        resolution: 100,\n        radius: 4\n    },\n    displayClosestPoint: true\n};\nlet $0c9a3c24fe6f8491$var$stats;\nlet $0c9a3c24fe6f8491$var$scene, $0c9a3c24fe6f8491$var$camera, $0c9a3c24fe6f8491$var$renderer, $0c9a3c24fe6f8491$var$controls, $0c9a3c24fe6f8491$var$boundsViz;\nlet $0c9a3c24fe6f8491$var$terrain, $0c9a3c24fe6f8491$var$targetContainer, $0c9a3c24fe6f8491$var$targetMesh, $0c9a3c24fe6f8491$var$transformControls;\nlet $0c9a3c24fe6f8491$var$marchingCubes, $0c9a3c24fe6f8491$var$marchingCubesContainer;\nlet $0c9a3c24fe6f8491$var$sphere1, $0c9a3c24fe6f8491$var$sphere2, $0c9a3c24fe6f8491$var$line;\nlet $0c9a3c24fe6f8491$var$needsUpdate = false;\nfunction $0c9a3c24fe6f8491$var$init() {\n    const bgColor = 1251612;\n    // renderer setup\n    $0c9a3c24fe6f8491$var$renderer = new $ilwiq.WebGLRenderer({\n        antialias: true\n    });\n    $0c9a3c24fe6f8491$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $0c9a3c24fe6f8491$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $0c9a3c24fe6f8491$var$renderer.setClearColor(bgColor, 1);\n    $0c9a3c24fe6f8491$var$renderer.shadowMap.enabled = true;\n    $0c9a3c24fe6f8491$var$renderer.shadowMap.type = $ilwiq.PCFSoftShadowMap;\n    document.body.appendChild($0c9a3c24fe6f8491$var$renderer.domElement);\n    // scene setup\n    $0c9a3c24fe6f8491$var$scene = new $ilwiq.Scene();\n    $0c9a3c24fe6f8491$var$scene.fog = new $ilwiq.Fog(1251612, 10, 45);\n    const light = new $ilwiq.DirectionalLight(0xffffff, 0.5);\n    light.position.set(20, 20, 20);\n    light.castShadow = true;\n    light.shadow.mapSize.set(2048, 2048);\n    const shadowCam = light.shadow.camera;\n    shadowCam.left = shadowCam.bottom = -15;\n    shadowCam.right = shadowCam.top = 15;\n    shadowCam.updateProjectionMatrix();\n    $0c9a3c24fe6f8491$var$scene.add(light);\n    $0c9a3c24fe6f8491$var$scene.add(new $ilwiq.AmbientLight(0xE0F7FA, 0.5));\n    // geometry setup\n    const size = 50;\n    const dim = 250;\n    const planeGeom = new $ilwiq.PlaneBufferGeometry(size, size, dim - 1, dim - 1);\n    const posAttr = planeGeom.attributes.position;\n    const seed = Math.floor(Math.random() * 100);\n    const noise = new (0, (/*@__PURE__*/$parcel$interopDefault($7f9986d0b71cf3d1$exports)))(seed);\n    for(let i = 0; i < dim * dim; i++){\n        const x = posAttr.getX(i) / 15;\n        const y = posAttr.getY(i) / 15;\n        posAttr.setZ(i, noise.noise2D(x, y) * 3);\n    }\n    planeGeom.computeVertexNormals();\n    planeGeom.computeBoundsTree();\n    $0c9a3c24fe6f8491$var$terrain = new $ilwiq.Mesh(planeGeom, new $ilwiq.MeshStandardMaterial({\n        color: 0xFFFFFF,\n        metalness: 0.1,\n        roughness: 0.9,\n        side: $ilwiq.DoubleSide\n    }));\n    $0c9a3c24fe6f8491$var$terrain.rotation.x = -Math.PI / 2;\n    $0c9a3c24fe6f8491$var$terrain.position.y = -3;\n    $0c9a3c24fe6f8491$var$terrain.receiveShadow = true;\n    $0c9a3c24fe6f8491$var$scene.add($0c9a3c24fe6f8491$var$terrain);\n    // camera setup\n    $0c9a3c24fe6f8491$var$camera = new $ilwiq.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);\n    $0c9a3c24fe6f8491$var$camera.position.z = 5;\n    $0c9a3c24fe6f8491$var$camera.far = 100;\n    $0c9a3c24fe6f8491$var$camera.updateProjectionMatrix();\n    // stats setup\n    $0c9a3c24fe6f8491$var$stats = new (0, $hBOJ2.default)();\n    document.body.appendChild($0c9a3c24fe6f8491$var$stats.dom);\n    const shapeMaterial = new $ilwiq.MeshStandardMaterial({\n        roughness: 0.75,\n        metalness: 0.1\n    });\n    $0c9a3c24fe6f8491$var$targetContainer = new $ilwiq.Group();\n    $0c9a3c24fe6f8491$var$scene.add($0c9a3c24fe6f8491$var$targetContainer);\n    $0c9a3c24fe6f8491$var$targetMesh = new $ilwiq.Mesh(new $ilwiq.CylinderBufferGeometry(0.5, 0.25, 1, 20, 1), shapeMaterial);\n    $0c9a3c24fe6f8491$var$targetMesh.castShadow = true;\n    $0c9a3c24fe6f8491$var$targetMesh.receiveShadow = true;\n    $0c9a3c24fe6f8491$var$targetMesh.geometry.computeBoundsTree();\n    $0c9a3c24fe6f8491$var$targetMesh.geometry.computeBoundingSphere();\n    $0c9a3c24fe6f8491$var$targetContainer.add($0c9a3c24fe6f8491$var$targetMesh);\n    $0c9a3c24fe6f8491$var$controls = new (0, $5Rd1x.OrbitControls)($0c9a3c24fe6f8491$var$camera, $0c9a3c24fe6f8491$var$renderer.domElement);\n    $0c9a3c24fe6f8491$var$transformControls = new (0, $fUhpq.TransformControls)($0c9a3c24fe6f8491$var$camera, $0c9a3c24fe6f8491$var$renderer.domElement);\n    $0c9a3c24fe6f8491$var$transformControls.attach($0c9a3c24fe6f8491$var$targetContainer);\n    $0c9a3c24fe6f8491$var$transformControls.addEventListener(\"dragging-changed\", (e)=>{\n        $0c9a3c24fe6f8491$var$controls.enabled = !e.value;\n        if (!e.value) $0c9a3c24fe6f8491$var$needsUpdate = true;\n    });\n    $0c9a3c24fe6f8491$var$transformControls.addEventListener(\"objectChange\", (e)=>{\n        $0c9a3c24fe6f8491$var$needsUpdate = true;\n    });\n    $0c9a3c24fe6f8491$var$scene.add($0c9a3c24fe6f8491$var$transformControls);\n    const cubeMat = new $ilwiq.MeshStandardMaterial({\n        flatShading: true,\n        color: 0xE91E63,\n        metalness: 0.0,\n        roughness: 0.35,\n        transparent: true,\n        depthWrite: false,\n        opacity: 0.15,\n        premultipliedAlpha: true,\n        side: $ilwiq.DoubleSide\n    });\n    $0c9a3c24fe6f8491$var$marchingCubes = new (0, $bfb18d85c853c85d$export$14387c46dff8604b)(100, cubeMat, false, false, 1000000);\n    $0c9a3c24fe6f8491$var$marchingCubes.isolation = 0;\n    $0c9a3c24fe6f8491$var$marchingCubes.autoUpdate = false;\n    $0c9a3c24fe6f8491$var$marchingCubesContainer = new $ilwiq.Group();\n    $0c9a3c24fe6f8491$var$marchingCubesContainer.scale.multiplyScalar(5);\n    $0c9a3c24fe6f8491$var$marchingCubesContainer.add($0c9a3c24fe6f8491$var$marchingCubes);\n    $0c9a3c24fe6f8491$var$scene.add($0c9a3c24fe6f8491$var$marchingCubesContainer);\n    $0c9a3c24fe6f8491$var$sphere1 = new $ilwiq.Mesh(new $ilwiq.SphereGeometry(0.025, 20, 20), new $ilwiq.MeshBasicMaterial({\n        color: 0xE91E63\n    }));\n    $0c9a3c24fe6f8491$var$sphere1.castShadow = true;\n    $0c9a3c24fe6f8491$var$scene.add($0c9a3c24fe6f8491$var$sphere1);\n    $0c9a3c24fe6f8491$var$sphere2 = $0c9a3c24fe6f8491$var$sphere1.clone();\n    $0c9a3c24fe6f8491$var$sphere2.castShadow = true;\n    $0c9a3c24fe6f8491$var$scene.add($0c9a3c24fe6f8491$var$sphere2);\n    const lineCube = new $ilwiq.Mesh(new $ilwiq.BoxGeometry(), $0c9a3c24fe6f8491$var$sphere1.material);\n    lineCube.castShadow = true;\n    lineCube.position.z = 0.5;\n    $0c9a3c24fe6f8491$var$line = new $ilwiq.Object3D();\n    $0c9a3c24fe6f8491$var$line.add(lineCube);\n    $0c9a3c24fe6f8491$var$scene.add($0c9a3c24fe6f8491$var$line);\n    $0c9a3c24fe6f8491$var$scene.updateMatrixWorld(true);\n    const gui = new $jiuw3.GUI({\n        width: 300\n    });\n    gui.add($0c9a3c24fe6f8491$var$params, \"visualizeBounds\").onChange(()=>$0c9a3c24fe6f8491$var$updateFromOptions());\n    gui.add($0c9a3c24fe6f8491$var$params, \"visualBoundsDepth\").min(1).max(40).step(1).onChange(()=>$0c9a3c24fe6f8491$var$updateFromOptions());\n    const mcFolder = gui.addFolder(\"distanceVisualization\");\n    mcFolder.add($0c9a3c24fe6f8491$var$params.volume, \"display\", {\n        \"hide\": 0,\n        \"distance to terrain\": 1,\n        \"distance to mesh\": 2\n    }).onChange(()=>{\n        $0c9a3c24fe6f8491$var$regenerate = true;\n    });\n    mcFolder.add($0c9a3c24fe6f8491$var$params.volume, \"hideWhileGenerating\");\n    mcFolder.add($0c9a3c24fe6f8491$var$params.volume, \"alwaysShowDistance\");\n    mcFolder.add($0c9a3c24fe6f8491$var$params.volume, \"surfaceOnly\").onChange(()=>$0c9a3c24fe6f8491$var$regenerate = true);\n    mcFolder.add($0c9a3c24fe6f8491$var$params.volume, \"distance\").min(0).max(2).step(0.01).onChange(()=>$0c9a3c24fe6f8491$var$regenerate = true);\n    mcFolder.add($0c9a3c24fe6f8491$var$params.volume, \"radius\").min(1).max(20).onChange(()=>$0c9a3c24fe6f8491$var$regenerate = true);\n    mcFolder.add($0c9a3c24fe6f8491$var$params.volume, \"resolution\", 5, 200, 1).onChange(()=>$0c9a3c24fe6f8491$var$regenerate = true);\n    mcFolder.open();\n    gui.add($0c9a3c24fe6f8491$var$transformControls, \"mode\", [\n        \"translate\",\n        \"rotate\"\n    ]);\n    const posFolder = gui.addFolder(\"position\");\n    posFolder.add($0c9a3c24fe6f8491$var$targetContainer.position, \"x\").min(-5).max(5).step(0.001).listen();\n    posFolder.add($0c9a3c24fe6f8491$var$targetContainer.position, \"y\").min(-5).max(5).step(0.001).listen();\n    posFolder.add($0c9a3c24fe6f8491$var$targetContainer.position, \"z\").min(-5).max(5).step(0.001).listen();\n    const rotFolder = gui.addFolder(\"rotation\");\n    rotFolder.add($0c9a3c24fe6f8491$var$targetContainer.rotation, \"x\").min(-Math.PI).max(Math.PI).step(0.001).listen();\n    rotFolder.add($0c9a3c24fe6f8491$var$targetContainer.rotation, \"y\").min(-Math.PI).max(Math.PI).step(0.001).listen();\n    rotFolder.add($0c9a3c24fe6f8491$var$targetContainer.rotation, \"z\").min(-Math.PI).max(Math.PI).step(0.001).listen();\n    gui.open();\n    $0c9a3c24fe6f8491$var$updateDistanceCheck();\n    window.addEventListener(\"resize\", function() {\n        $0c9a3c24fe6f8491$var$camera.aspect = window.innerWidth / window.innerHeight;\n        $0c9a3c24fe6f8491$var$camera.updateProjectionMatrix();\n        $0c9a3c24fe6f8491$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    }, false);\n    window.addEventListener(\"keydown\", function(e) {\n        switch(e.key){\n            case \"w\":\n                $0c9a3c24fe6f8491$var$transformControls.mode = \"translate\";\n                break;\n            case \"e\":\n                $0c9a3c24fe6f8491$var$transformControls.mode = \"rotate\";\n                break;\n        }\n        gui.controllersRecursive().forEach((c)=>c.updateDisplay());\n    });\n}\nfunction $0c9a3c24fe6f8491$var$updateFromOptions() {\n    // Update bounds viz\n    if ($0c9a3c24fe6f8491$var$boundsViz && !$0c9a3c24fe6f8491$var$params.visualizeBounds) {\n        $0c9a3c24fe6f8491$var$scene.remove($0c9a3c24fe6f8491$var$boundsViz);\n        $0c9a3c24fe6f8491$var$boundsViz = null;\n    }\n    if (!$0c9a3c24fe6f8491$var$boundsViz && $0c9a3c24fe6f8491$var$params.visualizeBounds) {\n        $0c9a3c24fe6f8491$var$boundsViz = new (0, $5ca9G.MeshBVHHelper)($0c9a3c24fe6f8491$var$terrain);\n        $0c9a3c24fe6f8491$var$scene.add($0c9a3c24fe6f8491$var$boundsViz);\n    }\n    if ($0c9a3c24fe6f8491$var$boundsViz) $0c9a3c24fe6f8491$var$boundsViz.depth = $0c9a3c24fe6f8491$var$params.visualBoundsDepth;\n}\nfunction $0c9a3c24fe6f8491$var$updateDistanceCheck(fastCheck) {\n    $0c9a3c24fe6f8491$var$targetContainer.updateMatrixWorld();\n    const targetToBvh = new $ilwiq.Matrix4().copy($0c9a3c24fe6f8491$var$terrain.matrixWorld).invert().multiply($0c9a3c24fe6f8491$var$targetContainer.matrixWorld);\n    // get the closest point\n    const volumeDistance = $0c9a3c24fe6f8491$var$params.volume.distance;\n    const maxDistance = volumeDistance;\n    const minDistance = fastCheck ? volumeDistance : 0;\n    const distanceResult1 = {};\n    const distanceResult2 = {};\n    const foundPoint = !!$0c9a3c24fe6f8491$var$terrain.geometry.boundsTree.closestPointToGeometry($0c9a3c24fe6f8491$var$targetMesh.geometry, targetToBvh, distanceResult1, distanceResult2, minDistance, maxDistance);\n    const hit = foundPoint && distanceResult1.distance < volumeDistance;\n    if (hit) {\n        // the resulting points are provided in the local frame of the the geometries\n        $0c9a3c24fe6f8491$var$sphere1.position.copy(distanceResult1.point);\n        $0c9a3c24fe6f8491$var$sphere2.position.copy(distanceResult2.point).applyMatrix4(targetToBvh);\n        // update the line indicating closest point\n        $0c9a3c24fe6f8491$var$sphere1.position.applyMatrix4($0c9a3c24fe6f8491$var$terrain.matrixWorld);\n        $0c9a3c24fe6f8491$var$sphere2.position.applyMatrix4($0c9a3c24fe6f8491$var$terrain.matrixWorld);\n        $0c9a3c24fe6f8491$var$line.position.copy($0c9a3c24fe6f8491$var$sphere1.position);\n        $0c9a3c24fe6f8491$var$line.lookAt($0c9a3c24fe6f8491$var$sphere2.position);\n        $0c9a3c24fe6f8491$var$line.scale.set(0.01, 0.01, $0c9a3c24fe6f8491$var$sphere1.position.distanceTo($0c9a3c24fe6f8491$var$sphere2.position));\n    }\n    $0c9a3c24fe6f8491$var$targetMesh.material.color.set(hit ? 0xE91E63 : 0x666666);\n    $0c9a3c24fe6f8491$var$targetMesh.material.emissive.set(0xE91E63).multiplyScalar(hit ? 0.25 : 0);\n    const areVisible = hit && !fastCheck;\n    $0c9a3c24fe6f8491$var$line.visible = areVisible;\n    $0c9a3c24fe6f8491$var$sphere1.visible = areVisible;\n    $0c9a3c24fe6f8491$var$sphere2.visible = areVisible;\n}\nfunction* $0c9a3c24fe6f8491$var$updateMarchingCubes() {\n    if ($0c9a3c24fe6f8491$var$params.volume.display == 0) return;\n    $0c9a3c24fe6f8491$var$updateDistanceCheck();\n    const isDistanceToTarget = $0c9a3c24fe6f8491$var$params.volume.display == 2;\n    const pos = new $ilwiq.Vector3();\n    const surfaceOnly = $0c9a3c24fe6f8491$var$params.volume.surfaceOnly;\n    const resolution = $0c9a3c24fe6f8491$var$params.volume.resolution;\n    const distance = $0c9a3c24fe6f8491$var$params.volume.distance;\n    const radius = $0c9a3c24fe6f8491$var$params.volume.radius;\n    let fieldSize;\n    let worldToBvh;\n    let distanceMesh;\n    if (isDistanceToTarget) {\n        $0c9a3c24fe6f8491$var$targetContainer.add($0c9a3c24fe6f8491$var$marchingCubesContainer);\n        worldToBvh = new $ilwiq.Matrix4().identity();\n        fieldSize = ($0c9a3c24fe6f8491$var$targetMesh.geometry.boundingSphere.radius + distance) * 2;\n        distanceMesh = $0c9a3c24fe6f8491$var$targetMesh;\n    } else {\n        $0c9a3c24fe6f8491$var$scene.add($0c9a3c24fe6f8491$var$marchingCubesContainer);\n        fieldSize = (radius + 4 * radius / resolution) * 2;\n        worldToBvh = new $ilwiq.Matrix4().copy($0c9a3c24fe6f8491$var$terrain.matrixWorld).invert();\n        distanceMesh = $0c9a3c24fe6f8491$var$terrain;\n    }\n    $0c9a3c24fe6f8491$var$marchingCubesContainer.scale.set(fieldSize / 2, fieldSize / 2, fieldSize / 2);\n    $0c9a3c24fe6f8491$var$marchingCubesContainer.updateMatrixWorld();\n    // Create a new marching cubes container to update the resolution\n    $0c9a3c24fe6f8491$var$marchingCubes.init(resolution);\n    $0c9a3c24fe6f8491$var$marchingCubes.updateMatrixWorld();\n    // marching cubes ranges from -1 to 1\n    const dim = $0c9a3c24fe6f8491$var$marchingCubes.matrixWorld.getMaxScaleOnAxis();\n    const min = -dim;\n    const size = $0c9a3c24fe6f8491$var$marchingCubes.size;\n    const cellWidth = 2 * dim / size;\n    const cellWidth2 = cellWidth / 2;\n    $0c9a3c24fe6f8491$var$marchingCubes.isolation = 0.5;\n    $0c9a3c24fe6f8491$var$marchingCubes.position.x = 1 / size;\n    $0c9a3c24fe6f8491$var$marchingCubes.position.y = 1 / size;\n    $0c9a3c24fe6f8491$var$marchingCubes.position.z = 1 / size;\n    $0c9a3c24fe6f8491$var$marchingCubes.reset();\n    // get the world distance\n    const distanceResult = {};\n    let count = 0;\n    for(let y = 0; y < size; y++){\n        for(let x = 0; x < size; x++)for(let z = 0; z < size; z++){\n            pos.x = min + cellWidth2 + x * cellWidth;\n            pos.y = min + cellWidth2 + y * cellWidth;\n            pos.z = min + cellWidth2 + z * cellWidth;\n            if (isDistanceToTarget || surfaceOnly || pos.length() < radius && !isDistanceToTarget) {\n                pos.applyMatrix4(worldToBvh);\n                const foundPoint = !!distanceMesh.geometry.boundsTree.closestPointToPoint(pos, distanceResult, distance, distance);\n                const result = distanceResult.distance < distance;\n                $0c9a3c24fe6f8491$var$marchingCubes.setCell(x, y, z, foundPoint && result ? 0 : 1);\n            }\n            count++;\n            yield count / (size * size * size);\n        }\n    }\n    $0c9a3c24fe6f8491$var$marchingCubes.blur(1);\n}\nlet $0c9a3c24fe6f8491$var$currentTask = null;\nlet $0c9a3c24fe6f8491$var$regenerate = true;\nfunction $0c9a3c24fe6f8491$var$render() {\n    $0c9a3c24fe6f8491$var$stats.begin();\n    if ($0c9a3c24fe6f8491$var$needsUpdate) {\n        $0c9a3c24fe6f8491$var$updateDistanceCheck(!$0c9a3c24fe6f8491$var$params.volume.alwaysShowDistance);\n        $0c9a3c24fe6f8491$var$needsUpdate = false;\n    }\n    if ($0c9a3c24fe6f8491$var$boundsViz) $0c9a3c24fe6f8491$var$boundsViz.update();\n    // start regenerating the marching cubes mesh if needed\n    if ($0c9a3c24fe6f8491$var$regenerate) {\n        $0c9a3c24fe6f8491$var$currentTask = $0c9a3c24fe6f8491$var$updateMarchingCubes();\n        $0c9a3c24fe6f8491$var$regenerate = false;\n    }\n    // console.log('----');\n    // update the marching cubes volume\n    let percentage = 0;\n    if ($0c9a3c24fe6f8491$var$currentTask) {\n        let startTime = window.performance.now();\n        while(window.performance.now() - startTime < 15){\n            const res = $0c9a3c24fe6f8491$var$currentTask.next();\n            percentage = res.value;\n            if (res.done) {\n                $0c9a3c24fe6f8491$var$currentTask = null;\n                break;\n            }\n        }\n        $0c9a3c24fe6f8491$var$marchingCubes.update();\n        $0c9a3c24fe6f8491$var$marchingCubes.visible = !$0c9a3c24fe6f8491$var$params.volume.hideWhileGenerating && $0c9a3c24fe6f8491$var$params.volume.display != 0;\n    }\n    // Update visibility of marching cubes mesh\n    if (!$0c9a3c24fe6f8491$var$currentTask) $0c9a3c24fe6f8491$var$marchingCubes.visible = true;\n    // update loading bar\n    document.getElementById(\"loader\").setAttribute(\"style\", `width: ${percentage * 100}%`);\n    // render\n    $0c9a3c24fe6f8491$var$renderer.render($0c9a3c24fe6f8491$var$scene, $0c9a3c24fe6f8491$var$camera);\n    $0c9a3c24fe6f8491$var$stats.end();\n    requestAnimationFrame($0c9a3c24fe6f8491$var$render);\n}\n$0c9a3c24fe6f8491$var$init();\n$0c9a3c24fe6f8491$var$updateFromOptions();\n$0c9a3c24fe6f8491$var$render();\n\n\n//# sourceMappingURL=distancecast.418db496.js.map\n","/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time > prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport { Stats as default };\n","import { Ray, Matrix4, Mesh } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst ray = /* @__PURE__ */ new Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n","// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\treturn null;\n\n\t} else {\n\n\t\treturn hit;\n\n\t}\n\n}\n","import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nclass MeshBVHRootHelper extends Object3D {\n\n\tget isMesh() {\n\n\t\treturn ! this.displayEdges;\n\n\t}\n\n\tget isLineSegments() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tget isLine() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tconstructor( bvh, material, depth = 10, group = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.material = material;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.name = 'MeshBVHRootHelper';\n\t\tthis.depth = depth;\n\t\tthis.displayParents = false;\n\t\tthis.bvh = bvh;\n\t\tthis.displayEdges = true;\n\t\tthis._group = group;\n\n\t}\n\n\traycast() {}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst boundsTree = this.bvh;\n\t\tconst group = this._group;\n\t\tgeometry.dispose();\n\t\tthis.visible = false;\n\t\tif ( boundsTree ) {\n\n\t\t\t// count the number of bounds required\n\t\t\tconst targetDepth = this.depth - 1;\n\t\t\tconst displayParents = this.displayParents;\n\t\t\tlet boundsCount = 0;\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\tif ( depth >= targetDepth || isLeaf ) {\n\n\t\t\t\t\tboundsCount ++;\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\t// fill in the position buffer with the bounds corners\n\t\t\tlet posIndex = 0;\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\tconst terminate = depth >= targetDepth || isLeaf;\n\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn terminate;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\tlet indexArray;\n\t\t\tlet indices;\n\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t// x axis\n\t\t\t\t\t0, 4,\n\t\t\t\t\t1, 5,\n\t\t\t\t\t2, 6,\n\t\t\t\t\t3, 7,\n\n\t\t\t\t\t// y axis\n\t\t\t\t\t0, 2,\n\t\t\t\t\t1, 3,\n\t\t\t\t\t4, 6,\n\t\t\t\t\t5, 7,\n\n\t\t\t\t\t// z axis\n\t\t\t\t\t0, 1,\n\t\t\t\t\t2, 3,\n\t\t\t\t\t4, 5,\n\t\t\t\t\t6, 7,\n\t\t\t\t] );\n\n\t\t\t} else {\n\n\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t// X-, X+\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t} else {\n\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t}\n\n\t\t\tconst indexLength = indices.length;\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\tconst posOffset = i * 8;\n\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the geometry\n\t\t\tgeometry.setIndex(\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\n\t\t\t);\n\t\t\tgeometry.setAttribute(\n\t\t\t\t'position',\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\n\t\t\t);\n\t\t\tthis.visible = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass MeshBVHHelper extends Group {\n\n\tget color() {\n\n\t\treturn this.edgeMaterial.color;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.edgeMaterial.opacity;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tthis.edgeMaterial.opacity = v;\n\t\tthis.meshMaterial.opacity = v;\n\n\t}\n\n\tconstructor( mesh = null, bvh = null, depth = 10 ) {\n\n\t\t// handle bvh, depth signature\n\t\tif ( mesh instanceof MeshBVH ) {\n\n\t\t\tdepth = bvh || 10;\n\t\t\tbvh = mesh;\n\t\t\tmesh = null;\n\n\t\t}\n\n\t\t// handle mesh, depth signature\n\t\tif ( typeof bvh === 'number' ) {\n\n\t\t\tdepth = bvh;\n\t\t\tbvh = null;\n\n\t\t}\n\n\t\tsuper();\n\n\t\tthis.name = 'MeshBVHHelper';\n\t\tthis.depth = depth;\n\t\tthis.mesh = mesh;\n\t\tthis.bvh = bvh;\n\t\tthis.displayParents = false;\n\t\tthis.displayEdges = true;\n\t\tthis._roots = [];\n\n\t\tconst edgeMaterial = new LineBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tconst meshMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\tthis.edgeMaterial = edgeMaterial;\n\t\tthis.meshMaterial = meshMaterial;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst bvh = this.bvh || this.mesh.geometry.boundsTree;\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\tconst root = this._roots.pop();\n\t\t\troot.geometry.dispose();\n\t\t\tthis.remove( root );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\tconst { depth, edgeMaterial, meshMaterial, displayParents, displayEdges } = this;\n\n\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\tconst root = new MeshBVHRootHelper( bvh, edgeMaterial, depth, i );\n\t\t\t\tthis.add( root );\n\t\t\t\tthis._roots.push( root );\n\n\t\t\t}\n\n\t\t\tconst root = this._roots[ i ];\n\t\t\troot.bvh = bvh;\n\t\t\troot.depth = depth;\n\t\t\troot.displayParents = displayParents;\n\t\t\troot.displayEdges = displayEdges;\n\t\t\troot.material = displayEdges ? edgeMaterial : meshMaterial;\n\t\t\troot.update();\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( ...args ) {\n\n\t\tconst mesh = this.mesh;\n\t\tconst parent = this.parent;\n\n\t\tif ( mesh !== null ) {\n\n\t\t\tmesh.updateWorldMatrix( true, false );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( parent.matrixWorld )\n\t\t\t\t\t.invert()\n\t\t\t\t\t.multiply( mesh.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( mesh.matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.matrix.decompose(\n\t\t\t\tthis.position,\n\t\t\t\tthis.quaternion,\n\t\t\t\tthis.scale,\n\t\t\t);\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( ...args );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.depth = source.depth;\n\t\tthis.mesh = source.mesh;\n\t\tthis.bvh = source.bvh;\n\t\tthis.opacity = source.opacity;\n\t\tthis.color.copy( source.color );\n\n\t}\n\n\tclone() {\n\n\t\treturn new MeshBVHHelper( this.mesh, this.bvh, this.depth );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.edgeMaterial.dispose();\n\t\tthis.meshMaterial.dispose();\n\n\t\tconst children = this.children;\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport class MeshBVHVisualizer extends MeshBVHHelper {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconsole.warn( 'MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.' );\n\n\t}\n\n}\n\nexport { MeshBVHHelper };\n","import Stats from 'stats.js/src/Stats';\nimport * as dat from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls.js';\nimport { MarchingCubes } from './lib/MarchingCubes.js';\nimport SimplexNoise from 'simplex-noise';\nimport { acceleratedRaycast, computeBoundsTree, disposeBoundsTree, MeshBVHHelper } from '..';\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nconst params = {\n\n\tvisualizeBounds: false,\n\tvisualBoundsDepth: 10,\n\n\tvolume: {\n\t\tdisplay: 1,\n\t\thideWhileGenerating: false,\n\t\talwaysShowDistance: true,\n\t\tsurfaceOnly: false,\n\t\tdistance: 1,\n\t\tresolution: 100,\n\t\tradius: 4,\n\t},\n\tdisplayClosestPoint: true,\n\n};\n\nlet stats;\nlet scene, camera, renderer, controls, boundsViz;\nlet terrain, targetContainer, targetMesh, transformControls;\nlet marchingCubes, marchingCubesContainer;\nlet sphere1, sphere2, line;\nlet needsUpdate = false;\n\nfunction init() {\n\n\tconst bgColor = 0x263238 / 2;\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\tscene.fog = new THREE.Fog( 0x263238 / 2, 10, 45 );\n\n\tconst light = new THREE.DirectionalLight( 0xffffff, 0.5 );\n\tlight.position.set( 20, 20, 20 );\n\tlight.castShadow = true;\n\tlight.shadow.mapSize.set( 2048, 2048 );\n\n\tconst shadowCam = light.shadow.camera;\n\tshadowCam.left = shadowCam.bottom = - 15;\n\tshadowCam.right = shadowCam.top = 15;\n\tshadowCam.updateProjectionMatrix();\n\n\tscene.add( light );\n\tscene.add( new THREE.AmbientLight( 0xE0F7FA, 0.5 ) );\n\n\t// geometry setup\n\tconst size = 50;\n\tconst dim = 250;\n\tconst planeGeom = new THREE.PlaneBufferGeometry( size, size, dim - 1, dim - 1 );\n\tconst posAttr = planeGeom.attributes.position;\n\n\tconst seed = Math.floor( Math.random() * 100 );\n\tconst noise = new SimplexNoise( seed );\n\tfor ( let i = 0; i < dim * dim; i ++ ) {\n\n\t\tconst x = posAttr.getX( i ) / 15;\n\t\tconst y = posAttr.getY( i ) / 15;\n\t\tposAttr.setZ( i, noise.noise2D( x, y ) * 3 );\n\n\t}\n\n\tplaneGeom.computeVertexNormals();\n\tplaneGeom.computeBoundsTree();\n\n\tterrain = new THREE.Mesh( planeGeom, new THREE.MeshStandardMaterial( {\n\t\tcolor: 0xFFFFFF,\n\t\tmetalness: 0.1,\n\t\troughness: 0.9,\n\t\tside: THREE.DoubleSide,\n\t} ) );\n\tterrain.rotation.x = - Math.PI / 2;\n\tterrain.position.y = - 3;\n\tterrain.receiveShadow = true;\n\tscene.add( terrain );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.z = 5;\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\tconst shapeMaterial = new THREE.MeshStandardMaterial( {\n\t\troughness: 0.75,\n\t\tmetalness: 0.1,\n\t} );\n\ttargetContainer = new THREE.Group();\n\tscene.add( targetContainer );\n\n\ttargetMesh = new THREE.Mesh( new THREE.CylinderBufferGeometry( 0.5, 0.25, 1, 20, 1 ), shapeMaterial );\n\ttargetMesh.castShadow = true;\n\ttargetMesh.receiveShadow = true;\n\ttargetMesh.geometry.computeBoundsTree();\n\ttargetMesh.geometry.computeBoundingSphere();\n\ttargetContainer.add( targetMesh );\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\ttransformControls = new TransformControls( camera, renderer.domElement );\n\ttransformControls.attach( targetContainer );\n\ttransformControls.addEventListener( 'dragging-changed', e => {\n\n\t\tcontrols.enabled = ! e.value;\n\t\tif ( ! e.value ) needsUpdate = true;\n\n\t} );\n\ttransformControls.addEventListener( 'objectChange', e => {\n\n\t\tneedsUpdate = true;\n\n\t} );\n\tscene.add( transformControls );\n\n\tconst cubeMat = new THREE.MeshStandardMaterial( {\n\t\tflatShading: true,\n\t\tcolor: 0xE91E63,\n\t\tmetalness: 0.0,\n\t\troughness: 0.35,\n\t\ttransparent: true,\n\t\tdepthWrite: false,\n\t\topacity: 0.15,\n\t\tpremultipliedAlpha: true,\n\t\tside: THREE.DoubleSide,\n\t} );\n\tmarchingCubes = new MarchingCubes( 100, cubeMat, false, false, 1000000 );\n\tmarchingCubes.isolation = 0;\n\tmarchingCubes.autoUpdate = false;\n\n\tmarchingCubesContainer = new THREE.Group();\n\tmarchingCubesContainer.scale.multiplyScalar( 5 );\n\tmarchingCubesContainer.add( marchingCubes );\n\tscene.add( marchingCubesContainer );\n\n\tsphere1 = new THREE.Mesh(\n\t\tnew THREE.SphereGeometry( 0.025, 20, 20 ),\n\t\tnew THREE.MeshBasicMaterial( {\n\t\t\tcolor: 0xE91E63,\n\t\t} ) );\n\tsphere1.castShadow = true;\n\tscene.add( sphere1 );\n\n\tsphere2 = sphere1.clone();\n\tsphere2.castShadow = true;\n\tscene.add( sphere2 );\n\n\tconst lineCube = new THREE.Mesh( new THREE.BoxGeometry(), sphere1.material );\n\tlineCube.castShadow = true;\n\tlineCube.position.z = 0.5;\n\n\tline = new THREE.Object3D();\n\tline.add( lineCube );\n\tscene.add( line );\n\n\tscene.updateMatrixWorld( true );\n\n\tconst gui = new dat.GUI( { width: 300 } );\n\tgui.add( params, 'visualizeBounds' ).onChange( () => updateFromOptions() );\n\tgui.add( params, 'visualBoundsDepth' ).min( 1 ).max( 40 ).step( 1 ).onChange( () => updateFromOptions() );\n\n\tconst mcFolder = gui.addFolder( 'distanceVisualization' );\n\tmcFolder.add( params.volume, 'display', { 'hide': 0, 'distance to terrain': 1, 'distance to mesh': 2 } ).onChange( () => {\n\n\t\tregenerate = true;\n\n\t} );\n\tmcFolder.add( params.volume, 'hideWhileGenerating' );\n\tmcFolder.add( params.volume, 'alwaysShowDistance' );\n\tmcFolder.add( params.volume, 'surfaceOnly' ).onChange( () => regenerate = true );\n\tmcFolder.add( params.volume, 'distance' ).min( 0 ).max( 2 ).step( 0.01 ).onChange( () => regenerate = true );\n\tmcFolder.add( params.volume, 'radius' ).min( 1 ).max( 20 ).onChange( () => regenerate = true );\n\tmcFolder.add( params.volume, 'resolution', 5, 200, 1 ).onChange( () => regenerate = true );\n\tmcFolder.open();\n\n\tgui.add( transformControls, 'mode', [ 'translate', 'rotate' ] );\n\n\tconst posFolder = gui.addFolder( 'position' );\n\tposFolder.add( targetContainer.position, 'x' ).min( - 5 ).max( 5 ).step( 0.001 ).listen();\n\tposFolder.add( targetContainer.position, 'y' ).min( - 5 ).max( 5 ).step( 0.001 ).listen();\n\tposFolder.add( targetContainer.position, 'z' ).min( - 5 ).max( 5 ).step( 0.001 ).listen();\n\n\tconst rotFolder = gui.addFolder( 'rotation' );\n\trotFolder.add( targetContainer.rotation, 'x' ).min( - Math.PI ).max( Math.PI ).step( 0.001 ).listen();\n\trotFolder.add( targetContainer.rotation, 'y' ).min( - Math.PI ).max( Math.PI ).step( 0.001 ).listen();\n\trotFolder.add( targetContainer.rotation, 'z' ).min( - Math.PI ).max( Math.PI ).step( 0.001 ).listen();\n\n\tgui.open();\n\n\tupdateDistanceCheck();\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\twindow.addEventListener( 'keydown', function ( e ) {\n\n\t\tswitch ( e.key ) {\n\n\t\t\tcase 'w':\n\t\t\t\ttransformControls.mode = 'translate';\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\t\ttransformControls.mode = 'rotate';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tgui.controllersRecursive().forEach( c => c.updateDisplay() );\n\n\t} );\n\n}\n\nfunction updateFromOptions() {\n\n\t// Update bounds viz\n\tif ( boundsViz && ! params.visualizeBounds ) {\n\n\t\tscene.remove( boundsViz );\n\t\tboundsViz = null;\n\n\t}\n\n\tif ( ! boundsViz && params.visualizeBounds ) {\n\n\t\tboundsViz = new MeshBVHHelper( terrain );\n\t\tscene.add( boundsViz );\n\n\t}\n\n\tif ( boundsViz ) {\n\n\t\tboundsViz.depth = params.visualBoundsDepth;\n\n\t}\n\n}\n\nfunction updateDistanceCheck( fastCheck ) {\n\n\ttargetContainer.updateMatrixWorld();\n\tconst targetToBvh =\n\t\tnew THREE.Matrix4()\n\t\t    .copy( terrain.matrixWorld ).invert()\n\t\t\t.multiply( targetContainer.matrixWorld );\n\n\t// get the closest point\n\tconst volumeDistance = params.volume.distance;\n\tconst maxDistance = volumeDistance;\n\tconst minDistance = fastCheck ? volumeDistance : 0;\n\n\tconst distanceResult1 = {};\n\tconst distanceResult2 = {};\n\tconst foundPoint = ! ! terrain.geometry.boundsTree.closestPointToGeometry(\n\t\ttargetMesh.geometry,\n\t\ttargetToBvh,\n\t\tdistanceResult1,\n\t\tdistanceResult2,\n\t\tminDistance,\n\t\tmaxDistance,\n\t);\n\n\tconst hit = foundPoint && distanceResult1.distance < volumeDistance;\n\tif ( hit ) {\n\n\t\t// the resulting points are provided in the local frame of the the geometries\n\t\tsphere1.position.copy( distanceResult1.point );\n\t\tsphere2.position.copy( distanceResult2.point ).applyMatrix4( targetToBvh );\n\n\t\t// update the line indicating closest point\n\t\tsphere1.position.applyMatrix4( terrain.matrixWorld );\n\t\tsphere2.position.applyMatrix4( terrain.matrixWorld );\n\n\t\tline.position.copy( sphere1.position );\n\t\tline.lookAt( sphere2.position );\n\t\tline.scale.set(\n\t\t\t0.01,\n\t\t\t0.01,\n\t\t\tsphere1.position.distanceTo( sphere2.position )\n\t\t);\n\n\t}\n\n\ttargetMesh.material.color.set( hit ? 0xE91E63 : 0x666666 );\n\ttargetMesh.material.emissive.set( 0xE91E63 ).multiplyScalar( hit ? 0.25 : 0 );\n\n\tconst areVisible = hit && ! fastCheck;\n\tline.visible = areVisible;\n\tsphere1.visible = areVisible;\n\tsphere2.visible = areVisible;\n\n}\n\nfunction* updateMarchingCubes() {\n\n\tif ( params.volume.display == 0 ) return;\n\n\tupdateDistanceCheck();\n\n\tconst isDistanceToTarget = params.volume.display == 2;\n\n\tconst pos = new THREE.Vector3();\n\tconst surfaceOnly = params.volume.surfaceOnly;\n\tconst resolution = params.volume.resolution;\n\tconst distance = params.volume.distance;\n\tconst radius = params.volume.radius;\n\tlet fieldSize;\n\tlet worldToBvh;\n\tlet distanceMesh;\n\n\tif ( isDistanceToTarget ) {\n\n\t\ttargetContainer.add( marchingCubesContainer );\n\t\tworldToBvh = new THREE.Matrix4().identity();\n\t\tfieldSize = ( targetMesh.geometry.boundingSphere.radius + distance ) * 2;\n\t\tdistanceMesh = targetMesh;\n\n\t} else {\n\n\t\tscene.add( marchingCubesContainer );\n\t\tfieldSize = ( radius + 4 * radius / resolution ) * 2;\n\t\tworldToBvh = new THREE.Matrix4().copy( terrain.matrixWorld ).invert();\n\t\tdistanceMesh = terrain;\n\n\t}\n\n\tmarchingCubesContainer.scale.set( fieldSize / 2, fieldSize / 2, fieldSize / 2 );\n\tmarchingCubesContainer.updateMatrixWorld();\n\n\t// Create a new marching cubes container to update the resolution\n\tmarchingCubes.init( resolution );\n\tmarchingCubes.updateMatrixWorld();\n\n\t// marching cubes ranges from -1 to 1\n\tconst dim = marchingCubes.matrixWorld.getMaxScaleOnAxis();\n\tconst min = - dim;\n\tconst size = marchingCubes.size;\n\tconst cellWidth = 2 * dim / size;\n\tconst cellWidth2 = cellWidth / 2;\n\n\tmarchingCubes.isolation = 0.5;\n\tmarchingCubes.position.x = 1 / size;\n\tmarchingCubes.position.y = 1 / size;\n\tmarchingCubes.position.z = 1 / size;\n\n\tmarchingCubes.reset();\n\n\t// get the world distance\n\tconst distanceResult = {};\n\tlet count = 0;\n\tfor ( let y = 0; y < size; y ++ ) {\n\n\t\tfor ( let x = 0; x < size; x ++ ) {\n\n\t\t\tfor ( let z = 0; z < size; z ++ ) {\n\n\t\t\t\tpos.x = min + cellWidth2 + x * cellWidth;\n\t\t\t\tpos.y = min + cellWidth2 + y * cellWidth;\n\t\t\t\tpos.z = min + cellWidth2 + z * cellWidth;\n\n\t\t\t\tif ( isDistanceToTarget || surfaceOnly || pos.length() < radius && ! isDistanceToTarget ) {\n\n\t\t\t\t\tpos.applyMatrix4( worldToBvh );\n\n\t\t\t\t\tconst foundPoint = ! ! distanceMesh.geometry.boundsTree.closestPointToPoint(\n\t\t\t\t\t\tpos,\n\t\t\t\t\t\tdistanceResult,\n\t\t\t\t\t\tdistance,\n\t\t\t\t\t\tdistance,\n\t\t\t\t\t);\n\t\t\t\t\tconst result = distanceResult.distance < distance;\n\t\t\t\t\tmarchingCubes.setCell( x, y, z, foundPoint && result ? 0 : 1 );\n\n\t\t\t\t}\n\n\t\t\t\tcount ++;\n\n\t\t\t\tyield count / ( size * size * size );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tmarchingCubes.blur( 1 );\n\n}\n\nlet currentTask = null;\nlet regenerate = true;\nfunction render() {\n\n\tstats.begin();\n\n\tif ( needsUpdate ) {\n\n\t\tupdateDistanceCheck( ! params.volume.alwaysShowDistance );\n\t\tneedsUpdate = false;\n\n\t}\n\n\tif ( boundsViz ) {\n\n\t\tboundsViz.update();\n\n\t}\n\n\t// start regenerating the marching cubes mesh if needed\n\tif ( regenerate ) {\n\n\t\tcurrentTask = updateMarchingCubes();\n\t\tregenerate = false;\n\n\t}\n\n\t// console.log('----');\n\t// update the marching cubes volume\n\tlet percentage = 0;\n\tif ( currentTask ) {\n\n\t\tlet startTime = window.performance.now();\n\t\twhile ( window.performance.now() - startTime < 15 ) {\n\n\t\t\tconst res = currentTask.next();\n\t\t\tpercentage = res.value;\n\n\t\t\tif ( res.done ) {\n\n\t\t\t\tcurrentTask = null;\n\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tmarchingCubes.update();\n\n\t\tmarchingCubes.visible = ! params.volume.hideWhileGenerating && params.volume.display != 0;\n\n\t}\n\n\t// Update visibility of marching cubes mesh\n\tif ( ! currentTask ) {\n\n\t\tmarchingCubes.visible = true;\n\n\t}\n\n\t// update loading bar\n\tdocument.getElementById( 'loader' ).setAttribute( 'style', `width: ${ percentage * 100 }%` );\n\n\t// render\n\trenderer.render( scene, camera );\n\tstats.end();\n\n\trequestAnimationFrame( render );\n\n}\n\ninit();\nupdateFromOptions();\nrender();\n","import {\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tDynamicDrawUsage,\n\tMesh\n} from 'three';\n\n/**\n * Port of http://webglsamples.org/blob/blob.html\n */\n\nclass MarchingCubes extends Mesh {\n\n\tconstructor( resolution, material, enableUvs = false, enableColors = false, maxPolyCount = 10000 ) {\n\n\t\tconst geometry = new BufferGeometry();\n\n\t\tsuper( geometry, material );\n\n\t\tconst scope = this;\n\n\t\t// temp buffers used in polygonize\n\n\t\tconst vlist = new Float32Array( 12 * 3 );\n\t\tconst nlist = new Float32Array( 12 * 3 );\n\t\tconst clist = new Float32Array( 12 * 3 );\n\n\t\tthis.enableUvs = enableUvs;\n\t\tthis.enableColors = enableColors;\n\t\tthis.autoUpdate = true;\n\n\t\t// functions have to be object properties\n\t\t// prototype functions kill performance\n\t\t// (tested and it was 4x slower !!!)\n\n\t\tthis.init = function ( resolution ) {\n\n\t\t\tthis.resolution = resolution;\n\n\t\t\t// parameters\n\n\t\t\tthis.isolation = 80.0;\n\n\t\t\t// size of field, 32 is pushing it in Javascript :)\n\n\t\t\tthis.size = resolution;\n\t\t\tthis.size2 = this.size * this.size;\n\t\t\tthis.size3 = this.size2 * this.size;\n\t\t\tthis.halfsize = this.size / 2.0;\n\n\t\t\t// deltas\n\n\t\t\tthis.delta = 2.0 / this.size;\n\t\t\tthis.yd = this.size;\n\t\t\tthis.zd = this.size2;\n\n\t\t\tthis.field = new Float32Array( this.size3 );\n\t\t\tthis.normal_cache = new Float32Array( this.size3 * 3 );\n\t\t\tthis.palette = new Float32Array( this.size3 * 3 );\n\n\t\t\t//\n\n\t\t\tthis.count = 0;\n\n\t\t\tconst maxVertexCount = maxPolyCount * 3;\n\n\t\t\tthis.positionArray = new Float32Array( maxVertexCount * 3 );\n\t\t\tconst positionAttribute = new BufferAttribute( this.positionArray, 3 );\n\t\t\tpositionAttribute.setUsage( DynamicDrawUsage );\n\t\t\tgeometry.setAttribute( 'position', positionAttribute );\n\n\t\t\tthis.normalArray = new Float32Array( maxVertexCount * 3 );\n\t\t\tconst normalAttribute = new BufferAttribute( this.normalArray, 3 );\n\t\t\tnormalAttribute.setUsage( DynamicDrawUsage );\n\t\t\tgeometry.setAttribute( 'normal', normalAttribute );\n\n\t\t\tif ( this.enableUvs ) {\n\n\t\t\t\tthis.uvArray = new Float32Array( maxVertexCount * 2 );\n\t\t\t\tconst uvAttribute = new BufferAttribute( this.uvArray, 2 );\n\t\t\t\tuvAttribute.setUsage( DynamicDrawUsage );\n\t\t\t\tgeometry.setAttribute( 'uv', uvAttribute );\n\n\t\t\t}\n\n\t\t\tif ( this.enableColors ) {\n\n\t\t\t\tthis.colorArray = new Float32Array( maxVertexCount * 3 );\n\t\t\t\tconst colorAttribute = new BufferAttribute( this.colorArray, 3 );\n\t\t\t\tcolorAttribute.setUsage( DynamicDrawUsage );\n\t\t\t\tgeometry.setAttribute( 'color', colorAttribute );\n\n\t\t\t}\n\n\t\t};\n\n\t\t///////////////////////\n\t\t// Polygonization\n\t\t///////////////////////\n\n\t\tfunction lerp( a, b, t ) {\n\n\t\t\treturn a + ( b - a ) * t;\n\n\t\t}\n\n\t\tfunction VIntX( q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2 ) {\n\n\t\t\tconst mu = ( isol - valp1 ) / ( valp2 - valp1 ),\n\t\t\t\tnc = scope.normal_cache;\n\n\t\t\tvlist[ offset + 0 ] = x + mu * scope.delta;\n\t\t\tvlist[ offset + 1 ] = y;\n\t\t\tvlist[ offset + 2 ] = z;\n\n\t\t\tnlist[ offset + 0 ] = lerp( nc[ q + 0 ], nc[ q + 3 ], mu );\n\t\t\tnlist[ offset + 1 ] = lerp( nc[ q + 1 ], nc[ q + 4 ], mu );\n\t\t\tnlist[ offset + 2 ] = lerp( nc[ q + 2 ], nc[ q + 5 ], mu );\n\n\t\t\tclist[ offset + 0 ] = lerp( scope.palette[ c_offset1 * 3 + 0 ], scope.palette[ c_offset2 * 3 + 0 ], mu );\n\t\t\tclist[ offset + 1 ] = lerp( scope.palette[ c_offset1 * 3 + 1 ], scope.palette[ c_offset2 * 3 + 1 ], mu );\n\t\t\tclist[ offset + 2 ] = lerp( scope.palette[ c_offset1 * 3 + 2 ], scope.palette[ c_offset2 * 3 + 2 ], mu );\n\n\t\t}\n\n\t\tfunction VIntY( q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2 ) {\n\n\t\t\tconst mu = ( isol - valp1 ) / ( valp2 - valp1 ),\n\t\t\t\tnc = scope.normal_cache;\n\n\t\t\tvlist[ offset + 0 ] = x;\n\t\t\tvlist[ offset + 1 ] = y + mu * scope.delta;\n\t\t\tvlist[ offset + 2 ] = z;\n\n\t\t\tconst q2 = q + scope.yd * 3;\n\n\t\t\tnlist[ offset + 0 ] = lerp( nc[ q + 0 ], nc[ q2 + 0 ], mu );\n\t\t\tnlist[ offset + 1 ] = lerp( nc[ q + 1 ], nc[ q2 + 1 ], mu );\n\t\t\tnlist[ offset + 2 ] = lerp( nc[ q + 2 ], nc[ q2 + 2 ], mu );\n\n\t\t\tclist[ offset + 0 ] = lerp( scope.palette[ c_offset1 * 3 + 0 ], scope.palette[ c_offset2 * 3 + 0 ], mu );\n\t\t\tclist[ offset + 1 ] = lerp( scope.palette[ c_offset1 * 3 + 1 ], scope.palette[ c_offset2 * 3 + 1 ], mu );\n\t\t\tclist[ offset + 2 ] = lerp( scope.palette[ c_offset1 * 3 + 2 ], scope.palette[ c_offset2 * 3 + 2 ], mu );\n\n\t\t}\n\n\t\tfunction VIntZ( q, offset, isol, x, y, z, valp1, valp2, c_offset1, c_offset2 ) {\n\n\t\t\tconst mu = ( isol - valp1 ) / ( valp2 - valp1 ),\n\t\t\t\tnc = scope.normal_cache;\n\n\t\t\tvlist[ offset + 0 ] = x;\n\t\t\tvlist[ offset + 1 ] = y;\n\t\t\tvlist[ offset + 2 ] = z + mu * scope.delta;\n\n\t\t\tconst q2 = q + scope.zd * 3;\n\n\t\t\tnlist[ offset + 0 ] = lerp( nc[ q + 0 ], nc[ q2 + 0 ], mu );\n\t\t\tnlist[ offset + 1 ] = lerp( nc[ q + 1 ], nc[ q2 + 1 ], mu );\n\t\t\tnlist[ offset + 2 ] = lerp( nc[ q + 2 ], nc[ q2 + 2 ], mu );\n\n\t\t\tclist[ offset + 0 ] = lerp( scope.palette[ c_offset1 * 3 + 0 ], scope.palette[ c_offset2 * 3 + 0 ], mu );\n\t\t\tclist[ offset + 1 ] = lerp( scope.palette[ c_offset1 * 3 + 1 ], scope.palette[ c_offset2 * 3 + 1 ], mu );\n\t\t\tclist[ offset + 2 ] = lerp( scope.palette[ c_offset1 * 3 + 2 ], scope.palette[ c_offset2 * 3 + 2 ], mu );\n\n\t\t}\n\n\t\tfunction compNorm( q ) {\n\n\t\t\tconst q3 = q * 3;\n\n\t\t\tif ( scope.normal_cache[ q3 ] === 0.0 ) {\n\n\t\t\t\tscope.normal_cache[ q3 + 0 ] = scope.field[ q - 1 ] - scope.field[ q + 1 ];\n\t\t\t\tscope.normal_cache[ q3 + 1 ] =\n\t\t\t\t\tscope.field[ q - scope.yd ] - scope.field[ q + scope.yd ];\n\t\t\t\tscope.normal_cache[ q3 + 2 ] =\n\t\t\t\t\tscope.field[ q - scope.zd ] - scope.field[ q + scope.zd ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Returns total number of triangles. Fills triangles.\n\t\t// (this is where most of time is spent - it's inner work of O(n3) loop )\n\n\t\tfunction polygonize( fx, fy, fz, q, isol ) {\n\n\t\t\t// cache indices\n\t\t\tconst q1 = q + 1,\n\t\t\t\tqy = q + scope.yd,\n\t\t\t\tqz = q + scope.zd,\n\t\t\t\tq1y = q1 + scope.yd,\n\t\t\t\tq1z = q1 + scope.zd,\n\t\t\t\tqyz = q + scope.yd + scope.zd,\n\t\t\t\tq1yz = q1 + scope.yd + scope.zd;\n\n\t\t\tlet cubeindex = 0;\n\t\t\tconst field0 = scope.field[ q ],\n\t\t\t\tfield1 = scope.field[ q1 ],\n\t\t\t\tfield2 = scope.field[ qy ],\n\t\t\t\tfield3 = scope.field[ q1y ],\n\t\t\t\tfield4 = scope.field[ qz ],\n\t\t\t\tfield5 = scope.field[ q1z ],\n\t\t\t\tfield6 = scope.field[ qyz ],\n\t\t\t\tfield7 = scope.field[ q1yz ];\n\n\t\t\tif ( field0 < isol ) cubeindex |= 1;\n\t\t\tif ( field1 < isol ) cubeindex |= 2;\n\t\t\tif ( field2 < isol ) cubeindex |= 8;\n\t\t\tif ( field3 < isol ) cubeindex |= 4;\n\t\t\tif ( field4 < isol ) cubeindex |= 16;\n\t\t\tif ( field5 < isol ) cubeindex |= 32;\n\t\t\tif ( field6 < isol ) cubeindex |= 128;\n\t\t\tif ( field7 < isol ) cubeindex |= 64;\n\n\t\t\t// if cube is entirely in/out of the surface - bail, nothing to draw\n\n\t\t\tconst bits = edgeTable[ cubeindex ];\n\t\t\tif ( bits === 0 ) return 0;\n\n\t\t\tconst d = scope.delta,\n\t\t\t\tfx2 = fx + d,\n\t\t\t\tfy2 = fy + d,\n\t\t\t\tfz2 = fz + d;\n\n\t\t\t// top of the cube\n\n\t\t\tif ( bits & 1 ) {\n\n\t\t\t\tcompNorm( q );\n\t\t\t\tcompNorm( q1 );\n\t\t\t\tVIntX( q * 3, 0, isol, fx, fy, fz, field0, field1, q, q1 );\n\n\t\t\t}\n\n\t\t\tif ( bits & 2 ) {\n\n\t\t\t\tcompNorm( q1 );\n\t\t\t\tcompNorm( q1y );\n\t\t\t\tVIntY( q1 * 3, 3, isol, fx2, fy, fz, field1, field3, q1, q1y );\n\n\t\t\t}\n\n\t\t\tif ( bits & 4 ) {\n\n\t\t\t\tcompNorm( qy );\n\t\t\t\tcompNorm( q1y );\n\t\t\t\tVIntX( qy * 3, 6, isol, fx, fy2, fz, field2, field3, qy, q1y );\n\n\t\t\t}\n\n\t\t\tif ( bits & 8 ) {\n\n\t\t\t\tcompNorm( q );\n\t\t\t\tcompNorm( qy );\n\t\t\t\tVIntY( q * 3, 9, isol, fx, fy, fz, field0, field2, q, qy );\n\n\t\t\t}\n\n\t\t\t// bottom of the cube\n\n\t\t\tif ( bits & 16 ) {\n\n\t\t\t\tcompNorm( qz );\n\t\t\t\tcompNorm( q1z );\n\t\t\t\tVIntX( qz * 3, 12, isol, fx, fy, fz2, field4, field5, qz, q1z );\n\n\t\t\t}\n\n\t\t\tif ( bits & 32 ) {\n\n\t\t\t\tcompNorm( q1z );\n\t\t\t\tcompNorm( q1yz );\n\t\t\t\tVIntY(\n\t\t\t\t\tq1z * 3,\n\t\t\t\t\t15,\n\t\t\t\t\tisol,\n\t\t\t\t\tfx2,\n\t\t\t\t\tfy,\n\t\t\t\t\tfz2,\n\t\t\t\t\tfield5,\n\t\t\t\t\tfield7,\n\t\t\t\t\tq1z,\n\t\t\t\t\tq1yz\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( bits & 64 ) {\n\n\t\t\t\tcompNorm( qyz );\n\t\t\t\tcompNorm( q1yz );\n\t\t\t\tVIntX(\n\t\t\t\t\tqyz * 3,\n\t\t\t\t\t18,\n\t\t\t\t\tisol,\n\t\t\t\t\tfx,\n\t\t\t\t\tfy2,\n\t\t\t\t\tfz2,\n\t\t\t\t\tfield6,\n\t\t\t\t\tfield7,\n\t\t\t\t\tqyz,\n\t\t\t\t\tq1yz\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( bits & 128 ) {\n\n\t\t\t\tcompNorm( qz );\n\t\t\t\tcompNorm( qyz );\n\t\t\t\tVIntY( qz * 3, 21, isol, fx, fy, fz2, field4, field6, qz, qyz );\n\n\t\t\t}\n\n\t\t\t// vertical lines of the cube\n\t\t\tif ( bits & 256 ) {\n\n\t\t\t\tcompNorm( q );\n\t\t\t\tcompNorm( qz );\n\t\t\t\tVIntZ( q * 3, 24, isol, fx, fy, fz, field0, field4, q, qz );\n\n\t\t\t}\n\n\t\t\tif ( bits & 512 ) {\n\n\t\t\t\tcompNorm( q1 );\n\t\t\t\tcompNorm( q1z );\n\t\t\t\tVIntZ( q1 * 3, 27, isol, fx2, fy, fz, field1, field5, q1, q1z );\n\n\t\t\t}\n\n\t\t\tif ( bits & 1024 ) {\n\n\t\t\t\tcompNorm( q1y );\n\t\t\t\tcompNorm( q1yz );\n\t\t\t\tVIntZ(\n\t\t\t\t\tq1y * 3,\n\t\t\t\t\t30,\n\t\t\t\t\tisol,\n\t\t\t\t\tfx2,\n\t\t\t\t\tfy2,\n\t\t\t\t\tfz,\n\t\t\t\t\tfield3,\n\t\t\t\t\tfield7,\n\t\t\t\t\tq1y,\n\t\t\t\t\tq1yz\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( bits & 2048 ) {\n\n\t\t\t\tcompNorm( qy );\n\t\t\t\tcompNorm( qyz );\n\t\t\t\tVIntZ( qy * 3, 33, isol, fx, fy2, fz, field2, field6, qy, qyz );\n\n\t\t\t}\n\n\t\t\tcubeindex <<= 4; // re-purpose cubeindex into an offset into triTable\n\n\t\t\tlet o1,\n\t\t\t\to2,\n\t\t\t\to3,\n\t\t\t\tnumtris = 0,\n\t\t\t\ti = 0;\n\n\t\t\t// here is where triangles are created\n\n\t\t\twhile ( triTable[ cubeindex + i ] != - 1 ) {\n\n\t\t\t\to1 = cubeindex + i;\n\t\t\t\to2 = o1 + 1;\n\t\t\t\to3 = o1 + 2;\n\n\t\t\t\tposnormtriv(\n\t\t\t\t\tvlist,\n\t\t\t\t\tnlist,\n\t\t\t\t\tclist,\n\t\t\t\t\t3 * triTable[ o1 ],\n\t\t\t\t\t3 * triTable[ o2 ],\n\t\t\t\t\t3 * triTable[ o3 ]\n\t\t\t\t);\n\n\t\t\t\ti += 3;\n\t\t\t\tnumtris ++;\n\n\t\t\t}\n\n\t\t\treturn numtris;\n\n\t\t}\n\n\t\tfunction posnormtriv( pos, norm, colors, o1, o2, o3 ) {\n\n\t\t\tconst c = scope.count * 3;\n\n\t\t\t// positions\n\n\t\t\tscope.positionArray[ c + 0 ] = pos[ o1 ];\n\t\t\tscope.positionArray[ c + 1 ] = pos[ o1 + 1 ];\n\t\t\tscope.positionArray[ c + 2 ] = pos[ o1 + 2 ];\n\n\t\t\tscope.positionArray[ c + 3 ] = pos[ o2 ];\n\t\t\tscope.positionArray[ c + 4 ] = pos[ o2 + 1 ];\n\t\t\tscope.positionArray[ c + 5 ] = pos[ o2 + 2 ];\n\n\t\t\tscope.positionArray[ c + 6 ] = pos[ o3 ];\n\t\t\tscope.positionArray[ c + 7 ] = pos[ o3 + 1 ];\n\t\t\tscope.positionArray[ c + 8 ] = pos[ o3 + 2 ];\n\n\t\t\t// normals\n\n\t\t\tif ( scope.material.flatShading === true ) {\n\n\t\t\t\tconst nx = ( norm[ o1 + 0 ] + norm[ o2 + 0 ] + norm[ o3 + 0 ] ) / 3;\n\t\t\t\tconst ny = ( norm[ o1 + 1 ] + norm[ o2 + 1 ] + norm[ o3 + 1 ] ) / 3;\n\t\t\t\tconst nz = ( norm[ o1 + 2 ] + norm[ o2 + 2 ] + norm[ o3 + 2 ] ) / 3;\n\n\t\t\t\tscope.normalArray[ c + 0 ] = nx;\n\t\t\t\tscope.normalArray[ c + 1 ] = ny;\n\t\t\t\tscope.normalArray[ c + 2 ] = nz;\n\n\t\t\t\tscope.normalArray[ c + 3 ] = nx;\n\t\t\t\tscope.normalArray[ c + 4 ] = ny;\n\t\t\t\tscope.normalArray[ c + 5 ] = nz;\n\n\t\t\t\tscope.normalArray[ c + 6 ] = nx;\n\t\t\t\tscope.normalArray[ c + 7 ] = ny;\n\t\t\t\tscope.normalArray[ c + 8 ] = nz;\n\n\t\t\t} else {\n\n\t\t\t\tscope.normalArray[ c + 0 ] = norm[ o1 + 0 ];\n\t\t\t\tscope.normalArray[ c + 1 ] = norm[ o1 + 1 ];\n\t\t\t\tscope.normalArray[ c + 2 ] = norm[ o1 + 2 ];\n\n\t\t\t\tscope.normalArray[ c + 3 ] = norm[ o2 + 0 ];\n\t\t\t\tscope.normalArray[ c + 4 ] = norm[ o2 + 1 ];\n\t\t\t\tscope.normalArray[ c + 5 ] = norm[ o2 + 2 ];\n\n\t\t\t\tscope.normalArray[ c + 6 ] = norm[ o3 + 0 ];\n\t\t\t\tscope.normalArray[ c + 7 ] = norm[ o3 + 1 ];\n\t\t\t\tscope.normalArray[ c + 8 ] = norm[ o3 + 2 ];\n\n\t\t\t}\n\n\t\t\t// uvs\n\n\t\t\tif ( scope.enableUvs ) {\n\n\t\t\t\tconst d = scope.count * 2;\n\n\t\t\t\tscope.uvArray[ d + 0 ] = pos[ o1 + 0 ];\n\t\t\t\tscope.uvArray[ d + 1 ] = pos[ o1 + 2 ];\n\n\t\t\t\tscope.uvArray[ d + 2 ] = pos[ o2 + 0 ];\n\t\t\t\tscope.uvArray[ d + 3 ] = pos[ o2 + 2 ];\n\n\t\t\t\tscope.uvArray[ d + 4 ] = pos[ o3 + 0 ];\n\t\t\t\tscope.uvArray[ d + 5 ] = pos[ o3 + 2 ];\n\n\t\t\t}\n\n\t\t\t// colors\n\n\t\t\tif ( scope.enableColors ) {\n\n\t\t\t\tscope.colorArray[ c + 0 ] = colors[ o1 + 0 ];\n\t\t\t\tscope.colorArray[ c + 1 ] = colors[ o1 + 1 ];\n\t\t\t\tscope.colorArray[ c + 2 ] = colors[ o1 + 2 ];\n\n\t\t\t\tscope.colorArray[ c + 3 ] = colors[ o2 + 0 ];\n\t\t\t\tscope.colorArray[ c + 4 ] = colors[ o2 + 1 ];\n\t\t\t\tscope.colorArray[ c + 5 ] = colors[ o2 + 2 ];\n\n\t\t\t\tscope.colorArray[ c + 6 ] = colors[ o3 + 0 ];\n\t\t\t\tscope.colorArray[ c + 7 ] = colors[ o3 + 1 ];\n\t\t\t\tscope.colorArray[ c + 8 ] = colors[ o3 + 2 ];\n\n\t\t\t}\n\n\t\t\tscope.count += 3;\n\n\t\t}\n\n\t\t/////////////////////////////////////\n\t\t// Metaballs\n\t\t/////////////////////////////////////\n\n\t\t// Adds a reciprocal ball (nice and blobby) that, to be fast, fades to zero after\n\t\t// a fixed distance, determined by strength and subtract.\n\n\t\tthis.addBall = function ( ballx, bally, ballz, strength, subtract, colors ) {\n\n\t\t\tconst sign = Math.sign( strength );\n\t\t\tstrength = Math.abs( strength );\n\t\t\tconst userDefineColor = ! ( colors === undefined || colors === null );\n\t\t\tlet ballColor = new Color( ballx, bally, ballz );\n\n\t\t\tif ( userDefineColor ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tballColor =\n\t\t\t\t\t\tcolors instanceof Color\n\t\t\t\t\t\t\t? colors\n\t\t\t\t\t\t\t: Array.isArray( colors )\n\t\t\t\t\t\t\t\t? new Color(\n\t\t\t\t\t\t\t\t\tMath.min( Math.abs( colors[ 0 ] ), 1 ),\n\t\t\t\t\t\t\t\t\tMath.min( Math.abs( colors[ 1 ] ), 1 ),\n\t\t\t\t\t\t\t\t\tMath.min( Math.abs( colors[ 2 ] ), 1 )\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t: new Color( colors );\n\n\t\t\t\t} catch ( err ) {\n\n\t\t\t\t\tballColor = new Color( ballx, bally, ballz );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Let's solve the equation to find the radius:\n\t\t\t// 1.0 / (0.000001 + radius^2) * strength - subtract = 0\n\t\t\t// strength / (radius^2) = subtract\n\t\t\t// strength = subtract * radius^2\n\t\t\t// radius^2 = strength / subtract\n\t\t\t// radius = sqrt(strength / subtract)\n\n\t\t\tconst radius = this.size * Math.sqrt( strength / subtract ),\n\t\t\t\tzs = ballz * this.size,\n\t\t\t\tys = bally * this.size,\n\t\t\t\txs = ballx * this.size;\n\n\t\t\tlet min_z = Math.floor( zs - radius );\n\t\t\tif ( min_z < 1 ) min_z = 1;\n\t\t\tlet max_z = Math.floor( zs + radius );\n\t\t\tif ( max_z > this.size - 1 ) max_z = this.size - 1;\n\t\t\tlet min_y = Math.floor( ys - radius );\n\t\t\tif ( min_y < 1 ) min_y = 1;\n\t\t\tlet max_y = Math.floor( ys + radius );\n\t\t\tif ( max_y > this.size - 1 ) max_y = this.size - 1;\n\t\t\tlet min_x = Math.floor( xs - radius );\n\t\t\tif ( min_x < 1 ) min_x = 1;\n\t\t\tlet max_x = Math.floor( xs + radius );\n\t\t\tif ( max_x > this.size - 1 ) max_x = this.size - 1;\n\n\t\t\t// Don't polygonize in the outer layer because normals aren't\n\t\t\t// well-defined there.\n\n\t\t\tlet x, y, z, y_offset, z_offset, fx, fy, fz, fz2, fy2, val;\n\n\t\t\tfor ( z = min_z; z < max_z; z ++ ) {\n\n\t\t\t\tz_offset = this.size2 * z;\n\t\t\t\tfz = z / this.size - ballz;\n\t\t\t\tfz2 = fz * fz;\n\n\t\t\t\tfor ( y = min_y; y < max_y; y ++ ) {\n\n\t\t\t\t\ty_offset = z_offset + this.size * y;\n\t\t\t\t\tfy = y / this.size - bally;\n\t\t\t\t\tfy2 = fy * fy;\n\n\t\t\t\t\tfor ( x = min_x; x < max_x; x ++ ) {\n\n\t\t\t\t\t\tfx = x / this.size - ballx;\n\t\t\t\t\t\tval = strength / ( 0.000001 + fx * fx + fy2 + fz2 ) - subtract;\n\t\t\t\t\t\tif ( val > 0.0 ) {\n\n\t\t\t\t\t\t\tthis.field[ y_offset + x ] += val * sign;\n\n\t\t\t\t\t\t\t// optimization\n\t\t\t\t\t\t\t// http://www.geisswerks.com/ryan/BLOBS/blobs.html\n\t\t\t\t\t\t\tconst ratio =\n\t\t\t\t\t\t\t\tMath.sqrt( ( x - xs ) * ( x - xs ) + ( y - ys ) * ( y - ys ) + ( z - zs ) * ( z - zs ) ) / radius;\n\t\t\t\t\t\t\tconst contrib =\n\t\t\t\t\t\t\t\t1 - ratio * ratio * ratio * ( ratio * ( ratio * 6 - 15 ) + 10 );\n\t\t\t\t\t\t\tthis.palette[ ( y_offset + x ) * 3 + 0 ] += ballColor.r * contrib;\n\t\t\t\t\t\t\tthis.palette[ ( y_offset + x ) * 3 + 1 ] += ballColor.g * contrib;\n\t\t\t\t\t\t\tthis.palette[ ( y_offset + x ) * 3 + 2 ] += ballColor.b * contrib;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.addPlaneX = function ( strength, subtract ) {\n\n\t\t\t// cache attribute lookups\n\t\t\tconst size = this.size,\n\t\t\t\tyd = this.yd,\n\t\t\t\tzd = this.zd,\n\t\t\t\tfield = this.field;\n\n\t\t\tlet x,\n\t\t\t\ty,\n\t\t\t\tz,\n\t\t\t\txx,\n\t\t\t\tval,\n\t\t\t\txdiv,\n\t\t\t\tcxy,\n\t\t\t\tdist = size * Math.sqrt( strength / subtract );\n\n\t\t\tif ( dist > size ) dist = size;\n\n\t\t\tfor ( x = 0; x < dist; x ++ ) {\n\n\t\t\t\txdiv = x / size;\n\t\t\t\txx = xdiv * xdiv;\n\t\t\t\tval = strength / ( 0.0001 + xx ) - subtract;\n\n\t\t\t\tif ( val > 0.0 ) {\n\n\t\t\t\t\tfor ( y = 0; y < size; y ++ ) {\n\n\t\t\t\t\t\tcxy = x + y * yd;\n\n\t\t\t\t\t\tfor ( z = 0; z < size; z ++ ) {\n\n\t\t\t\t\t\t\tfield[ zd * z + cxy ] += val;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.addPlaneY = function ( strength, subtract ) {\n\n\t\t\t// cache attribute lookups\n\t\t\tconst size = this.size,\n\t\t\t\tyd = this.yd,\n\t\t\t\tzd = this.zd,\n\t\t\t\tfield = this.field;\n\n\t\t\tlet x,\n\t\t\t\ty,\n\t\t\t\tz,\n\t\t\t\tyy,\n\t\t\t\tval,\n\t\t\t\tydiv,\n\t\t\t\tcy,\n\t\t\t\tcxy,\n\t\t\t\tdist = size * Math.sqrt( strength / subtract );\n\n\t\t\tif ( dist > size ) dist = size;\n\n\t\t\tfor ( y = 0; y < dist; y ++ ) {\n\n\t\t\t\tydiv = y / size;\n\t\t\t\tyy = ydiv * ydiv;\n\t\t\t\tval = strength / ( 0.0001 + yy ) - subtract;\n\n\t\t\t\tif ( val > 0.0 ) {\n\n\t\t\t\t\tcy = y * yd;\n\n\t\t\t\t\tfor ( x = 0; x < size; x ++ ) {\n\n\t\t\t\t\t\tcxy = cy + x;\n\n\t\t\t\t\t\tfor ( z = 0; z < size; z ++ ) field[ zd * z + cxy ] += val;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.addPlaneZ = function ( strength, subtract ) {\n\n\t\t\t// cache attribute lookups\n\n\t\t\tconst size = this.size,\n\t\t\t\tyd = this.yd,\n\t\t\t\tzd = this.zd,\n\t\t\t\tfield = this.field;\n\n\t\t\tlet x,\n\t\t\t\ty,\n\t\t\t\tz,\n\t\t\t\tzz,\n\t\t\t\tval,\n\t\t\t\tzdiv,\n\t\t\t\tcz,\n\t\t\t\tcyz,\n\t\t\t\tdist = size * Math.sqrt( strength / subtract );\n\n\t\t\tif ( dist > size ) dist = size;\n\n\t\t\tfor ( z = 0; z < dist; z ++ ) {\n\n\t\t\t\tzdiv = z / size;\n\t\t\t\tzz = zdiv * zdiv;\n\t\t\t\tval = strength / ( 0.0001 + zz ) - subtract;\n\t\t\t\tif ( val > 0.0 ) {\n\n\t\t\t\t\tcz = zd * z;\n\n\t\t\t\t\tfor ( y = 0; y < size; y ++ ) {\n\n\t\t\t\t\t\tcyz = cz + y * yd;\n\n\t\t\t\t\t\tfor ( x = 0; x < size; x ++ ) field[ cyz + x ] += val;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\t/////////////////////////////////////\n\t\t// Updates\n\t\t/////////////////////////////////////\n\n\t\tthis.setCell = function ( x, y, z, value ) {\n\n\t\t\tconst index = this.size2 * z + this.size * y + x;\n\t\t\tthis.field[ index ] = value;\n\n\t\t};\n\n\t\tthis.getCell = function ( x, y, z ) {\n\n\t\t\tconst index = this.size2 * z + this.size * y + x;\n\t\t\treturn this.field[ index ];\n\n\t\t};\n\n\t\tthis.blur = function ( intensity = 1 ) {\n\n\t\t\tconst field = this.field;\n\t\t\tconst fieldCopy = field.slice();\n\t\t\tconst size = this.size;\n\t\t\tconst size2 = this.size2;\n\t\t\tfor ( let x = 0; x < size; x ++ ) {\n\n\t\t\t\tfor ( let y = 0; y < size; y ++ ) {\n\n\t\t\t\t\tfor ( let z = 0; z < size; z ++ ) {\n\n\t\t\t\t\t\tconst index = size2 * z + size * y + x;\n\t\t\t\t\t\tlet val = fieldCopy[ index ];\n\t\t\t\t\t\tlet count = 1;\n\n\t\t\t\t\t\tfor ( let x2 = - 1; x2 <= 1; x2 += 2 ) {\n\n\t\t\t\t\t\t\tconst x3 = x2 + x;\n\t\t\t\t\t\t\tif ( x3 < 0 || x3 >= size ) continue;\n\n\t\t\t\t\t\t\tfor ( let y2 = - 1; y2 <= 1; y2 += 2 ) {\n\n\t\t\t\t\t\t\t\tconst y3 = y2 + y;\n\t\t\t\t\t\t\t\tif ( y3 < 0 || y3 >= size ) continue;\n\n\t\t\t\t\t\t\t\tfor ( let z2 = - 1; z2 <= 1; z2 += 2 ) {\n\n\t\t\t\t\t\t\t\t\tconst z3 = z2 + z;\n\t\t\t\t\t\t\t\t\tif ( z3 < 0 || z3 >= size ) continue;\n\n\t\t\t\t\t\t\t\t\tconst index2 = size2 * z3 + size * y3 + x3;\n\t\t\t\t\t\t\t\t\tconst val2 = fieldCopy[ index2 ];\n\n\t\t\t\t\t\t\t\t\tcount ++;\n\t\t\t\t\t\t\t\t\tval += intensity * ( val2 - val ) / count;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfield[ index ] = val;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.reset = function () {\n\n\t\t\t// wipe the normal cache\n\n\t\t\tfor ( let i = 0; i < this.size3; i ++ ) {\n\n\t\t\t\tthis.normal_cache[ i * 3 ] = 0.0;\n\t\t\t\tthis.field[ i ] = 0.0;\n\t\t\t\tthis.palette[ i * 3 ] = this.palette[ i * 3 + 1 ] = this.palette[\n\t\t\t\t\ti * 3 + 2\n\t\t\t\t] = 0.0;\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.update = function () {\n\n\t\t\tthis.count = 0;\n\n\t\t\t// Triangulate. Yeah, this is slow.\n\n\t\t\tconst smin2 = this.size - 2;\n\n\t\t\tfor ( let z = 1; z < smin2; z ++ ) {\n\n\t\t\t\tconst z_offset = this.size2 * z;\n\t\t\t\tconst fz = ( z - this.halfsize ) / this.halfsize; //+ 1\n\n\t\t\t\tfor ( let y = 1; y < smin2; y ++ ) {\n\n\t\t\t\t\tconst y_offset = z_offset + this.size * y;\n\t\t\t\t\tconst fy = ( y - this.halfsize ) / this.halfsize; //+ 1\n\n\t\t\t\t\tfor ( let x = 1; x < smin2; x ++ ) {\n\n\t\t\t\t\t\tconst fx = ( x - this.halfsize ) / this.halfsize; //+ 1\n\t\t\t\t\t\tconst q = y_offset + x;\n\n\t\t\t\t\t\t polygonize( fx, fy, fz, q, this.isolation );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.geometry.setDrawRange( 0, this.count );\n\n\t\t\t// update geometry data\n\n\t\t\tgeometry.getAttribute( 'position' ).needsUpdate = true;\n\t\t\tgeometry.getAttribute( 'normal' ).needsUpdate = true;\n\n\t\t\tif ( this.enableUvs ) geometry.getAttribute( 'uv' ).needsUpdate = true;\n\t\t\tif ( this.enableColors ) geometry.getAttribute( 'color' ).needsUpdate = true;\n\n\t\t\t// safety check\n\n\t\t\tif ( this.count / 3 > maxPolyCount ) console.warn( 'THREE.MarchingCubes: Geometry buffers too small for rendering. Please create an instance with a higher poly count.' );\n\n\t\t};\n\n\t\tthis.onBeforeRender = function () {\n\n\t\t\tif ( this.autoUpdate ) {\n\n\t\t\t\tthis.update();\n\n\t\t\t}\n\n\t\t};\n\n\t\tthis.init( resolution );\n\n\t}\n\n}\n\nMarchingCubes.prototype.isMarchingCubes = true;\n\n/////////////////////////////////////\n// Marching cubes lookup tables\n/////////////////////////////////////\n\n// These tables are straight from Paul Bourke's page:\n// http://paulbourke.net/geometry/polygonise/\n// who in turn got them from Cory Gene Bloyd.\n\nconst edgeTable = new Int32Array( [\n\t0x0, 0x109, 0x203, 0x30a, 0x406, 0x50f, 0x605, 0x70c,\n\t0x80c, 0x905, 0xa0f, 0xb06, 0xc0a, 0xd03, 0xe09, 0xf00,\n\t0x190, 0x99, 0x393, 0x29a, 0x596, 0x49f, 0x795, 0x69c,\n\t0x99c, 0x895, 0xb9f, 0xa96, 0xd9a, 0xc93, 0xf99, 0xe90,\n\t0x230, 0x339, 0x33, 0x13a, 0x636, 0x73f, 0x435, 0x53c,\n\t0xa3c, 0xb35, 0x83f, 0x936, 0xe3a, 0xf33, 0xc39, 0xd30,\n\t0x3a0, 0x2a9, 0x1a3, 0xaa, 0x7a6, 0x6af, 0x5a5, 0x4ac,\n\t0xbac, 0xaa5, 0x9af, 0x8a6, 0xfaa, 0xea3, 0xda9, 0xca0,\n\t0x460, 0x569, 0x663, 0x76a, 0x66, 0x16f, 0x265, 0x36c,\n\t0xc6c, 0xd65, 0xe6f, 0xf66, 0x86a, 0x963, 0xa69, 0xb60,\n\t0x5f0, 0x4f9, 0x7f3, 0x6fa, 0x1f6, 0xff, 0x3f5, 0x2fc,\n\t0xdfc, 0xcf5, 0xfff, 0xef6, 0x9fa, 0x8f3, 0xbf9, 0xaf0,\n\t0x650, 0x759, 0x453, 0x55a, 0x256, 0x35f, 0x55, 0x15c,\n\t0xe5c, 0xf55, 0xc5f, 0xd56, 0xa5a, 0xb53, 0x859, 0x950,\n\t0x7c0, 0x6c9, 0x5c3, 0x4ca, 0x3c6, 0x2cf, 0x1c5, 0xcc,\n\t0xfcc, 0xec5, 0xdcf, 0xcc6, 0xbca, 0xac3, 0x9c9, 0x8c0,\n\t0x8c0, 0x9c9, 0xac3, 0xbca, 0xcc6, 0xdcf, 0xec5, 0xfcc,\n\t0xcc, 0x1c5, 0x2cf, 0x3c6, 0x4ca, 0x5c3, 0x6c9, 0x7c0,\n\t0x950, 0x859, 0xb53, 0xa5a, 0xd56, 0xc5f, 0xf55, 0xe5c,\n\t0x15c, 0x55, 0x35f, 0x256, 0x55a, 0x453, 0x759, 0x650,\n\t0xaf0, 0xbf9, 0x8f3, 0x9fa, 0xef6, 0xfff, 0xcf5, 0xdfc,\n\t0x2fc, 0x3f5, 0xff, 0x1f6, 0x6fa, 0x7f3, 0x4f9, 0x5f0,\n\t0xb60, 0xa69, 0x963, 0x86a, 0xf66, 0xe6f, 0xd65, 0xc6c,\n\t0x36c, 0x265, 0x16f, 0x66, 0x76a, 0x663, 0x569, 0x460,\n\t0xca0, 0xda9, 0xea3, 0xfaa, 0x8a6, 0x9af, 0xaa5, 0xbac,\n\t0x4ac, 0x5a5, 0x6af, 0x7a6, 0xaa, 0x1a3, 0x2a9, 0x3a0,\n\t0xd30, 0xc39, 0xf33, 0xe3a, 0x936, 0x83f, 0xb35, 0xa3c,\n\t0x53c, 0x435, 0x73f, 0x636, 0x13a, 0x33, 0x339, 0x230,\n\t0xe90, 0xf99, 0xc93, 0xd9a, 0xa96, 0xb9f, 0x895, 0x99c,\n\t0x69c, 0x795, 0x49f, 0x596, 0x29a, 0x393, 0x99, 0x190,\n\t0xf00, 0xe09, 0xd03, 0xc0a, 0xb06, 0xa0f, 0x905, 0x80c,\n\t0x70c, 0x605, 0x50f, 0x406, 0x30a, 0x203, 0x109, 0x0 ] );\n\nconst triTable = new Int32Array( [\n\t- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 8, 3, 9, 8, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 2, 10, 0, 2, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 8, 3, 2, 10, 8, 10, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 11, 2, 8, 11, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 9, 0, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 11, 2, 1, 9, 11, 9, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 10, 1, 11, 10, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 10, 1, 0, 8, 10, 8, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 9, 0, 3, 11, 9, 11, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 3, 0, 7, 3, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 1, 9, 4, 7, 1, 7, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 4, 7, 3, 0, 4, 1, 2, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 2, 10, 9, 0, 2, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 10, 9, 2, 9, 7, 2, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,\n\t8, 4, 7, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 4, 7, 11, 2, 4, 2, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 0, 1, 8, 4, 7, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 7, 11, 9, 4, 11, 9, 11, 2, 9, 2, 1, - 1, - 1, - 1, - 1,\n\t3, 10, 1, 3, 11, 10, 7, 8, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 11, 10, 1, 4, 11, 1, 0, 4, 7, 11, 4, - 1, - 1, - 1, - 1,\n\t4, 7, 8, 9, 0, 11, 9, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,\n\t4, 7, 11, 4, 11, 9, 9, 11, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 5, 4, 1, 5, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 5, 4, 8, 3, 5, 3, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 8, 1, 2, 10, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 2, 10, 5, 4, 2, 4, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 10, 5, 3, 2, 5, 3, 5, 4, 3, 4, 8, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 11, 2, 0, 8, 11, 4, 9, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 5, 4, 0, 1, 5, 2, 3, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 1, 5, 2, 5, 8, 2, 8, 11, 4, 8, 5, - 1, - 1, - 1, - 1,\n\t10, 3, 11, 10, 1, 3, 9, 5, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 5, 0, 8, 1, 8, 10, 1, 8, 11, 10, - 1, - 1, - 1, - 1,\n\t5, 4, 0, 5, 0, 11, 5, 11, 10, 11, 0, 3, - 1, - 1, - 1, - 1,\n\t5, 4, 8, 5, 8, 10, 10, 8, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 7, 8, 5, 7, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 3, 0, 9, 5, 3, 5, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 7, 8, 0, 1, 7, 1, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 7, 8, 9, 5, 7, 10, 1, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 1, 2, 9, 5, 0, 5, 3, 0, 5, 7, 3, - 1, - 1, - 1, - 1,\n\t8, 0, 2, 8, 2, 5, 8, 5, 7, 10, 5, 2, - 1, - 1, - 1, - 1,\n\t2, 10, 5, 2, 5, 3, 3, 5, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 9, 5, 7, 8, 9, 3, 11, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 7, 9, 7, 2, 9, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,\n\t2, 3, 11, 0, 1, 8, 1, 7, 8, 1, 5, 7, - 1, - 1, - 1, - 1,\n\t11, 2, 1, 11, 1, 7, 7, 1, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 8, 8, 5, 7, 10, 1, 3, 10, 3, 11, - 1, - 1, - 1, - 1,\n\t5, 7, 0, 5, 0, 9, 7, 11, 0, 1, 0, 10, 11, 10, 0, - 1,\n\t11, 10, 0, 11, 0, 3, 10, 5, 0, 8, 0, 7, 5, 7, 0, - 1,\n\t11, 10, 5, 7, 11, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 0, 1, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 8, 3, 1, 9, 8, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 6, 5, 2, 6, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 6, 5, 1, 2, 6, 3, 0, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 6, 5, 9, 0, 6, 0, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 9, 8, 5, 8, 2, 5, 2, 6, 3, 2, 8, - 1, - 1, - 1, - 1,\n\t2, 3, 11, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 0, 8, 11, 2, 0, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 10, 6, 1, 9, 2, 9, 11, 2, 9, 8, 11, - 1, - 1, - 1, - 1,\n\t6, 3, 11, 6, 5, 3, 5, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 11, 0, 11, 5, 0, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,\n\t3, 11, 6, 0, 3, 6, 0, 6, 5, 0, 5, 9, - 1, - 1, - 1, - 1,\n\t6, 5, 9, 6, 9, 11, 11, 9, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 10, 6, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 3, 0, 4, 7, 3, 6, 5, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 9, 0, 5, 10, 6, 8, 4, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 6, 5, 1, 9, 7, 1, 7, 3, 7, 9, 4, - 1, - 1, - 1, - 1,\n\t6, 1, 2, 6, 5, 1, 4, 7, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 5, 5, 2, 6, 3, 0, 4, 3, 4, 7, - 1, - 1, - 1, - 1,\n\t8, 4, 7, 9, 0, 5, 0, 6, 5, 0, 2, 6, - 1, - 1, - 1, - 1,\n\t7, 3, 9, 7, 9, 4, 3, 2, 9, 5, 9, 6, 2, 6, 9, - 1,\n\t3, 11, 2, 7, 8, 4, 10, 6, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 10, 6, 4, 7, 2, 4, 2, 0, 2, 7, 11, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 4, 7, 8, 2, 3, 11, 5, 10, 6, - 1, - 1, - 1, - 1,\n\t9, 2, 1, 9, 11, 2, 9, 4, 11, 7, 11, 4, 5, 10, 6, - 1,\n\t8, 4, 7, 3, 11, 5, 3, 5, 1, 5, 11, 6, - 1, - 1, - 1, - 1,\n\t5, 1, 11, 5, 11, 6, 1, 0, 11, 7, 11, 4, 0, 4, 11, - 1,\n\t0, 5, 9, 0, 6, 5, 0, 3, 6, 11, 6, 3, 8, 4, 7, - 1,\n\t6, 5, 9, 6, 9, 11, 4, 7, 9, 7, 11, 9, - 1, - 1, - 1, - 1,\n\t10, 4, 9, 6, 4, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 10, 6, 4, 9, 10, 0, 8, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 0, 1, 10, 6, 0, 6, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 3, 1, 8, 1, 6, 8, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,\n\t1, 4, 9, 1, 2, 4, 2, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 8, 1, 2, 9, 2, 4, 9, 2, 6, 4, - 1, - 1, - 1, - 1,\n\t0, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 3, 2, 8, 2, 4, 4, 2, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 4, 9, 10, 6, 4, 11, 2, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 2, 2, 8, 11, 4, 9, 10, 4, 10, 6, - 1, - 1, - 1, - 1,\n\t3, 11, 2, 0, 1, 6, 0, 6, 4, 6, 1, 10, - 1, - 1, - 1, - 1,\n\t6, 4, 1, 6, 1, 10, 4, 8, 1, 2, 1, 11, 8, 11, 1, - 1,\n\t9, 6, 4, 9, 3, 6, 9, 1, 3, 11, 6, 3, - 1, - 1, - 1, - 1,\n\t8, 11, 1, 8, 1, 0, 11, 6, 1, 9, 1, 4, 6, 4, 1, - 1,\n\t3, 11, 6, 3, 6, 0, 0, 6, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 4, 8, 11, 6, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 10, 6, 7, 8, 10, 8, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 7, 3, 0, 10, 7, 0, 9, 10, 6, 7, 10, - 1, - 1, - 1, - 1,\n\t10, 6, 7, 1, 10, 7, 1, 7, 8, 1, 8, 0, - 1, - 1, - 1, - 1,\n\t10, 6, 7, 10, 7, 1, 1, 7, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 6, 1, 6, 8, 1, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,\n\t2, 6, 9, 2, 9, 1, 6, 7, 9, 0, 9, 3, 7, 3, 9, - 1,\n\t7, 8, 0, 7, 0, 6, 6, 0, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 3, 2, 6, 7, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 3, 11, 10, 6, 8, 10, 8, 9, 8, 6, 7, - 1, - 1, - 1, - 1,\n\t2, 0, 7, 2, 7, 11, 0, 9, 7, 6, 7, 10, 9, 10, 7, - 1,\n\t1, 8, 0, 1, 7, 8, 1, 10, 7, 6, 7, 10, 2, 3, 11, - 1,\n\t11, 2, 1, 11, 1, 7, 10, 6, 1, 6, 7, 1, - 1, - 1, - 1, - 1,\n\t8, 9, 6, 8, 6, 7, 9, 1, 6, 11, 6, 3, 1, 3, 6, - 1,\n\t0, 9, 1, 11, 6, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 8, 0, 7, 0, 6, 3, 11, 0, 11, 6, 0, - 1, - 1, - 1, - 1,\n\t7, 11, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 8, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 1, 9, 8, 3, 1, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 1, 2, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 3, 0, 8, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 9, 0, 2, 10, 9, 6, 11, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 11, 7, 2, 10, 3, 10, 8, 3, 10, 9, 8, - 1, - 1, - 1, - 1,\n\t7, 2, 3, 6, 2, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t7, 0, 8, 7, 6, 0, 6, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 7, 6, 2, 3, 7, 0, 1, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 6, 2, 1, 8, 6, 1, 9, 8, 8, 7, 6, - 1, - 1, - 1, - 1,\n\t10, 7, 6, 10, 1, 7, 1, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 7, 6, 1, 7, 10, 1, 8, 7, 1, 0, 8, - 1, - 1, - 1, - 1,\n\t0, 3, 7, 0, 7, 10, 0, 10, 9, 6, 10, 7, - 1, - 1, - 1, - 1,\n\t7, 6, 10, 7, 10, 8, 8, 10, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 8, 4, 11, 8, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 6, 11, 3, 0, 6, 0, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 6, 11, 8, 4, 6, 9, 0, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 4, 6, 9, 6, 3, 9, 3, 1, 11, 3, 6, - 1, - 1, - 1, - 1,\n\t6, 8, 4, 6, 11, 8, 2, 10, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 3, 0, 11, 0, 6, 11, 0, 4, 6, - 1, - 1, - 1, - 1,\n\t4, 11, 8, 4, 6, 11, 0, 2, 9, 2, 10, 9, - 1, - 1, - 1, - 1,\n\t10, 9, 3, 10, 3, 2, 9, 4, 3, 11, 3, 6, 4, 6, 3, - 1,\n\t8, 2, 3, 8, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 4, 2, 4, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 9, 0, 2, 3, 4, 2, 4, 6, 4, 3, 8, - 1, - 1, - 1, - 1,\n\t1, 9, 4, 1, 4, 2, 2, 4, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 1, 3, 8, 6, 1, 8, 4, 6, 6, 10, 1, - 1, - 1, - 1, - 1,\n\t10, 1, 0, 10, 0, 6, 6, 0, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 6, 3, 4, 3, 8, 6, 10, 3, 0, 3, 9, 10, 9, 3, - 1,\n\t10, 9, 4, 6, 10, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 5, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 4, 9, 5, 11, 7, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 0, 1, 5, 4, 0, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 7, 6, 8, 3, 4, 3, 5, 4, 3, 1, 5, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 10, 1, 2, 7, 6, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t6, 11, 7, 1, 2, 10, 0, 8, 3, 4, 9, 5, - 1, - 1, - 1, - 1,\n\t7, 6, 11, 5, 4, 10, 4, 2, 10, 4, 0, 2, - 1, - 1, - 1, - 1,\n\t3, 4, 8, 3, 5, 4, 3, 2, 5, 10, 5, 2, 11, 7, 6, - 1,\n\t7, 2, 3, 7, 6, 2, 5, 4, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 5, 4, 0, 8, 6, 0, 6, 2, 6, 8, 7, - 1, - 1, - 1, - 1,\n\t3, 6, 2, 3, 7, 6, 1, 5, 0, 5, 4, 0, - 1, - 1, - 1, - 1,\n\t6, 2, 8, 6, 8, 7, 2, 1, 8, 4, 8, 5, 1, 5, 8, - 1,\n\t9, 5, 4, 10, 1, 6, 1, 7, 6, 1, 3, 7, - 1, - 1, - 1, - 1,\n\t1, 6, 10, 1, 7, 6, 1, 0, 7, 8, 7, 0, 9, 5, 4, - 1,\n\t4, 0, 10, 4, 10, 5, 0, 3, 10, 6, 10, 7, 3, 7, 10, - 1,\n\t7, 6, 10, 7, 10, 8, 5, 4, 10, 4, 8, 10, - 1, - 1, - 1, - 1,\n\t6, 9, 5, 6, 11, 9, 11, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 6, 11, 0, 6, 3, 0, 5, 6, 0, 9, 5, - 1, - 1, - 1, - 1,\n\t0, 11, 8, 0, 5, 11, 0, 1, 5, 5, 6, 11, - 1, - 1, - 1, - 1,\n\t6, 11, 3, 6, 3, 5, 5, 3, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 10, 9, 5, 11, 9, 11, 8, 11, 5, 6, - 1, - 1, - 1, - 1,\n\t0, 11, 3, 0, 6, 11, 0, 9, 6, 5, 6, 9, 1, 2, 10, - 1,\n\t11, 8, 5, 11, 5, 6, 8, 0, 5, 10, 5, 2, 0, 2, 5, - 1,\n\t6, 11, 3, 6, 3, 5, 2, 10, 3, 10, 5, 3, - 1, - 1, - 1, - 1,\n\t5, 8, 9, 5, 2, 8, 5, 6, 2, 3, 8, 2, - 1, - 1, - 1, - 1,\n\t9, 5, 6, 9, 6, 0, 0, 6, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 5, 8, 1, 8, 0, 5, 6, 8, 3, 8, 2, 6, 2, 8, - 1,\n\t1, 5, 6, 2, 1, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 3, 6, 1, 6, 10, 3, 8, 6, 5, 6, 9, 8, 9, 6, - 1,\n\t10, 1, 0, 10, 0, 6, 9, 5, 0, 5, 6, 0, - 1, - 1, - 1, - 1,\n\t0, 3, 8, 5, 6, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 5, 6, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 5, 10, 7, 5, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 5, 10, 11, 7, 5, 8, 3, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 11, 7, 5, 10, 11, 1, 9, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t10, 7, 5, 10, 11, 7, 9, 8, 1, 8, 3, 1, - 1, - 1, - 1, - 1,\n\t11, 1, 2, 11, 7, 1, 7, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 1, 2, 7, 1, 7, 5, 7, 2, 11, - 1, - 1, - 1, - 1,\n\t9, 7, 5, 9, 2, 7, 9, 0, 2, 2, 11, 7, - 1, - 1, - 1, - 1,\n\t7, 5, 2, 7, 2, 11, 5, 9, 2, 3, 2, 8, 9, 8, 2, - 1,\n\t2, 5, 10, 2, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 2, 0, 8, 5, 2, 8, 7, 5, 10, 2, 5, - 1, - 1, - 1, - 1,\n\t9, 0, 1, 5, 10, 3, 5, 3, 7, 3, 10, 2, - 1, - 1, - 1, - 1,\n\t9, 8, 2, 9, 2, 1, 8, 7, 2, 10, 2, 5, 7, 5, 2, - 1,\n\t1, 3, 5, 3, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 7, 0, 7, 1, 1, 7, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 0, 3, 9, 3, 5, 5, 3, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 8, 7, 5, 9, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 8, 4, 5, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t5, 0, 4, 5, 11, 0, 5, 10, 11, 11, 3, 0, - 1, - 1, - 1, - 1,\n\t0, 1, 9, 8, 4, 10, 8, 10, 11, 10, 4, 5, - 1, - 1, - 1, - 1,\n\t10, 11, 4, 10, 4, 5, 11, 3, 4, 9, 4, 1, 3, 1, 4, - 1,\n\t2, 5, 1, 2, 8, 5, 2, 11, 8, 4, 5, 8, - 1, - 1, - 1, - 1,\n\t0, 4, 11, 0, 11, 3, 4, 5, 11, 2, 11, 1, 5, 1, 11, - 1,\n\t0, 2, 5, 0, 5, 9, 2, 11, 5, 4, 5, 8, 11, 8, 5, - 1,\n\t9, 4, 5, 2, 11, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 5, 10, 3, 5, 2, 3, 4, 5, 3, 8, 4, - 1, - 1, - 1, - 1,\n\t5, 10, 2, 5, 2, 4, 4, 2, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 10, 2, 3, 5, 10, 3, 8, 5, 4, 5, 8, 0, 1, 9, - 1,\n\t5, 10, 2, 5, 2, 4, 1, 9, 2, 9, 4, 2, - 1, - 1, - 1, - 1,\n\t8, 4, 5, 8, 5, 3, 3, 5, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 4, 5, 1, 0, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t8, 4, 5, 8, 5, 3, 9, 0, 5, 0, 3, 5, - 1, - 1, - 1, - 1,\n\t9, 4, 5, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 11, 7, 4, 9, 11, 9, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 8, 3, 4, 9, 7, 9, 11, 7, 9, 10, 11, - 1, - 1, - 1, - 1,\n\t1, 10, 11, 1, 11, 4, 1, 4, 0, 7, 4, 11, - 1, - 1, - 1, - 1,\n\t3, 1, 4, 3, 4, 8, 1, 10, 4, 7, 4, 11, 10, 11, 4, - 1,\n\t4, 11, 7, 9, 11, 4, 9, 2, 11, 9, 1, 2, - 1, - 1, - 1, - 1,\n\t9, 7, 4, 9, 11, 7, 9, 1, 11, 2, 11, 1, 0, 8, 3, - 1,\n\t11, 7, 4, 11, 4, 2, 2, 4, 0, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t11, 7, 4, 11, 4, 2, 8, 3, 4, 3, 2, 4, - 1, - 1, - 1, - 1,\n\t2, 9, 10, 2, 7, 9, 2, 3, 7, 7, 4, 9, - 1, - 1, - 1, - 1,\n\t9, 10, 7, 9, 7, 4, 10, 2, 7, 8, 7, 0, 2, 0, 7, - 1,\n\t3, 7, 10, 3, 10, 2, 7, 4, 10, 1, 10, 0, 4, 0, 10, - 1,\n\t1, 10, 2, 8, 7, 4, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 1, 4, 1, 7, 7, 1, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 9, 1, 4, 1, 7, 0, 8, 1, 8, 7, 1, - 1, - 1, - 1, - 1,\n\t4, 0, 3, 7, 4, 3, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t4, 8, 7, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 10, 8, 10, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 9, 3, 9, 11, 11, 9, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 1, 10, 0, 10, 8, 8, 10, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 1, 10, 11, 3, 10, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 2, 11, 1, 11, 9, 9, 11, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 0, 9, 3, 9, 11, 1, 2, 9, 2, 11, 9, - 1, - 1, - 1, - 1,\n\t0, 2, 11, 8, 0, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t3, 2, 11, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 3, 8, 2, 8, 10, 10, 8, 9, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t9, 10, 2, 0, 9, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t2, 3, 8, 2, 8, 10, 0, 1, 8, 1, 10, 8, - 1, - 1, - 1, - 1,\n\t1, 10, 2, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t1, 3, 8, 9, 1, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 9, 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t0, 3, 8, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1,\n\t- 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1, - 1 ] );\n\nexport { MarchingCubes, edgeTable, triTable };","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n"],"names":["$0c9a3c24fe6f8491$var$stats","$0c9a3c24fe6f8491$var$scene","$0c9a3c24fe6f8491$var$camera","$0c9a3c24fe6f8491$var$renderer","$0c9a3c24fe6f8491$var$controls","$0c9a3c24fe6f8491$var$boundsViz","$0c9a3c24fe6f8491$var$terrain","$0c9a3c24fe6f8491$var$targetContainer","$0c9a3c24fe6f8491$var$targetMesh","$0c9a3c24fe6f8491$var$transformControls","$0c9a3c24fe6f8491$var$marchingCubes","$0c9a3c24fe6f8491$var$marchingCubesContainer","$0c9a3c24fe6f8491$var$sphere1","$0c9a3c24fe6f8491$var$sphere2","$0c9a3c24fe6f8491$var$line","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$cd1d3d651be7f2fc$export$2e2bcd8739ae039","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","i","children","length","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","name","fg","bg","min","Infinity","max","round","Math","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","value","maxValue","drawImage","$31ccd9a92979d6bb$export$a0dc2935489c814a","$31ccd9a92979d6bb$export$749bba8a65fa6d70","$31ccd9a92979d6bb$export$e0a981a7a32ddba4","$ilwiq","$b4YKL","$ff8ed","$31ccd9a92979d6bb$var$ray","Ray","$31ccd9a92979d6bb$var$tmpInverseMatrix","Matrix4","$31ccd9a92979d6bb$var$origMeshRaycastFunc","Mesh","prototype","raycast","raycaster","intersects","geometry","boundsTree","undefined","material","copy","matrixWorld","invert","ray","applyMatrix4","bvh","firstHitOnly","hit","convertRaycastIntersect","raycastFirst","push","hits","l","options","MeshBVH","$810f31c6ff4f494e$export$adb106eed99e8cd8","object","point","distance","distanceTo","origin","near","far","$3c85f35a8c29fa9b$export$e57d74bcb7e3bec5","$aw71y","$3c85f35a8c29fa9b$var$boundingBox","Box3","$3c85f35a8c29fa9b$var$MeshBVHRootHelper","Object3D","isMesh","displayEdges","isLineSegments","isLine","constructor","depth","group","BufferGeometry","displayParents","_group","dispose","visible","indexArray","indices","targetDepth","boundsCount","traverse","isLeaf","posIndex","positionArray","Float32Array","boundingData","terminate","arrayToBox","x","xVal","y","yVal","z","zVal","Uint8Array","Uint32Array","Uint16Array","indexLength","posOffset","indexOffset","j","setIndex","BufferAttribute","setAttribute","Group","color","edgeMaterial","opacity","meshMaterial","mesh","_roots","LineBasicMaterial","transparent","depthWrite","MeshBasicMaterial","totalRoots","root","pop","remove","add","updateMatrixWorld","args","parent","updateWorldMatrix","matrix","multiply","decompose","position","quaternion","scale","source","clone","$hBOJ2","$jiuw3","$5Rd1x","$fUhpq","$bfb18d85c853c85d$export$14387c46dff8604b","resolution","enableUvs","enableColors","maxPolyCount","scope","vlist","nlist","clist","VIntX","q","offset","isol","valp1","valp2","c_offset1","c_offset2","a","mu","nc","normal_cache","delta","b","palette","VIntY","q2","yd","VIntZ","zd","compNorm","q3","field","autoUpdate","isolation","size","size2","size3","halfsize","count","maxVertexCount","positionAttribute","setUsage","DynamicDrawUsage","normalArray","normalAttribute","uvArray","uvAttribute","colorArray","colorAttribute","addBall","ballx","bally","ballz","strength","subtract","colors","y_offset","z_offset","fx","fy","fz","fz2","fy2","val","sign","abs","userDefineColor","ballColor","Color","Array","isArray","radius","sqrt","zs","ys","xs","min_z","floor","max_z","min_y","max_y","min_x","max_x","ratio","contrib","r","g","addPlaneX","xdiv","cxy","dist","addPlaneY","ydiv","cy","addPlaneZ","zdiv","cz","cyz","setCell","index","getCell","blur","intensity","fieldCopy","slice","x2","x3","y2","y3","z2","z3","val2","reset","smin2","polygonize","q1","qy","qz","q1y","q1z","qyz","q1yz","cubeindex","field0","field1","field2","field3","field4","field5","field6","field7","bits","$bfb18d85c853c85d$export$3862a3f34ed06da0","d","fx2","o1","o2","o3","$bfb18d85c853c85d$export$58dc940266ca4076","posnormtriv","pos","norm","c","flatShading","nx","ny","nz","setDrawRange","getAttribute","needsUpdate","console","warn","onBeforeRender","isMarchingCubes","Int32Array","$7f9986d0b71cf3d1$exports","F2","G2","F3","G3","F4","G4","SimplexNoise","randomOrSeed","random","alea","s0","s1","s2","mash","data","toString","h","charCodeAt","arguments","t","p","buildPermutationTable","perm","permMod12","aux","grad3","grad4","noise2D","xin","yin","i1","j1","n0","n1","n2","x0","y0","x1","y1","ii","jj","t0","gi0","t1","gi1","t2","gi2","noise3D","zin","n3","k1","i2","j2","k2","k","z0","z1","kk","t3","gi3","noise4D","w","n4","l1","l2","i3","j3","k3","l3","w0","rankx","ranky","rankz","rankw","w1","w2","w3","x4","y4","z4","w4","ll","t4","gi4","_buildPermutationTable","define","amd","$4h5hN","$5ca9G","acceleratedRaycast","computeBoundsTree","disposeBoundsTree","$0c9a3c24fe6f8491$var$params","visualizeBounds","visualBoundsDepth","volume","hideWhileGenerating","alwaysShowDistance","surfaceOnly","displayClosestPoint","$0c9a3c24fe6f8491$var$needsUpdate","$0c9a3c24fe6f8491$var$updateFromOptions","MeshBVHHelper","$0c9a3c24fe6f8491$var$updateDistanceCheck","fastCheck","targetToBvh","volumeDistance","distanceResult1","distanceResult2","foundPoint","closestPointToGeometry","lookAt","emissive","multiplyScalar","areVisible","$0c9a3c24fe6f8491$var$currentTask","$0c9a3c24fe6f8491$var$regenerate","$0c9a3c24fe6f8491$var$init","WebGLRenderer","antialias","setPixelRatio","setSize","innerWidth","innerHeight","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","body","Scene","fog","Fog","light","DirectionalLight","castShadow","shadow","mapSize","shadowCam","camera","left","bottom","right","top","updateProjectionMatrix","AmbientLight","planeGeom","PlaneBufferGeometry","dim","posAttr","attributes","noise","__esModule","default","getX","getY","setZ","computeVertexNormals","MeshStandardMaterial","metalness","roughness","side","DoubleSide","rotation","PI","receiveShadow","PerspectiveCamera","shapeMaterial","CylinderBufferGeometry","computeBoundingSphere","OrbitControls","TransformControls","attach","premultipliedAlpha","SphereGeometry","lineCube","BoxGeometry","gui","GUI","onChange","step","mcFolder","addFolder","open","posFolder","listen","rotFolder","aspect","key","controllersRecursive","forEach","updateDisplay","$0c9a3c24fe6f8491$var$render","$0c9a3c24fe6f8491$var$updateMarchingCubes","fieldSize","worldToBvh","distanceMesh","isDistanceToTarget","Vector3","identity","boundingSphere","getMaxScaleOnAxis","cellWidth","cellWidth2","distanceResult","closestPointToPoint","result","percentage","startTime","res","next","done","getElementById","render","requestAnimationFrame"],"version":3,"file":"distancecast.418db496.js.map"}