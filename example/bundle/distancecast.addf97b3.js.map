{"mappings":"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","sources":["<anon>","node_modules/three/examples/jsm/controls/TransformControls.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4485\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4485\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fUhpq\", function(module, exports) {\n\n$parcel$export(module.exports, \"TransformControls\", () => $b9499708d6cce9b7$export$198e80c116632110);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nconst $b9499708d6cce9b7$var$_raycaster = new (0, $ilwiq.Raycaster)();\nconst $b9499708d6cce9b7$var$_tempVector = new (0, $ilwiq.Vector3)();\nconst $b9499708d6cce9b7$var$_tempVector2 = new (0, $ilwiq.Vector3)();\nconst $b9499708d6cce9b7$var$_tempQuaternion = new (0, $ilwiq.Quaternion)();\nconst $b9499708d6cce9b7$var$_unit = {\n    X: new (0, $ilwiq.Vector3)(1, 0, 0),\n    Y: new (0, $ilwiq.Vector3)(0, 1, 0),\n    Z: new (0, $ilwiq.Vector3)(0, 0, 1)\n};\nconst $b9499708d6cce9b7$var$_changeEvent = {\n    type: \"change\"\n};\nconst $b9499708d6cce9b7$var$_mouseDownEvent = {\n    type: \"mouseDown\"\n};\nconst $b9499708d6cce9b7$var$_mouseUpEvent = {\n    type: \"mouseUp\",\n    mode: null\n};\nconst $b9499708d6cce9b7$var$_objectChangeEvent = {\n    type: \"objectChange\"\n};\nclass $b9499708d6cce9b7$export$198e80c116632110 extends (0, $ilwiq.Object3D) {\n    constructor(camera, domElement){\n        super();\n        if (domElement === undefined) {\n            console.warn('THREE.TransformControls: The second parameter \"domElement\" is now mandatory.');\n            domElement = document;\n        }\n        this.isTransformControls = true;\n        this.visible = false;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = \"none\"; // disable touch scroll\n        const _gizmo = new $b9499708d6cce9b7$export$c2ae06a69fb9d31f();\n        this._gizmo = _gizmo;\n        this.add(_gizmo);\n        const _plane = new $b9499708d6cce9b7$export$c0ab73045548e2ca();\n        this._plane = _plane;\n        this.add(_plane);\n        const scope = this;\n        // Defined getter, setter and store for a property\n        function defineProperty(propName, defaultValue) {\n            let propValue = defaultValue;\n            Object.defineProperty(scope, propName, {\n                get: function() {\n                    return propValue !== undefined ? propValue : defaultValue;\n                },\n                set: function(value) {\n                    if (propValue !== value) {\n                        propValue = value;\n                        _plane[propName] = value;\n                        _gizmo[propName] = value;\n                        scope.dispatchEvent({\n                            type: propName + \"-changed\",\n                            value: value\n                        });\n                        scope.dispatchEvent($b9499708d6cce9b7$var$_changeEvent);\n                    }\n                }\n            });\n            scope[propName] = defaultValue;\n            _plane[propName] = defaultValue;\n            _gizmo[propName] = defaultValue;\n        }\n        // Define properties with getters/setter\n        // Setting the defined property will automatically trigger change event\n        // Defined properties are passed down to gizmo and plane\n        defineProperty(\"camera\", camera);\n        defineProperty(\"object\", undefined);\n        defineProperty(\"enabled\", true);\n        defineProperty(\"axis\", null);\n        defineProperty(\"mode\", \"translate\");\n        defineProperty(\"translationSnap\", null);\n        defineProperty(\"rotationSnap\", null);\n        defineProperty(\"scaleSnap\", null);\n        defineProperty(\"space\", \"world\");\n        defineProperty(\"size\", 1);\n        defineProperty(\"dragging\", false);\n        defineProperty(\"showX\", true);\n        defineProperty(\"showY\", true);\n        defineProperty(\"showZ\", true);\n        // Reusable utility variables\n        const worldPosition = new (0, $ilwiq.Vector3)();\n        const worldPositionStart = new (0, $ilwiq.Vector3)();\n        const worldQuaternion = new (0, $ilwiq.Quaternion)();\n        const worldQuaternionStart = new (0, $ilwiq.Quaternion)();\n        const cameraPosition = new (0, $ilwiq.Vector3)();\n        const cameraQuaternion = new (0, $ilwiq.Quaternion)();\n        const pointStart = new (0, $ilwiq.Vector3)();\n        const pointEnd = new (0, $ilwiq.Vector3)();\n        const rotationAxis = new (0, $ilwiq.Vector3)();\n        const rotationAngle = 0;\n        const eye = new (0, $ilwiq.Vector3)();\n        // TODO: remove properties unused in plane and gizmo\n        defineProperty(\"worldPosition\", worldPosition);\n        defineProperty(\"worldPositionStart\", worldPositionStart);\n        defineProperty(\"worldQuaternion\", worldQuaternion);\n        defineProperty(\"worldQuaternionStart\", worldQuaternionStart);\n        defineProperty(\"cameraPosition\", cameraPosition);\n        defineProperty(\"cameraQuaternion\", cameraQuaternion);\n        defineProperty(\"pointStart\", pointStart);\n        defineProperty(\"pointEnd\", pointEnd);\n        defineProperty(\"rotationAxis\", rotationAxis);\n        defineProperty(\"rotationAngle\", rotationAngle);\n        defineProperty(\"eye\", eye);\n        this._offset = new (0, $ilwiq.Vector3)();\n        this._startNorm = new (0, $ilwiq.Vector3)();\n        this._endNorm = new (0, $ilwiq.Vector3)();\n        this._cameraScale = new (0, $ilwiq.Vector3)();\n        this._parentPosition = new (0, $ilwiq.Vector3)();\n        this._parentQuaternion = new (0, $ilwiq.Quaternion)();\n        this._parentQuaternionInv = new (0, $ilwiq.Quaternion)();\n        this._parentScale = new (0, $ilwiq.Vector3)();\n        this._worldScaleStart = new (0, $ilwiq.Vector3)();\n        this._worldQuaternionInv = new (0, $ilwiq.Quaternion)();\n        this._worldScale = new (0, $ilwiq.Vector3)();\n        this._positionStart = new (0, $ilwiq.Vector3)();\n        this._quaternionStart = new (0, $ilwiq.Quaternion)();\n        this._scaleStart = new (0, $ilwiq.Vector3)();\n        this._getPointer = $b9499708d6cce9b7$var$getPointer.bind(this);\n        this._onPointerDown = $b9499708d6cce9b7$var$onPointerDown.bind(this);\n        this._onPointerHover = $b9499708d6cce9b7$var$onPointerHover.bind(this);\n        this._onPointerMove = $b9499708d6cce9b7$var$onPointerMove.bind(this);\n        this._onPointerUp = $b9499708d6cce9b7$var$onPointerUp.bind(this);\n        this.domElement.addEventListener(\"pointerdown\", this._onPointerDown);\n        this.domElement.addEventListener(\"pointermove\", this._onPointerHover);\n        this.domElement.addEventListener(\"pointerup\", this._onPointerUp);\n    }\n    // updateMatrixWorld  updates key transformation variables\n    updateMatrixWorld() {\n        if (this.object !== undefined) {\n            this.object.updateMatrixWorld();\n            if (this.object.parent === null) console.error(\"TransformControls: The attached 3D object must be a part of the scene graph.\");\n            else this.object.parent.matrixWorld.decompose(this._parentPosition, this._parentQuaternion, this._parentScale);\n            this.object.matrixWorld.decompose(this.worldPosition, this.worldQuaternion, this._worldScale);\n            this._parentQuaternionInv.copy(this._parentQuaternion).invert();\n            this._worldQuaternionInv.copy(this.worldQuaternion).invert();\n        }\n        this.camera.updateMatrixWorld();\n        this.camera.matrixWorld.decompose(this.cameraPosition, this.cameraQuaternion, this._cameraScale);\n        if (this.camera.isOrthographicCamera) this.camera.getWorldDirection(this.eye).negate();\n        else this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize();\n        super.updateMatrixWorld(this);\n    }\n    pointerHover(pointer) {\n        if (this.object === undefined || this.dragging === true) return;\n        $b9499708d6cce9b7$var$_raycaster.setFromCamera(pointer, this.camera);\n        const intersect = $b9499708d6cce9b7$var$intersectObjectWithRay(this._gizmo.picker[this.mode], $b9499708d6cce9b7$var$_raycaster);\n        if (intersect) this.axis = intersect.object.name;\n        else this.axis = null;\n    }\n    pointerDown(pointer) {\n        if (this.object === undefined || this.dragging === true || pointer.button !== 0) return;\n        if (this.axis !== null) {\n            $b9499708d6cce9b7$var$_raycaster.setFromCamera(pointer, this.camera);\n            const planeIntersect = $b9499708d6cce9b7$var$intersectObjectWithRay(this._plane, $b9499708d6cce9b7$var$_raycaster, true);\n            if (planeIntersect) {\n                this.object.updateMatrixWorld();\n                this.object.parent.updateMatrixWorld();\n                this._positionStart.copy(this.object.position);\n                this._quaternionStart.copy(this.object.quaternion);\n                this._scaleStart.copy(this.object.scale);\n                this.object.matrixWorld.decompose(this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart);\n                this.pointStart.copy(planeIntersect.point).sub(this.worldPositionStart);\n            }\n            this.dragging = true;\n            $b9499708d6cce9b7$var$_mouseDownEvent.mode = this.mode;\n            this.dispatchEvent($b9499708d6cce9b7$var$_mouseDownEvent);\n        }\n    }\n    pointerMove(pointer) {\n        const axis = this.axis;\n        const mode = this.mode;\n        const object = this.object;\n        let space = this.space;\n        if (mode === \"scale\") space = \"local\";\n        else if (axis === \"E\" || axis === \"XYZE\" || axis === \"XYZ\") space = \"world\";\n        if (object === undefined || axis === null || this.dragging === false || pointer.button !== -1) return;\n        $b9499708d6cce9b7$var$_raycaster.setFromCamera(pointer, this.camera);\n        const planeIntersect = $b9499708d6cce9b7$var$intersectObjectWithRay(this._plane, $b9499708d6cce9b7$var$_raycaster, true);\n        if (!planeIntersect) return;\n        this.pointEnd.copy(planeIntersect.point).sub(this.worldPositionStart);\n        if (mode === \"translate\") {\n            // Apply translate\n            this._offset.copy(this.pointEnd).sub(this.pointStart);\n            if (space === \"local\" && axis !== \"XYZ\") this._offset.applyQuaternion(this._worldQuaternionInv);\n            if (axis.indexOf(\"X\") === -1) this._offset.x = 0;\n            if (axis.indexOf(\"Y\") === -1) this._offset.y = 0;\n            if (axis.indexOf(\"Z\") === -1) this._offset.z = 0;\n            if (space === \"local\" && axis !== \"XYZ\") this._offset.applyQuaternion(this._quaternionStart).divide(this._parentScale);\n            else this._offset.applyQuaternion(this._parentQuaternionInv).divide(this._parentScale);\n            object.position.copy(this._offset).add(this._positionStart);\n            // Apply translation snap\n            if (this.translationSnap) {\n                if (space === \"local\") {\n                    object.position.applyQuaternion($b9499708d6cce9b7$var$_tempQuaternion.copy(this._quaternionStart).invert());\n                    if (axis.search(\"X\") !== -1) object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;\n                    if (axis.search(\"Y\") !== -1) object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;\n                    if (axis.search(\"Z\") !== -1) object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;\n                    object.position.applyQuaternion(this._quaternionStart);\n                }\n                if (space === \"world\") {\n                    if (object.parent) object.position.add($b9499708d6cce9b7$var$_tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n                    if (axis.search(\"X\") !== -1) object.position.x = Math.round(object.position.x / this.translationSnap) * this.translationSnap;\n                    if (axis.search(\"Y\") !== -1) object.position.y = Math.round(object.position.y / this.translationSnap) * this.translationSnap;\n                    if (axis.search(\"Z\") !== -1) object.position.z = Math.round(object.position.z / this.translationSnap) * this.translationSnap;\n                    if (object.parent) object.position.sub($b9499708d6cce9b7$var$_tempVector.setFromMatrixPosition(object.parent.matrixWorld));\n                }\n            }\n        } else if (mode === \"scale\") {\n            if (axis.search(\"XYZ\") !== -1) {\n                let d = this.pointEnd.length() / this.pointStart.length();\n                if (this.pointEnd.dot(this.pointStart) < 0) d *= -1;\n                $b9499708d6cce9b7$var$_tempVector2.set(d, d, d);\n            } else {\n                $b9499708d6cce9b7$var$_tempVector.copy(this.pointStart);\n                $b9499708d6cce9b7$var$_tempVector2.copy(this.pointEnd);\n                $b9499708d6cce9b7$var$_tempVector.applyQuaternion(this._worldQuaternionInv);\n                $b9499708d6cce9b7$var$_tempVector2.applyQuaternion(this._worldQuaternionInv);\n                $b9499708d6cce9b7$var$_tempVector2.divide($b9499708d6cce9b7$var$_tempVector);\n                if (axis.search(\"X\") === -1) $b9499708d6cce9b7$var$_tempVector2.x = 1;\n                if (axis.search(\"Y\") === -1) $b9499708d6cce9b7$var$_tempVector2.y = 1;\n                if (axis.search(\"Z\") === -1) $b9499708d6cce9b7$var$_tempVector2.z = 1;\n            }\n            // Apply scale\n            object.scale.copy(this._scaleStart).multiply($b9499708d6cce9b7$var$_tempVector2);\n            if (this.scaleSnap) {\n                if (axis.search(\"X\") !== -1) object.scale.x = Math.round(object.scale.x / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n                if (axis.search(\"Y\") !== -1) object.scale.y = Math.round(object.scale.y / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n                if (axis.search(\"Z\") !== -1) object.scale.z = Math.round(object.scale.z / this.scaleSnap) * this.scaleSnap || this.scaleSnap;\n            }\n        } else if (mode === \"rotate\") {\n            this._offset.copy(this.pointEnd).sub(this.pointStart);\n            const ROTATION_SPEED = 20 / this.worldPosition.distanceTo($b9499708d6cce9b7$var$_tempVector.setFromMatrixPosition(this.camera.matrixWorld));\n            if (axis === \"E\") {\n                this.rotationAxis.copy(this.eye);\n                this.rotationAngle = this.pointEnd.angleTo(this.pointStart);\n                this._startNorm.copy(this.pointStart).normalize();\n                this._endNorm.copy(this.pointEnd).normalize();\n                this.rotationAngle *= this._endNorm.cross(this._startNorm).dot(this.eye) < 0 ? 1 : -1;\n            } else if (axis === \"XYZE\") {\n                this.rotationAxis.copy(this._offset).cross(this.eye).normalize();\n                this.rotationAngle = this._offset.dot($b9499708d6cce9b7$var$_tempVector.copy(this.rotationAxis).cross(this.eye)) * ROTATION_SPEED;\n            } else if (axis === \"X\" || axis === \"Y\" || axis === \"Z\") {\n                this.rotationAxis.copy($b9499708d6cce9b7$var$_unit[axis]);\n                $b9499708d6cce9b7$var$_tempVector.copy($b9499708d6cce9b7$var$_unit[axis]);\n                if (space === \"local\") $b9499708d6cce9b7$var$_tempVector.applyQuaternion(this.worldQuaternion);\n                this.rotationAngle = this._offset.dot($b9499708d6cce9b7$var$_tempVector.cross(this.eye).normalize()) * ROTATION_SPEED;\n            }\n            // Apply rotation snap\n            if (this.rotationSnap) this.rotationAngle = Math.round(this.rotationAngle / this.rotationSnap) * this.rotationSnap;\n            // Apply rotate\n            if (space === \"local\" && axis !== \"E\" && axis !== \"XYZE\") {\n                object.quaternion.copy(this._quaternionStart);\n                object.quaternion.multiply($b9499708d6cce9b7$var$_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle)).normalize();\n            } else {\n                this.rotationAxis.applyQuaternion(this._parentQuaternionInv);\n                object.quaternion.copy($b9499708d6cce9b7$var$_tempQuaternion.setFromAxisAngle(this.rotationAxis, this.rotationAngle));\n                object.quaternion.multiply(this._quaternionStart).normalize();\n            }\n        }\n        this.dispatchEvent($b9499708d6cce9b7$var$_changeEvent);\n        this.dispatchEvent($b9499708d6cce9b7$var$_objectChangeEvent);\n    }\n    pointerUp(pointer) {\n        if (pointer.button !== 0) return;\n        if (this.dragging && this.axis !== null) {\n            $b9499708d6cce9b7$var$_mouseUpEvent.mode = this.mode;\n            this.dispatchEvent($b9499708d6cce9b7$var$_mouseUpEvent);\n        }\n        this.dragging = false;\n        this.axis = null;\n    }\n    dispose() {\n        this.domElement.removeEventListener(\"pointerdown\", this._onPointerDown);\n        this.domElement.removeEventListener(\"pointermove\", this._onPointerHover);\n        this.domElement.removeEventListener(\"pointermove\", this._onPointerMove);\n        this.domElement.removeEventListener(\"pointerup\", this._onPointerUp);\n        this.traverse(function(child) {\n            if (child.geometry) child.geometry.dispose();\n            if (child.material) child.material.dispose();\n        });\n    }\n    // Set current object\n    attach(object) {\n        this.object = object;\n        this.visible = true;\n        return this;\n    }\n    // Detach from object\n    detach() {\n        this.object = undefined;\n        this.visible = false;\n        this.axis = null;\n        return this;\n    }\n    reset() {\n        if (!this.enabled) return;\n        if (this.dragging) {\n            this.object.position.copy(this._positionStart);\n            this.object.quaternion.copy(this._quaternionStart);\n            this.object.scale.copy(this._scaleStart);\n            this.dispatchEvent($b9499708d6cce9b7$var$_changeEvent);\n            this.dispatchEvent($b9499708d6cce9b7$var$_objectChangeEvent);\n            this.pointStart.copy(this.pointEnd);\n        }\n    }\n    getRaycaster() {\n        return $b9499708d6cce9b7$var$_raycaster;\n    }\n    // TODO: deprecate\n    getMode() {\n        return this.mode;\n    }\n    setMode(mode) {\n        this.mode = mode;\n    }\n    setTranslationSnap(translationSnap) {\n        this.translationSnap = translationSnap;\n    }\n    setRotationSnap(rotationSnap) {\n        this.rotationSnap = rotationSnap;\n    }\n    setScaleSnap(scaleSnap) {\n        this.scaleSnap = scaleSnap;\n    }\n    setSize(size) {\n        this.size = size;\n    }\n    setSpace(space) {\n        this.space = space;\n    }\n}\n// mouse / touch event handlers\nfunction $b9499708d6cce9b7$var$getPointer(event) {\n    if (this.domElement.ownerDocument.pointerLockElement) return {\n        x: 0,\n        y: 0,\n        button: event.button\n    };\n    else {\n        const rect = this.domElement.getBoundingClientRect();\n        return {\n            x: (event.clientX - rect.left) / rect.width * 2 - 1,\n            y: -(event.clientY - rect.top) / rect.height * 2 + 1,\n            button: event.button\n        };\n    }\n}\nfunction $b9499708d6cce9b7$var$onPointerHover(event) {\n    if (!this.enabled) return;\n    switch(event.pointerType){\n        case \"mouse\":\n        case \"pen\":\n            this.pointerHover(this._getPointer(event));\n            break;\n    }\n}\nfunction $b9499708d6cce9b7$var$onPointerDown(event) {\n    if (!this.enabled) return;\n    if (!document.pointerLockElement) this.domElement.setPointerCapture(event.pointerId);\n    this.domElement.addEventListener(\"pointermove\", this._onPointerMove);\n    this.pointerHover(this._getPointer(event));\n    this.pointerDown(this._getPointer(event));\n}\nfunction $b9499708d6cce9b7$var$onPointerMove(event) {\n    if (!this.enabled) return;\n    this.pointerMove(this._getPointer(event));\n}\nfunction $b9499708d6cce9b7$var$onPointerUp(event) {\n    if (!this.enabled) return;\n    this.domElement.releasePointerCapture(event.pointerId);\n    this.domElement.removeEventListener(\"pointermove\", this._onPointerMove);\n    this.pointerUp(this._getPointer(event));\n}\nfunction $b9499708d6cce9b7$var$intersectObjectWithRay(object, raycaster, includeInvisible) {\n    const allIntersections = raycaster.intersectObject(object, true);\n    for(let i = 0; i < allIntersections.length; i++){\n        if (allIntersections[i].object.visible || includeInvisible) return allIntersections[i];\n    }\n    return false;\n}\n//\n// Reusable utility variables\nconst $b9499708d6cce9b7$var$_tempEuler = new (0, $ilwiq.Euler)();\nconst $b9499708d6cce9b7$var$_alignVector = new (0, $ilwiq.Vector3)(0, 1, 0);\nconst $b9499708d6cce9b7$var$_zeroVector = new (0, $ilwiq.Vector3)(0, 0, 0);\nconst $b9499708d6cce9b7$var$_lookAtMatrix = new (0, $ilwiq.Matrix4)();\nconst $b9499708d6cce9b7$var$_tempQuaternion2 = new (0, $ilwiq.Quaternion)();\nconst $b9499708d6cce9b7$var$_identityQuaternion = new (0, $ilwiq.Quaternion)();\nconst $b9499708d6cce9b7$var$_dirVector = new (0, $ilwiq.Vector3)();\nconst $b9499708d6cce9b7$var$_tempMatrix = new (0, $ilwiq.Matrix4)();\nconst $b9499708d6cce9b7$var$_unitX = new (0, $ilwiq.Vector3)(1, 0, 0);\nconst $b9499708d6cce9b7$var$_unitY = new (0, $ilwiq.Vector3)(0, 1, 0);\nconst $b9499708d6cce9b7$var$_unitZ = new (0, $ilwiq.Vector3)(0, 0, 1);\nconst $b9499708d6cce9b7$var$_v1 = new (0, $ilwiq.Vector3)();\nconst $b9499708d6cce9b7$var$_v2 = new (0, $ilwiq.Vector3)();\nconst $b9499708d6cce9b7$var$_v3 = new (0, $ilwiq.Vector3)();\nclass $b9499708d6cce9b7$export$c2ae06a69fb9d31f extends (0, $ilwiq.Object3D) {\n    constructor(){\n        super();\n        this.isTransformControlsGizmo = true;\n        this.type = \"TransformControlsGizmo\";\n        // shared materials\n        const gizmoMaterial = new (0, $ilwiq.MeshBasicMaterial)({\n            depthTest: false,\n            depthWrite: false,\n            fog: false,\n            toneMapped: false,\n            transparent: true\n        });\n        const gizmoLineMaterial = new (0, $ilwiq.LineBasicMaterial)({\n            depthTest: false,\n            depthWrite: false,\n            fog: false,\n            toneMapped: false,\n            transparent: true\n        });\n        // Make unique material for each axis/color\n        const matInvisible = gizmoMaterial.clone();\n        matInvisible.opacity = 0.15;\n        const matHelper = gizmoLineMaterial.clone();\n        matHelper.opacity = 0.5;\n        const matRed = gizmoMaterial.clone();\n        matRed.color.setHex(0xff0000);\n        const matGreen = gizmoMaterial.clone();\n        matGreen.color.setHex(0x00ff00);\n        const matBlue = gizmoMaterial.clone();\n        matBlue.color.setHex(0x0000ff);\n        const matRedTransparent = gizmoMaterial.clone();\n        matRedTransparent.color.setHex(0xff0000);\n        matRedTransparent.opacity = 0.5;\n        const matGreenTransparent = gizmoMaterial.clone();\n        matGreenTransparent.color.setHex(0x00ff00);\n        matGreenTransparent.opacity = 0.5;\n        const matBlueTransparent = gizmoMaterial.clone();\n        matBlueTransparent.color.setHex(0x0000ff);\n        matBlueTransparent.opacity = 0.5;\n        const matWhiteTransparent = gizmoMaterial.clone();\n        matWhiteTransparent.opacity = 0.25;\n        const matYellowTransparent = gizmoMaterial.clone();\n        matYellowTransparent.color.setHex(0xffff00);\n        matYellowTransparent.opacity = 0.25;\n        const matYellow = gizmoMaterial.clone();\n        matYellow.color.setHex(0xffff00);\n        const matGray = gizmoMaterial.clone();\n        matGray.color.setHex(0x787878);\n        // reusable geometry\n        const arrowGeometry = new (0, $ilwiq.CylinderGeometry)(0, 0.04, 0.1, 12);\n        arrowGeometry.translate(0, 0.05, 0);\n        const scaleHandleGeometry = new (0, $ilwiq.BoxGeometry)(0.08, 0.08, 0.08);\n        scaleHandleGeometry.translate(0, 0.04, 0);\n        const lineGeometry = new (0, $ilwiq.BufferGeometry)();\n        lineGeometry.setAttribute(\"position\", new (0, $ilwiq.Float32BufferAttribute)([\n            0,\n            0,\n            0,\n            1,\n            0,\n            0\n        ], 3));\n        const lineGeometry2 = new (0, $ilwiq.CylinderGeometry)(0.0075, 0.0075, 0.5, 3);\n        lineGeometry2.translate(0, 0.25, 0);\n        function CircleGeometry(radius, arc) {\n            const geometry = new (0, $ilwiq.TorusGeometry)(radius, 0.0075, 3, 64, arc * Math.PI * 2);\n            geometry.rotateY(Math.PI / 2);\n            geometry.rotateX(Math.PI / 2);\n            return geometry;\n        }\n        // Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n        function TranslateHelperGeometry() {\n            const geometry = new (0, $ilwiq.BufferGeometry)();\n            geometry.setAttribute(\"position\", new (0, $ilwiq.Float32BufferAttribute)([\n                0,\n                0,\n                0,\n                1,\n                1,\n                1\n            ], 3));\n            return geometry;\n        }\n        // Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n        const gizmoTranslate = {\n            X: [\n                [\n                    new (0, $ilwiq.Mesh)(arrowGeometry, matRed),\n                    [\n                        0.5,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(arrowGeometry, matRed),\n                    [\n                        -0.5,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(lineGeometry2, matRed),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ]\n            ],\n            Y: [\n                [\n                    new (0, $ilwiq.Mesh)(arrowGeometry, matGreen),\n                    [\n                        0,\n                        0.5,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(arrowGeometry, matGreen),\n                    [\n                        0,\n                        -0.5,\n                        0\n                    ],\n                    [\n                        Math.PI,\n                        0,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(lineGeometry2, matGreen)\n                ]\n            ],\n            Z: [\n                [\n                    new (0, $ilwiq.Mesh)(arrowGeometry, matBlue),\n                    [\n                        0,\n                        0,\n                        0.5\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(arrowGeometry, matBlue),\n                    [\n                        0,\n                        0,\n                        -0.5\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(lineGeometry2, matBlue),\n                    null,\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]\n            ],\n            XYZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.OctahedronGeometry)(0.1, 0), matWhiteTransparent.clone()),\n                    [\n                        0,\n                        0,\n                        0\n                    ]\n                ]\n            ],\n            XY: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.15, 0.15, 0.01), matBlueTransparent.clone()),\n                    [\n                        0.15,\n                        0.15,\n                        0\n                    ]\n                ]\n            ],\n            YZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.15, 0.15, 0.01), matRedTransparent.clone()),\n                    [\n                        0,\n                        0.15,\n                        0.15\n                    ],\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ]\n            ],\n            XZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.15, 0.15, 0.01), matGreenTransparent.clone()),\n                    [\n                        0.15,\n                        0,\n                        0.15\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]\n            ]\n        };\n        const pickerTranslate = {\n            X: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0.3,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        -0.3,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ]\n                ]\n            ],\n            Y: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0,\n                        0.3,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0,\n                        -0.3,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI\n                    ]\n                ]\n            ],\n            Z: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0,\n                        0,\n                        0.3\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0,\n                        0,\n                        -0.3\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]\n            ],\n            XYZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.OctahedronGeometry)(0.2, 0), matInvisible)\n                ]\n            ],\n            XY: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.2, 0.2, 0.01), matInvisible),\n                    [\n                        0.15,\n                        0.15,\n                        0\n                    ]\n                ]\n            ],\n            YZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.2, 0.2, 0.01), matInvisible),\n                    [\n                        0,\n                        0.15,\n                        0.15\n                    ],\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ]\n            ],\n            XZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.2, 0.2, 0.01), matInvisible),\n                    [\n                        0.15,\n                        0,\n                        0.15\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]\n            ]\n        };\n        const helperTranslate = {\n            START: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.OctahedronGeometry)(0.01, 2), matHelper),\n                    null,\n                    null,\n                    null,\n                    \"helper\"\n                ]\n            ],\n            END: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.OctahedronGeometry)(0.01, 2), matHelper),\n                    null,\n                    null,\n                    null,\n                    \"helper\"\n                ]\n            ],\n            DELTA: [\n                [\n                    new (0, $ilwiq.Line)(TranslateHelperGeometry(), matHelper),\n                    null,\n                    null,\n                    null,\n                    \"helper\"\n                ]\n            ],\n            X: [\n                [\n                    new (0, $ilwiq.Line)(lineGeometry, matHelper.clone()),\n                    [\n                        -1000,\n                        0,\n                        0\n                    ],\n                    null,\n                    [\n                        1e6,\n                        1,\n                        1\n                    ],\n                    \"helper\"\n                ]\n            ],\n            Y: [\n                [\n                    new (0, $ilwiq.Line)(lineGeometry, matHelper.clone()),\n                    [\n                        0,\n                        -1000,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        1e6,\n                        1,\n                        1\n                    ],\n                    \"helper\"\n                ]\n            ],\n            Z: [\n                [\n                    new (0, $ilwiq.Line)(lineGeometry, matHelper.clone()),\n                    [\n                        0,\n                        0,\n                        -1000\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ],\n                    [\n                        1e6,\n                        1,\n                        1\n                    ],\n                    \"helper\"\n                ]\n            ]\n        };\n        const gizmoRotate = {\n            XYZE: [\n                [\n                    new (0, $ilwiq.Mesh)(CircleGeometry(0.5, 1), matGray),\n                    null,\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ]\n            ],\n            X: [\n                [\n                    new (0, $ilwiq.Mesh)(CircleGeometry(0.5, 0.5), matRed)\n                ]\n            ],\n            Y: [\n                [\n                    new (0, $ilwiq.Mesh)(CircleGeometry(0.5, 0.5), matGreen),\n                    null,\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ]\n            ],\n            Z: [\n                [\n                    new (0, $ilwiq.Mesh)(CircleGeometry(0.5, 0.5), matBlue),\n                    null,\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ]\n            ],\n            E: [\n                [\n                    new (0, $ilwiq.Mesh)(CircleGeometry(0.75, 1), matYellowTransparent),\n                    null,\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ]\n            ]\n        };\n        const helperRotate = {\n            AXIS: [\n                [\n                    new (0, $ilwiq.Line)(lineGeometry, matHelper.clone()),\n                    [\n                        -1000,\n                        0,\n                        0\n                    ],\n                    null,\n                    [\n                        1e6,\n                        1,\n                        1\n                    ],\n                    \"helper\"\n                ]\n            ]\n        };\n        const pickerRotate = {\n            XYZE: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.SphereGeometry)(0.25, 10, 8), matInvisible)\n                ]\n            ],\n            X: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.TorusGeometry)(0.5, 0.1, 4, 24), matInvisible),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        -Math.PI / 2\n                    ]\n                ]\n            ],\n            Y: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.TorusGeometry)(0.5, 0.1, 4, 24), matInvisible),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]\n            ],\n            Z: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.TorusGeometry)(0.5, 0.1, 4, 24), matInvisible),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ]\n            ],\n            E: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.TorusGeometry)(0.75, 0.1, 2, 24), matInvisible)\n                ]\n            ]\n        };\n        const gizmoScale = {\n            X: [\n                [\n                    new (0, $ilwiq.Mesh)(scaleHandleGeometry, matRed),\n                    [\n                        0.5,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(lineGeometry2, matRed),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(scaleHandleGeometry, matRed),\n                    [\n                        -0.5,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ]\n                ]\n            ],\n            Y: [\n                [\n                    new (0, $ilwiq.Mesh)(scaleHandleGeometry, matGreen),\n                    [\n                        0,\n                        0.5,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(lineGeometry2, matGreen)\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(scaleHandleGeometry, matGreen),\n                    [\n                        0,\n                        -0.5,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI\n                    ]\n                ]\n            ],\n            Z: [\n                [\n                    new (0, $ilwiq.Mesh)(scaleHandleGeometry, matBlue),\n                    [\n                        0,\n                        0,\n                        0.5\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(lineGeometry2, matBlue),\n                    [\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(scaleHandleGeometry, matBlue),\n                    [\n                        0,\n                        0,\n                        -0.5\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]\n            ],\n            XY: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.15, 0.15, 0.01), matBlueTransparent),\n                    [\n                        0.15,\n                        0.15,\n                        0\n                    ]\n                ]\n            ],\n            YZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.15, 0.15, 0.01), matRedTransparent),\n                    [\n                        0,\n                        0.15,\n                        0.15\n                    ],\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ]\n            ],\n            XZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.15, 0.15, 0.01), matGreenTransparent),\n                    [\n                        0.15,\n                        0,\n                        0.15\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]\n            ],\n            XYZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.1, 0.1, 0.1), matWhiteTransparent.clone())\n                ]\n            ]\n        };\n        const pickerScale = {\n            X: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0.3,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        -Math.PI / 2\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        -0.3,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ]\n                ]\n            ],\n            Y: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0,\n                        0.3,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0,\n                        -0.3,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI\n                    ]\n                ]\n            ],\n            Z: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0,\n                        0,\n                        0.3\n                    ],\n                    [\n                        Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ],\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.CylinderGeometry)(0.2, 0, 0.6, 4), matInvisible),\n                    [\n                        0,\n                        0,\n                        -0.3\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]\n            ],\n            XY: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.2, 0.2, 0.01), matInvisible),\n                    [\n                        0.15,\n                        0.15,\n                        0\n                    ]\n                ]\n            ],\n            YZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.2, 0.2, 0.01), matInvisible),\n                    [\n                        0,\n                        0.15,\n                        0.15\n                    ],\n                    [\n                        0,\n                        Math.PI / 2,\n                        0\n                    ]\n                ]\n            ],\n            XZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.2, 0.2, 0.01), matInvisible),\n                    [\n                        0.15,\n                        0,\n                        0.15\n                    ],\n                    [\n                        -Math.PI / 2,\n                        0,\n                        0\n                    ]\n                ]\n            ],\n            XYZ: [\n                [\n                    new (0, $ilwiq.Mesh)(new (0, $ilwiq.BoxGeometry)(0.2, 0.2, 0.2), matInvisible),\n                    [\n                        0,\n                        0,\n                        0\n                    ]\n                ]\n            ]\n        };\n        const helperScale = {\n            X: [\n                [\n                    new (0, $ilwiq.Line)(lineGeometry, matHelper.clone()),\n                    [\n                        -1000,\n                        0,\n                        0\n                    ],\n                    null,\n                    [\n                        1e6,\n                        1,\n                        1\n                    ],\n                    \"helper\"\n                ]\n            ],\n            Y: [\n                [\n                    new (0, $ilwiq.Line)(lineGeometry, matHelper.clone()),\n                    [\n                        0,\n                        -1000,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        Math.PI / 2\n                    ],\n                    [\n                        1e6,\n                        1,\n                        1\n                    ],\n                    \"helper\"\n                ]\n            ],\n            Z: [\n                [\n                    new (0, $ilwiq.Line)(lineGeometry, matHelper.clone()),\n                    [\n                        0,\n                        0,\n                        -1000\n                    ],\n                    [\n                        0,\n                        -Math.PI / 2,\n                        0\n                    ],\n                    [\n                        1e6,\n                        1,\n                        1\n                    ],\n                    \"helper\"\n                ]\n            ]\n        };\n        // Creates an Object3D with gizmos described in custom hierarchy definition.\n        function setupGizmo(gizmoMap) {\n            const gizmo = new (0, $ilwiq.Object3D)();\n            for(const name in gizmoMap)for(let i = gizmoMap[name].length; i--;){\n                const object = gizmoMap[name][i][0].clone();\n                const position = gizmoMap[name][i][1];\n                const rotation = gizmoMap[name][i][2];\n                const scale = gizmoMap[name][i][3];\n                const tag = gizmoMap[name][i][4];\n                // name and tag properties are essential for picking and updating logic.\n                object.name = name;\n                object.tag = tag;\n                if (position) object.position.set(position[0], position[1], position[2]);\n                if (rotation) object.rotation.set(rotation[0], rotation[1], rotation[2]);\n                if (scale) object.scale.set(scale[0], scale[1], scale[2]);\n                object.updateMatrix();\n                const tempGeometry = object.geometry.clone();\n                tempGeometry.applyMatrix4(object.matrix);\n                object.geometry = tempGeometry;\n                object.renderOrder = Infinity;\n                object.position.set(0, 0, 0);\n                object.rotation.set(0, 0, 0);\n                object.scale.set(1, 1, 1);\n                gizmo.add(object);\n            }\n            return gizmo;\n        }\n        // Gizmo creation\n        this.gizmo = {};\n        this.picker = {};\n        this.helper = {};\n        this.add(this.gizmo[\"translate\"] = setupGizmo(gizmoTranslate));\n        this.add(this.gizmo[\"rotate\"] = setupGizmo(gizmoRotate));\n        this.add(this.gizmo[\"scale\"] = setupGizmo(gizmoScale));\n        this.add(this.picker[\"translate\"] = setupGizmo(pickerTranslate));\n        this.add(this.picker[\"rotate\"] = setupGizmo(pickerRotate));\n        this.add(this.picker[\"scale\"] = setupGizmo(pickerScale));\n        this.add(this.helper[\"translate\"] = setupGizmo(helperTranslate));\n        this.add(this.helper[\"rotate\"] = setupGizmo(helperRotate));\n        this.add(this.helper[\"scale\"] = setupGizmo(helperScale));\n        // Pickers should be hidden always\n        this.picker[\"translate\"].visible = false;\n        this.picker[\"rotate\"].visible = false;\n        this.picker[\"scale\"].visible = false;\n    }\n    // updateMatrixWorld will update transformations and appearance of individual handles\n    updateMatrixWorld(force) {\n        const space = this.mode === \"scale\" ? \"local\" : this.space; // scale always oriented to local rotation\n        const quaternion = space === \"local\" ? this.worldQuaternion : $b9499708d6cce9b7$var$_identityQuaternion;\n        // Show only gizmos for current transform mode\n        this.gizmo[\"translate\"].visible = this.mode === \"translate\";\n        this.gizmo[\"rotate\"].visible = this.mode === \"rotate\";\n        this.gizmo[\"scale\"].visible = this.mode === \"scale\";\n        this.helper[\"translate\"].visible = this.mode === \"translate\";\n        this.helper[\"rotate\"].visible = this.mode === \"rotate\";\n        this.helper[\"scale\"].visible = this.mode === \"scale\";\n        let handles = [];\n        handles = handles.concat(this.picker[this.mode].children);\n        handles = handles.concat(this.gizmo[this.mode].children);\n        handles = handles.concat(this.helper[this.mode].children);\n        for(let i = 0; i < handles.length; i++){\n            const handle = handles[i];\n            // hide aligned to camera\n            handle.visible = true;\n            handle.rotation.set(0, 0, 0);\n            handle.position.copy(this.worldPosition);\n            let factor;\n            if (this.camera.isOrthographicCamera) factor = (this.camera.top - this.camera.bottom) / this.camera.zoom;\n            else factor = this.worldPosition.distanceTo(this.cameraPosition) * Math.min(1.9 * Math.tan(Math.PI * this.camera.fov / 360) / this.camera.zoom, 7);\n            handle.scale.set(1, 1, 1).multiplyScalar(factor * this.size / 4);\n            // TODO: simplify helpers and consider decoupling from gizmo\n            if (handle.tag === \"helper\") {\n                handle.visible = false;\n                if (handle.name === \"AXIS\") {\n                    handle.visible = !!this.axis;\n                    if (this.axis === \"X\") {\n                        $b9499708d6cce9b7$var$_tempQuaternion.setFromEuler($b9499708d6cce9b7$var$_tempEuler.set(0, 0, 0));\n                        handle.quaternion.copy(quaternion).multiply($b9499708d6cce9b7$var$_tempQuaternion);\n                        if (Math.abs($b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_unitX).applyQuaternion(quaternion).dot(this.eye)) > 0.9) handle.visible = false;\n                    }\n                    if (this.axis === \"Y\") {\n                        $b9499708d6cce9b7$var$_tempQuaternion.setFromEuler($b9499708d6cce9b7$var$_tempEuler.set(0, 0, Math.PI / 2));\n                        handle.quaternion.copy(quaternion).multiply($b9499708d6cce9b7$var$_tempQuaternion);\n                        if (Math.abs($b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_unitY).applyQuaternion(quaternion).dot(this.eye)) > 0.9) handle.visible = false;\n                    }\n                    if (this.axis === \"Z\") {\n                        $b9499708d6cce9b7$var$_tempQuaternion.setFromEuler($b9499708d6cce9b7$var$_tempEuler.set(0, Math.PI / 2, 0));\n                        handle.quaternion.copy(quaternion).multiply($b9499708d6cce9b7$var$_tempQuaternion);\n                        if (Math.abs($b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_unitZ).applyQuaternion(quaternion).dot(this.eye)) > 0.9) handle.visible = false;\n                    }\n                    if (this.axis === \"XYZE\") {\n                        $b9499708d6cce9b7$var$_tempQuaternion.setFromEuler($b9499708d6cce9b7$var$_tempEuler.set(0, Math.PI / 2, 0));\n                        $b9499708d6cce9b7$var$_alignVector.copy(this.rotationAxis);\n                        handle.quaternion.setFromRotationMatrix($b9499708d6cce9b7$var$_lookAtMatrix.lookAt($b9499708d6cce9b7$var$_zeroVector, $b9499708d6cce9b7$var$_alignVector, $b9499708d6cce9b7$var$_unitY));\n                        handle.quaternion.multiply($b9499708d6cce9b7$var$_tempQuaternion);\n                        handle.visible = this.dragging;\n                    }\n                    if (this.axis === \"E\") handle.visible = false;\n                } else if (handle.name === \"START\") {\n                    handle.position.copy(this.worldPositionStart);\n                    handle.visible = this.dragging;\n                } else if (handle.name === \"END\") {\n                    handle.position.copy(this.worldPosition);\n                    handle.visible = this.dragging;\n                } else if (handle.name === \"DELTA\") {\n                    handle.position.copy(this.worldPositionStart);\n                    handle.quaternion.copy(this.worldQuaternionStart);\n                    $b9499708d6cce9b7$var$_tempVector.set(1e-10, 1e-10, 1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1);\n                    $b9499708d6cce9b7$var$_tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert());\n                    handle.scale.copy($b9499708d6cce9b7$var$_tempVector);\n                    handle.visible = this.dragging;\n                } else {\n                    handle.quaternion.copy(quaternion);\n                    if (this.dragging) handle.position.copy(this.worldPositionStart);\n                    else handle.position.copy(this.worldPosition);\n                    if (this.axis) handle.visible = this.axis.search(handle.name) !== -1;\n                }\n                continue;\n            }\n            // Align handles to current local or world rotation\n            handle.quaternion.copy(quaternion);\n            if (this.mode === \"translate\" || this.mode === \"scale\") {\n                // Hide translate and scale axis facing the camera\n                const AXIS_HIDE_THRESHOLD = 0.99;\n                const PLANE_HIDE_THRESHOLD = 0.2;\n                if (handle.name === \"X\") {\n                    if (Math.abs($b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_unitX).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {\n                        handle.scale.set(1e-10, 1e-10, 1e-10);\n                        handle.visible = false;\n                    }\n                }\n                if (handle.name === \"Y\") {\n                    if (Math.abs($b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_unitY).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {\n                        handle.scale.set(1e-10, 1e-10, 1e-10);\n                        handle.visible = false;\n                    }\n                }\n                if (handle.name === \"Z\") {\n                    if (Math.abs($b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_unitZ).applyQuaternion(quaternion).dot(this.eye)) > AXIS_HIDE_THRESHOLD) {\n                        handle.scale.set(1e-10, 1e-10, 1e-10);\n                        handle.visible = false;\n                    }\n                }\n                if (handle.name === \"XY\") {\n                    if (Math.abs($b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_unitZ).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {\n                        handle.scale.set(1e-10, 1e-10, 1e-10);\n                        handle.visible = false;\n                    }\n                }\n                if (handle.name === \"YZ\") {\n                    if (Math.abs($b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_unitX).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {\n                        handle.scale.set(1e-10, 1e-10, 1e-10);\n                        handle.visible = false;\n                    }\n                }\n                if (handle.name === \"XZ\") {\n                    if (Math.abs($b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_unitY).applyQuaternion(quaternion).dot(this.eye)) < PLANE_HIDE_THRESHOLD) {\n                        handle.scale.set(1e-10, 1e-10, 1e-10);\n                        handle.visible = false;\n                    }\n                }\n            } else if (this.mode === \"rotate\") {\n                // Align handles to current local or world rotation\n                $b9499708d6cce9b7$var$_tempQuaternion2.copy(quaternion);\n                $b9499708d6cce9b7$var$_alignVector.copy(this.eye).applyQuaternion($b9499708d6cce9b7$var$_tempQuaternion.copy(quaternion).invert());\n                if (handle.name.search(\"E\") !== -1) handle.quaternion.setFromRotationMatrix($b9499708d6cce9b7$var$_lookAtMatrix.lookAt(this.eye, $b9499708d6cce9b7$var$_zeroVector, $b9499708d6cce9b7$var$_unitY));\n                if (handle.name === \"X\") {\n                    $b9499708d6cce9b7$var$_tempQuaternion.setFromAxisAngle($b9499708d6cce9b7$var$_unitX, Math.atan2(-$b9499708d6cce9b7$var$_alignVector.y, $b9499708d6cce9b7$var$_alignVector.z));\n                    $b9499708d6cce9b7$var$_tempQuaternion.multiplyQuaternions($b9499708d6cce9b7$var$_tempQuaternion2, $b9499708d6cce9b7$var$_tempQuaternion);\n                    handle.quaternion.copy($b9499708d6cce9b7$var$_tempQuaternion);\n                }\n                if (handle.name === \"Y\") {\n                    $b9499708d6cce9b7$var$_tempQuaternion.setFromAxisAngle($b9499708d6cce9b7$var$_unitY, Math.atan2($b9499708d6cce9b7$var$_alignVector.x, $b9499708d6cce9b7$var$_alignVector.z));\n                    $b9499708d6cce9b7$var$_tempQuaternion.multiplyQuaternions($b9499708d6cce9b7$var$_tempQuaternion2, $b9499708d6cce9b7$var$_tempQuaternion);\n                    handle.quaternion.copy($b9499708d6cce9b7$var$_tempQuaternion);\n                }\n                if (handle.name === \"Z\") {\n                    $b9499708d6cce9b7$var$_tempQuaternion.setFromAxisAngle($b9499708d6cce9b7$var$_unitZ, Math.atan2($b9499708d6cce9b7$var$_alignVector.y, $b9499708d6cce9b7$var$_alignVector.x));\n                    $b9499708d6cce9b7$var$_tempQuaternion.multiplyQuaternions($b9499708d6cce9b7$var$_tempQuaternion2, $b9499708d6cce9b7$var$_tempQuaternion);\n                    handle.quaternion.copy($b9499708d6cce9b7$var$_tempQuaternion);\n                }\n            }\n            // Hide disabled axes\n            handle.visible = handle.visible && (handle.name.indexOf(\"X\") === -1 || this.showX);\n            handle.visible = handle.visible && (handle.name.indexOf(\"Y\") === -1 || this.showY);\n            handle.visible = handle.visible && (handle.name.indexOf(\"Z\") === -1 || this.showZ);\n            handle.visible = handle.visible && (handle.name.indexOf(\"E\") === -1 || this.showX && this.showY && this.showZ);\n            // highlight selected axis\n            handle.material._color = handle.material._color || handle.material.color.clone();\n            handle.material._opacity = handle.material._opacity || handle.material.opacity;\n            handle.material.color.copy(handle.material._color);\n            handle.material.opacity = handle.material._opacity;\n            if (this.enabled && this.axis) {\n                if (handle.name === this.axis) {\n                    handle.material.color.setHex(0xffff00);\n                    handle.material.opacity = 1.0;\n                } else if (this.axis.split(\"\").some(function(a) {\n                    return handle.name === a;\n                })) {\n                    handle.material.color.setHex(0xffff00);\n                    handle.material.opacity = 1.0;\n                }\n            }\n        }\n        super.updateMatrixWorld(force);\n    }\n}\n//\nclass $b9499708d6cce9b7$export$c0ab73045548e2ca extends (0, $ilwiq.Mesh) {\n    constructor(){\n        super(new (0, $ilwiq.PlaneGeometry)(100000, 100000, 2, 2), new (0, $ilwiq.MeshBasicMaterial)({\n            visible: false,\n            wireframe: true,\n            side: (0, $ilwiq.DoubleSide),\n            transparent: true,\n            opacity: 0.1,\n            toneMapped: false\n        }));\n        this.isTransformControlsPlane = true;\n        this.type = \"TransformControlsPlane\";\n    }\n    updateMatrixWorld(force) {\n        let space = this.space;\n        this.position.copy(this.worldPosition);\n        if (this.mode === \"scale\") space = \"local\"; // scale always oriented to local rotation\n        $b9499708d6cce9b7$var$_v1.copy($b9499708d6cce9b7$var$_unitX).applyQuaternion(space === \"local\" ? this.worldQuaternion : $b9499708d6cce9b7$var$_identityQuaternion);\n        $b9499708d6cce9b7$var$_v2.copy($b9499708d6cce9b7$var$_unitY).applyQuaternion(space === \"local\" ? this.worldQuaternion : $b9499708d6cce9b7$var$_identityQuaternion);\n        $b9499708d6cce9b7$var$_v3.copy($b9499708d6cce9b7$var$_unitZ).applyQuaternion(space === \"local\" ? this.worldQuaternion : $b9499708d6cce9b7$var$_identityQuaternion);\n        // Align the plane for current transform mode, axis and space.\n        $b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_v2);\n        switch(this.mode){\n            case \"translate\":\n            case \"scale\":\n                switch(this.axis){\n                    case \"X\":\n                        $b9499708d6cce9b7$var$_alignVector.copy(this.eye).cross($b9499708d6cce9b7$var$_v1);\n                        $b9499708d6cce9b7$var$_dirVector.copy($b9499708d6cce9b7$var$_v1).cross($b9499708d6cce9b7$var$_alignVector);\n                        break;\n                    case \"Y\":\n                        $b9499708d6cce9b7$var$_alignVector.copy(this.eye).cross($b9499708d6cce9b7$var$_v2);\n                        $b9499708d6cce9b7$var$_dirVector.copy($b9499708d6cce9b7$var$_v2).cross($b9499708d6cce9b7$var$_alignVector);\n                        break;\n                    case \"Z\":\n                        $b9499708d6cce9b7$var$_alignVector.copy(this.eye).cross($b9499708d6cce9b7$var$_v3);\n                        $b9499708d6cce9b7$var$_dirVector.copy($b9499708d6cce9b7$var$_v3).cross($b9499708d6cce9b7$var$_alignVector);\n                        break;\n                    case \"XY\":\n                        $b9499708d6cce9b7$var$_dirVector.copy($b9499708d6cce9b7$var$_v3);\n                        break;\n                    case \"YZ\":\n                        $b9499708d6cce9b7$var$_dirVector.copy($b9499708d6cce9b7$var$_v1);\n                        break;\n                    case \"XZ\":\n                        $b9499708d6cce9b7$var$_alignVector.copy($b9499708d6cce9b7$var$_v3);\n                        $b9499708d6cce9b7$var$_dirVector.copy($b9499708d6cce9b7$var$_v2);\n                        break;\n                    case \"XYZ\":\n                    case \"E\":\n                        $b9499708d6cce9b7$var$_dirVector.set(0, 0, 0);\n                        break;\n                }\n                break;\n            case \"rotate\":\n            default:\n                // special case for rotate\n                $b9499708d6cce9b7$var$_dirVector.set(0, 0, 0);\n        }\n        if ($b9499708d6cce9b7$var$_dirVector.length() === 0) // If in rotate mode, make the plane parallel to camera\n        this.quaternion.copy(this.cameraQuaternion);\n        else {\n            $b9499708d6cce9b7$var$_tempMatrix.lookAt($b9499708d6cce9b7$var$_tempVector.set(0, 0, 0), $b9499708d6cce9b7$var$_dirVector, $b9499708d6cce9b7$var$_alignVector);\n            this.quaternion.setFromRotationMatrix($b9499708d6cce9b7$var$_tempMatrix);\n        }\n        super.updateMatrixWorld(force);\n    }\n}\n\n});\n\n\n//# sourceMappingURL=distancecast.addf97b3.js.map\n","import {\n\tBoxGeometry,\n\tBufferGeometry,\n\tCylinderGeometry,\n\tDoubleSide,\n\tEuler,\n\tFloat32BufferAttribute,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tOctahedronGeometry,\n\tPlaneGeometry,\n\tQuaternion,\n\tRaycaster,\n\tSphereGeometry,\n\tTorusGeometry,\n\tVector3\n} from 'three';\n\nconst _raycaster = new Raycaster();\n\nconst _tempVector = new Vector3();\nconst _tempVector2 = new Vector3();\nconst _tempQuaternion = new Quaternion();\nconst _unit = {\n\tX: new Vector3( 1, 0, 0 ),\n\tY: new Vector3( 0, 1, 0 ),\n\tZ: new Vector3( 0, 0, 1 )\n};\n\nconst _changeEvent = { type: 'change' };\nconst _mouseDownEvent = { type: 'mouseDown' };\nconst _mouseUpEvent = { type: 'mouseUp', mode: null };\nconst _objectChangeEvent = { type: 'objectChange' };\n\nclass TransformControls extends Object3D {\n\n\tconstructor( camera, domElement ) {\n\n\t\tsuper();\n\n\t\tif ( domElement === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.TransformControls: The second parameter \"domElement\" is now mandatory.' );\n\t\t\tdomElement = document;\n\n\t\t}\n\n\t\tthis.isTransformControls = true;\n\n\t\tthis.visible = false;\n\t\tthis.domElement = domElement;\n\t\tthis.domElement.style.touchAction = 'none'; // disable touch scroll\n\n\t\tconst _gizmo = new TransformControlsGizmo();\n\t\tthis._gizmo = _gizmo;\n\t\tthis.add( _gizmo );\n\n\t\tconst _plane = new TransformControlsPlane();\n\t\tthis._plane = _plane;\n\t\tthis.add( _plane );\n\n\t\tconst scope = this;\n\n\t\t// Defined getter, setter and store for a property\n\t\tfunction defineProperty( propName, defaultValue ) {\n\n\t\t\tlet propValue = defaultValue;\n\n\t\t\tObject.defineProperty( scope, propName, {\n\n\t\t\t\tget: function () {\n\n\t\t\t\t\treturn propValue !== undefined ? propValue : defaultValue;\n\n\t\t\t\t},\n\n\t\t\t\tset: function ( value ) {\n\n\t\t\t\t\tif ( propValue !== value ) {\n\n\t\t\t\t\t\tpropValue = value;\n\t\t\t\t\t\t_plane[ propName ] = value;\n\t\t\t\t\t\t_gizmo[ propName ] = value;\n\n\t\t\t\t\t\tscope.dispatchEvent( { type: propName + '-changed', value: value } );\n\t\t\t\t\t\tscope.dispatchEvent( _changeEvent );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tscope[ propName ] = defaultValue;\n\t\t\t_plane[ propName ] = defaultValue;\n\t\t\t_gizmo[ propName ] = defaultValue;\n\n\t\t}\n\n\t\t// Define properties with getters/setter\n\t\t// Setting the defined property will automatically trigger change event\n\t\t// Defined properties are passed down to gizmo and plane\n\n\t\tdefineProperty( 'camera', camera );\n\t\tdefineProperty( 'object', undefined );\n\t\tdefineProperty( 'enabled', true );\n\t\tdefineProperty( 'axis', null );\n\t\tdefineProperty( 'mode', 'translate' );\n\t\tdefineProperty( 'translationSnap', null );\n\t\tdefineProperty( 'rotationSnap', null );\n\t\tdefineProperty( 'scaleSnap', null );\n\t\tdefineProperty( 'space', 'world' );\n\t\tdefineProperty( 'size', 1 );\n\t\tdefineProperty( 'dragging', false );\n\t\tdefineProperty( 'showX', true );\n\t\tdefineProperty( 'showY', true );\n\t\tdefineProperty( 'showZ', true );\n\n\t\t// Reusable utility variables\n\n\t\tconst worldPosition = new Vector3();\n\t\tconst worldPositionStart = new Vector3();\n\t\tconst worldQuaternion = new Quaternion();\n\t\tconst worldQuaternionStart = new Quaternion();\n\t\tconst cameraPosition = new Vector3();\n\t\tconst cameraQuaternion = new Quaternion();\n\t\tconst pointStart = new Vector3();\n\t\tconst pointEnd = new Vector3();\n\t\tconst rotationAxis = new Vector3();\n\t\tconst rotationAngle = 0;\n\t\tconst eye = new Vector3();\n\n\t\t// TODO: remove properties unused in plane and gizmo\n\n\t\tdefineProperty( 'worldPosition', worldPosition );\n\t\tdefineProperty( 'worldPositionStart', worldPositionStart );\n\t\tdefineProperty( 'worldQuaternion', worldQuaternion );\n\t\tdefineProperty( 'worldQuaternionStart', worldQuaternionStart );\n\t\tdefineProperty( 'cameraPosition', cameraPosition );\n\t\tdefineProperty( 'cameraQuaternion', cameraQuaternion );\n\t\tdefineProperty( 'pointStart', pointStart );\n\t\tdefineProperty( 'pointEnd', pointEnd );\n\t\tdefineProperty( 'rotationAxis', rotationAxis );\n\t\tdefineProperty( 'rotationAngle', rotationAngle );\n\t\tdefineProperty( 'eye', eye );\n\n\t\tthis._offset = new Vector3();\n\t\tthis._startNorm = new Vector3();\n\t\tthis._endNorm = new Vector3();\n\t\tthis._cameraScale = new Vector3();\n\n\t\tthis._parentPosition = new Vector3();\n\t\tthis._parentQuaternion = new Quaternion();\n\t\tthis._parentQuaternionInv = new Quaternion();\n\t\tthis._parentScale = new Vector3();\n\n\t\tthis._worldScaleStart = new Vector3();\n\t\tthis._worldQuaternionInv = new Quaternion();\n\t\tthis._worldScale = new Vector3();\n\n\t\tthis._positionStart = new Vector3();\n\t\tthis._quaternionStart = new Quaternion();\n\t\tthis._scaleStart = new Vector3();\n\n\t\tthis._getPointer = getPointer.bind( this );\n\t\tthis._onPointerDown = onPointerDown.bind( this );\n\t\tthis._onPointerHover = onPointerHover.bind( this );\n\t\tthis._onPointerMove = onPointerMove.bind( this );\n\t\tthis._onPointerUp = onPointerUp.bind( this );\n\n\t\tthis.domElement.addEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.addEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.addEventListener( 'pointerup', this._onPointerUp );\n\n\t}\n\n\t// updateMatrixWorld  updates key transformation variables\n\tupdateMatrixWorld() {\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\tif ( this.object.parent === null ) {\n\n\t\t\t\tconsole.error( 'TransformControls: The attached 3D object must be a part of the scene graph.' );\n\n\t\t\t} else {\n\n\t\t\t\tthis.object.parent.matrixWorld.decompose( this._parentPosition, this._parentQuaternion, this._parentScale );\n\n\t\t\t}\n\n\t\t\tthis.object.matrixWorld.decompose( this.worldPosition, this.worldQuaternion, this._worldScale );\n\n\t\t\tthis._parentQuaternionInv.copy( this._parentQuaternion ).invert();\n\t\t\tthis._worldQuaternionInv.copy( this.worldQuaternion ).invert();\n\n\t\t}\n\n\t\tthis.camera.updateMatrixWorld();\n\t\tthis.camera.matrixWorld.decompose( this.cameraPosition, this.cameraQuaternion, this._cameraScale );\n\n\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\tthis.camera.getWorldDirection( this.eye ).negate();\n\n\t\t} else {\n\n\t\t\tthis.eye.copy( this.cameraPosition ).sub( this.worldPosition ).normalize();\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( this );\n\n\t}\n\n\tpointerHover( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true ) return;\n\n\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst intersect = intersectObjectWithRay( this._gizmo.picker[ this.mode ], _raycaster );\n\n\t\tif ( intersect ) {\n\n\t\t\tthis.axis = intersect.object.name;\n\n\t\t} else {\n\n\t\t\tthis.axis = null;\n\n\t\t}\n\n\t}\n\n\tpointerDown( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true || pointer.button !== 0 ) return;\n\n\t\tif ( this.axis !== null ) {\n\n\t\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\t\tif ( planeIntersect ) {\n\n\t\t\t\tthis.object.updateMatrixWorld();\n\t\t\t\tthis.object.parent.updateMatrixWorld();\n\n\t\t\t\tthis._positionStart.copy( this.object.position );\n\t\t\t\tthis._quaternionStart.copy( this.object.quaternion );\n\t\t\t\tthis._scaleStart.copy( this.object.scale );\n\n\t\t\t\tthis.object.matrixWorld.decompose( this.worldPositionStart, this.worldQuaternionStart, this._worldScaleStart );\n\n\t\t\t\tthis.pointStart.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\t\t}\n\n\t\t\tthis.dragging = true;\n\t\t\t_mouseDownEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseDownEvent );\n\n\t\t}\n\n\t}\n\n\tpointerMove( pointer ) {\n\n\t\tconst axis = this.axis;\n\t\tconst mode = this.mode;\n\t\tconst object = this.object;\n\t\tlet space = this.space;\n\n\t\tif ( mode === 'scale' ) {\n\n\t\t\tspace = 'local';\n\n\t\t} else if ( axis === 'E' || axis === 'XYZE' || axis === 'XYZ' ) {\n\n\t\t\tspace = 'world';\n\n\t\t}\n\n\t\tif ( object === undefined || axis === null || this.dragging === false || pointer.button !== - 1 ) return;\n\n\t\t_raycaster.setFromCamera( pointer, this.camera );\n\n\t\tconst planeIntersect = intersectObjectWithRay( this._plane, _raycaster, true );\n\n\t\tif ( ! planeIntersect ) return;\n\n\t\tthis.pointEnd.copy( planeIntersect.point ).sub( this.worldPositionStart );\n\n\t\tif ( mode === 'translate' ) {\n\n\t\t\t// Apply translate\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t}\n\n\t\t\tif ( axis.indexOf( 'X' ) === - 1 ) this._offset.x = 0;\n\t\t\tif ( axis.indexOf( 'Y' ) === - 1 ) this._offset.y = 0;\n\t\t\tif ( axis.indexOf( 'Z' ) === - 1 ) this._offset.z = 0;\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\tthis._offset.applyQuaternion( this._quaternionStart ).divide( this._parentScale );\n\n\t\t\t} else {\n\n\t\t\t\tthis._offset.applyQuaternion( this._parentQuaternionInv ).divide( this._parentScale );\n\n\t\t\t}\n\n\t\t\tobject.position.copy( this._offset ).add( this._positionStart );\n\n\t\t\t// Apply translation snap\n\n\t\t\tif ( this.translationSnap ) {\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\tobject.position.applyQuaternion( _tempQuaternion.copy( this._quaternionStart ).invert() );\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.position.applyQuaternion( this._quaternionStart );\n\n\t\t\t\t}\n\n\t\t\t\tif ( space === 'world' ) {\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.add( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.sub( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'scale' ) {\n\n\t\t\tif ( axis.search( 'XYZ' ) !== - 1 ) {\n\n\t\t\t\tlet d = this.pointEnd.length() / this.pointStart.length();\n\n\t\t\t\tif ( this.pointEnd.dot( this.pointStart ) < 0 ) d *= - 1;\n\n\t\t\t\t_tempVector2.set( d, d, d );\n\n\t\t\t} else {\n\n\t\t\t\t_tempVector.copy( this.pointStart );\n\t\t\t\t_tempVector2.copy( this.pointEnd );\n\n\t\t\t\t_tempVector.applyQuaternion( this._worldQuaternionInv );\n\t\t\t\t_tempVector2.applyQuaternion( this._worldQuaternionInv );\n\n\t\t\t\t_tempVector2.divide( _tempVector );\n\n\t\t\t\tif ( axis.search( 'X' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.x = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.y = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.z = 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Apply scale\n\n\t\t\tobject.scale.copy( this._scaleStart ).multiply( _tempVector2 );\n\n\t\t\tif ( this.scaleSnap ) {\n\n\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.x = Math.round( object.scale.x / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.y = Math.round( object.scale.y / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.z = Math.round( object.scale.z / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'rotate' ) {\n\n\t\t\tthis._offset.copy( this.pointEnd ).sub( this.pointStart );\n\n\t\t\tconst ROTATION_SPEED = 20 / this.worldPosition.distanceTo( _tempVector.setFromMatrixPosition( this.camera.matrixWorld ) );\n\n\t\t\tif ( axis === 'E' ) {\n\n\t\t\t\tthis.rotationAxis.copy( this.eye );\n\t\t\t\tthis.rotationAngle = this.pointEnd.angleTo( this.pointStart );\n\n\t\t\t\tthis._startNorm.copy( this.pointStart ).normalize();\n\t\t\t\tthis._endNorm.copy( this.pointEnd ).normalize();\n\n\t\t\t\tthis.rotationAngle *= ( this._endNorm.cross( this._startNorm ).dot( this.eye ) < 0 ? 1 : - 1 );\n\n\t\t\t} else if ( axis === 'XYZE' ) {\n\n\t\t\t\tthis.rotationAxis.copy( this._offset ).cross( this.eye ).normalize();\n\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.copy( this.rotationAxis ).cross( this.eye ) ) * ROTATION_SPEED;\n\n\t\t\t} else if ( axis === 'X' || axis === 'Y' || axis === 'Z' ) {\n\n\t\t\t\tthis.rotationAxis.copy( _unit[ axis ] );\n\n\t\t\t\t_tempVector.copy( _unit[ axis ] );\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tthis.rotationAngle = this._offset.dot( _tempVector.cross( this.eye ).normalize() ) * ROTATION_SPEED;\n\n\t\t\t}\n\n\t\t\t// Apply rotation snap\n\n\t\t\tif ( this.rotationSnap ) this.rotationAngle = Math.round( this.rotationAngle / this.rotationSnap ) * this.rotationSnap;\n\n\t\t\t// Apply rotate\n\t\t\tif ( space === 'local' && axis !== 'E' && axis !== 'XYZE' ) {\n\n\t\t\t\tobject.quaternion.copy( this._quaternionStart );\n\t\t\t\tobject.quaternion.multiply( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\tthis.rotationAxis.applyQuaternion( this._parentQuaternionInv );\n\t\t\t\tobject.quaternion.copy( _tempQuaternion.setFromAxisAngle( this.rotationAxis, this.rotationAngle ) );\n\t\t\t\tobject.quaternion.multiply( this._quaternionStart ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( _changeEvent );\n\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t}\n\n\tpointerUp( pointer ) {\n\n\t\tif ( pointer.button !== 0 ) return;\n\n\t\tif ( this.dragging && ( this.axis !== null ) ) {\n\n\t\t\t_mouseUpEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( _mouseUpEvent );\n\n\t\t}\n\n\t\tthis.dragging = false;\n\t\tthis.axis = null;\n\n\t}\n\n\tdispose() {\n\n\t\tthis.domElement.removeEventListener( 'pointerdown', this._onPointerDown );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerHover );\n\t\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\t\tthis.domElement.removeEventListener( 'pointerup', this._onPointerUp );\n\n\t\tthis.traverse( function ( child ) {\n\n\t\t\tif ( child.geometry ) child.geometry.dispose();\n\t\t\tif ( child.material ) child.material.dispose();\n\n\t\t} );\n\n\t}\n\n\t// Set current object\n\tattach( object ) {\n\n\t\tthis.object = object;\n\t\tthis.visible = true;\n\n\t\treturn this;\n\n\t}\n\n\t// Detach from object\n\tdetach() {\n\n\t\tthis.object = undefined;\n\t\tthis.visible = false;\n\t\tthis.axis = null;\n\n\t\treturn this;\n\n\t}\n\n\treset() {\n\n\t\tif ( ! this.enabled ) return;\n\n\t\tif ( this.dragging ) {\n\n\t\t\tthis.object.position.copy( this._positionStart );\n\t\t\tthis.object.quaternion.copy( this._quaternionStart );\n\t\t\tthis.object.scale.copy( this._scaleStart );\n\n\t\t\tthis.dispatchEvent( _changeEvent );\n\t\t\tthis.dispatchEvent( _objectChangeEvent );\n\n\t\t\tthis.pointStart.copy( this.pointEnd );\n\n\t\t}\n\n\t}\n\n\tgetRaycaster() {\n\n\t\treturn _raycaster;\n\n\t}\n\n\t// TODO: deprecate\n\n\tgetMode() {\n\n\t\treturn this.mode;\n\n\t}\n\n\tsetMode( mode ) {\n\n\t\tthis.mode = mode;\n\n\t}\n\n\tsetTranslationSnap( translationSnap ) {\n\n\t\tthis.translationSnap = translationSnap;\n\n\t}\n\n\tsetRotationSnap( rotationSnap ) {\n\n\t\tthis.rotationSnap = rotationSnap;\n\n\t}\n\n\tsetScaleSnap( scaleSnap ) {\n\n\t\tthis.scaleSnap = scaleSnap;\n\n\t}\n\n\tsetSize( size ) {\n\n\t\tthis.size = size;\n\n\t}\n\n\tsetSpace( space ) {\n\n\t\tthis.space = space;\n\n\t}\n\n}\n\n// mouse / touch event handlers\n\nfunction getPointer( event ) {\n\n\tif ( this.domElement.ownerDocument.pointerLockElement ) {\n\n\t\treturn {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tbutton: event.button\n\t\t};\n\n\t} else {\n\n\t\tconst rect = this.domElement.getBoundingClientRect();\n\n\t\treturn {\n\t\t\tx: ( event.clientX - rect.left ) / rect.width * 2 - 1,\n\t\t\ty: - ( event.clientY - rect.top ) / rect.height * 2 + 1,\n\t\t\tbutton: event.button\n\t\t};\n\n\t}\n\n}\n\nfunction onPointerHover( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tswitch ( event.pointerType ) {\n\n\t\tcase 'mouse':\n\t\tcase 'pen':\n\t\t\tthis.pointerHover( this._getPointer( event ) );\n\t\t\tbreak;\n\n\t}\n\n}\n\nfunction onPointerDown( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tif ( ! document.pointerLockElement ) {\n\n\t\tthis.domElement.setPointerCapture( event.pointerId );\n\n\t}\n\n\tthis.domElement.addEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerHover( this._getPointer( event ) );\n\tthis.pointerDown( this._getPointer( event ) );\n\n}\n\nfunction onPointerMove( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.pointerMove( this._getPointer( event ) );\n\n}\n\nfunction onPointerUp( event ) {\n\n\tif ( ! this.enabled ) return;\n\n\tthis.domElement.releasePointerCapture( event.pointerId );\n\n\tthis.domElement.removeEventListener( 'pointermove', this._onPointerMove );\n\n\tthis.pointerUp( this._getPointer( event ) );\n\n}\n\nfunction intersectObjectWithRay( object, raycaster, includeInvisible ) {\n\n\tconst allIntersections = raycaster.intersectObject( object, true );\n\n\tfor ( let i = 0; i < allIntersections.length; i ++ ) {\n\n\t\tif ( allIntersections[ i ].object.visible || includeInvisible ) {\n\n\t\t\treturn allIntersections[ i ];\n\n\t\t}\n\n\t}\n\n\treturn false;\n\n}\n\n//\n\n// Reusable utility variables\n\nconst _tempEuler = new Euler();\nconst _alignVector = new Vector3( 0, 1, 0 );\nconst _zeroVector = new Vector3( 0, 0, 0 );\nconst _lookAtMatrix = new Matrix4();\nconst _tempQuaternion2 = new Quaternion();\nconst _identityQuaternion = new Quaternion();\nconst _dirVector = new Vector3();\nconst _tempMatrix = new Matrix4();\n\nconst _unitX = new Vector3( 1, 0, 0 );\nconst _unitY = new Vector3( 0, 1, 0 );\nconst _unitZ = new Vector3( 0, 0, 1 );\n\nconst _v1 = new Vector3();\nconst _v2 = new Vector3();\nconst _v3 = new Vector3();\n\nclass TransformControlsGizmo extends Object3D {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.isTransformControlsGizmo = true;\n\n\t\tthis.type = 'TransformControlsGizmo';\n\n\t\t// shared materials\n\n\t\tconst gizmoMaterial = new MeshBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\tconst gizmoLineMaterial = new LineBasicMaterial( {\n\t\t\tdepthTest: false,\n\t\t\tdepthWrite: false,\n\t\t\tfog: false,\n\t\t\ttoneMapped: false,\n\t\t\ttransparent: true\n\t\t} );\n\n\t\t// Make unique material for each axis/color\n\n\t\tconst matInvisible = gizmoMaterial.clone();\n\t\tmatInvisible.opacity = 0.15;\n\n\t\tconst matHelper = gizmoLineMaterial.clone();\n\t\tmatHelper.opacity = 0.5;\n\n\t\tconst matRed = gizmoMaterial.clone();\n\t\tmatRed.color.setHex( 0xff0000 );\n\n\t\tconst matGreen = gizmoMaterial.clone();\n\t\tmatGreen.color.setHex( 0x00ff00 );\n\n\t\tconst matBlue = gizmoMaterial.clone();\n\t\tmatBlue.color.setHex( 0x0000ff );\n\n\t\tconst matRedTransparent = gizmoMaterial.clone();\n\t\tmatRedTransparent.color.setHex( 0xff0000 );\n\t\tmatRedTransparent.opacity = 0.5;\n\n\t\tconst matGreenTransparent = gizmoMaterial.clone();\n\t\tmatGreenTransparent.color.setHex( 0x00ff00 );\n\t\tmatGreenTransparent.opacity = 0.5;\n\n\t\tconst matBlueTransparent = gizmoMaterial.clone();\n\t\tmatBlueTransparent.color.setHex( 0x0000ff );\n\t\tmatBlueTransparent.opacity = 0.5;\n\n\t\tconst matWhiteTransparent = gizmoMaterial.clone();\n\t\tmatWhiteTransparent.opacity = 0.25;\n\n\t\tconst matYellowTransparent = gizmoMaterial.clone();\n\t\tmatYellowTransparent.color.setHex( 0xffff00 );\n\t\tmatYellowTransparent.opacity = 0.25;\n\n\t\tconst matYellow = gizmoMaterial.clone();\n\t\tmatYellow.color.setHex( 0xffff00 );\n\n\t\tconst matGray = gizmoMaterial.clone();\n\t\tmatGray.color.setHex( 0x787878 );\n\n\t\t// reusable geometry\n\n\t\tconst arrowGeometry = new CylinderGeometry( 0, 0.04, 0.1, 12 );\n\t\tarrowGeometry.translate( 0, 0.05, 0 );\n\n\t\tconst scaleHandleGeometry = new BoxGeometry( 0.08, 0.08, 0.08 );\n\t\tscaleHandleGeometry.translate( 0, 0.04, 0 );\n\n\t\tconst lineGeometry = new BufferGeometry();\n\t\tlineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0,\t1, 0, 0 ], 3 ) );\n\n\t\tconst lineGeometry2 = new CylinderGeometry( 0.0075, 0.0075, 0.5, 3 );\n\t\tlineGeometry2.translate( 0, 0.25, 0 );\n\n\t\tfunction CircleGeometry( radius, arc ) {\n\n\t\t\tconst geometry = new TorusGeometry( radius, 0.0075, 3, 64, arc * Math.PI * 2 );\n\t\t\tgeometry.rotateY( Math.PI / 2 );\n\t\t\tgeometry.rotateX( Math.PI / 2 );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n\t\tfunction TranslateHelperGeometry() {\n\n\t\t\tconst geometry = new BufferGeometry();\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 1, 1, 1 ], 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\t// Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n\t\tconst gizmoTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, - 0.5, 0 ], [ Math.PI, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), null, [ Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.1, 0 ), matWhiteTransparent.clone() ), [ 0, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent.clone() ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent.clone() ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent.clone() ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerTranslate = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.2, 0 ), matInvisible ) ]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperTranslate = {\n\t\t\tSTART: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tEND: [\n\t\t\t\t[ new Mesh( new OctahedronGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tDELTA: [\n\t\t\t\t[ new Line( TranslateHelperGeometry(), matHelper ), null, null, null, 'helper' ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 1 ), matGray ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matRed ) ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matGreen ), null, [ 0, 0, - Math.PI / 2 ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.5, 0.5 ), matBlue ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( CircleGeometry( 0.75, 1 ), matYellowTransparent ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t\t]\n\t\t};\n\n\t\tconst helperRotate = {\n\t\t\tAXIS: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\tconst pickerRotate = {\n\t\t\tXYZE: [\n\t\t\t\t[ new Mesh( new SphereGeometry( 0.25, 10, 8 ), matInvisible ) ]\n\t\t\t],\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, - Math.PI / 2, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.5, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t],\n\t\t\tE: [\n\t\t\t\t[ new Mesh( new TorusGeometry( 0.75, 0.1, 2, 24 ), matInvisible ) ]\n\t\t\t]\n\t\t};\n\n\t\tconst gizmoScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matRed ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ - 0.5, 0, 0 ], [ 0, 0, Math.PI / 2 ]],\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, 0.5, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matGreen ) ],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, - 0.5, 0 ], [ 0, 0, Math.PI ]],\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( lineGeometry2, matBlue ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, - 0.5 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matBlueTransparent ), [ 0.15, 0.15, 0 ]]\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matRedTransparent ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]]\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.15, 0.15, 0.01 ), matGreenTransparent ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.1, 0.1, 0.1 ), matWhiteTransparent.clone() ) ],\n\t\t\t]\n\t\t};\n\n\t\tconst pickerScale = {\n\t\t\tX: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0.3, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ - 0.3, 0, 0 ], [ 0, 0, Math.PI / 2 ]]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0.3, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, - 0.3, 0 ], [ 0, 0, Math.PI ]]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, 0.3 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t\t[ new Mesh( new CylinderGeometry( 0.2, 0, 0.6, 4 ), matInvisible ), [ 0, 0, - 0.3 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t\t],\n\t\t\tXY: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0.15, 0 ]],\n\t\t\t],\n\t\t\tYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]],\n\t\t\t],\n\t\t\tXZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.01 ), matInvisible ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t],\n\t\t\tXYZ: [\n\t\t\t\t[ new Mesh( new BoxGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 0, 0 ]],\n\t\t\t]\n\t\t};\n\n\t\tconst helperScale = {\n\t\t\tX: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tY: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t],\n\t\t\tZ: [\n\t\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t\t]\n\t\t};\n\n\t\t// Creates an Object3D with gizmos described in custom hierarchy definition.\n\n\t\tfunction setupGizmo( gizmoMap ) {\n\n\t\t\tconst gizmo = new Object3D();\n\n\t\t\tfor ( const name in gizmoMap ) {\n\n\t\t\t\tfor ( let i = gizmoMap[ name ].length; i --; ) {\n\n\t\t\t\t\tconst object = gizmoMap[ name ][ i ][ 0 ].clone();\n\t\t\t\t\tconst position = gizmoMap[ name ][ i ][ 1 ];\n\t\t\t\t\tconst rotation = gizmoMap[ name ][ i ][ 2 ];\n\t\t\t\t\tconst scale = gizmoMap[ name ][ i ][ 3 ];\n\t\t\t\t\tconst tag = gizmoMap[ name ][ i ][ 4 ];\n\n\t\t\t\t\t// name and tag properties are essential for picking and updating logic.\n\t\t\t\t\tobject.name = name;\n\t\t\t\t\tobject.tag = tag;\n\n\t\t\t\t\tif ( position ) {\n\n\t\t\t\t\t\tobject.position.set( position[ 0 ], position[ 1 ], position[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( rotation ) {\n\n\t\t\t\t\t\tobject.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( scale ) {\n\n\t\t\t\t\t\tobject.scale.set( scale[ 0 ], scale[ 1 ], scale[ 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.updateMatrix();\n\n\t\t\t\t\tconst tempGeometry = object.geometry.clone();\n\t\t\t\t\ttempGeometry.applyMatrix4( object.matrix );\n\t\t\t\t\tobject.geometry = tempGeometry;\n\t\t\t\t\tobject.renderOrder = Infinity;\n\n\t\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t\t\tobject.rotation.set( 0, 0, 0 );\n\t\t\t\t\tobject.scale.set( 1, 1, 1 );\n\n\t\t\t\t\tgizmo.add( object );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn gizmo;\n\n\t\t}\n\n\t\t// Gizmo creation\n\n\t\tthis.gizmo = {};\n\t\tthis.picker = {};\n\t\tthis.helper = {};\n\n\t\tthis.add( this.gizmo[ 'translate' ] = setupGizmo( gizmoTranslate ) );\n\t\tthis.add( this.gizmo[ 'rotate' ] = setupGizmo( gizmoRotate ) );\n\t\tthis.add( this.gizmo[ 'scale' ] = setupGizmo( gizmoScale ) );\n\t\tthis.add( this.picker[ 'translate' ] = setupGizmo( pickerTranslate ) );\n\t\tthis.add( this.picker[ 'rotate' ] = setupGizmo( pickerRotate ) );\n\t\tthis.add( this.picker[ 'scale' ] = setupGizmo( pickerScale ) );\n\t\tthis.add( this.helper[ 'translate' ] = setupGizmo( helperTranslate ) );\n\t\tthis.add( this.helper[ 'rotate' ] = setupGizmo( helperRotate ) );\n\t\tthis.add( this.helper[ 'scale' ] = setupGizmo( helperScale ) );\n\n\t\t// Pickers should be hidden always\n\n\t\tthis.picker[ 'translate' ].visible = false;\n\t\tthis.picker[ 'rotate' ].visible = false;\n\t\tthis.picker[ 'scale' ].visible = false;\n\n\t}\n\n\t// updateMatrixWorld will update transformations and appearance of individual handles\n\n\tupdateMatrixWorld( force ) {\n\n\t\tconst space = ( this.mode === 'scale' ) ? 'local' : this.space; // scale always oriented to local rotation\n\n\t\tconst quaternion = ( space === 'local' ) ? this.worldQuaternion : _identityQuaternion;\n\n\t\t// Show only gizmos for current transform mode\n\n\t\tthis.gizmo[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.gizmo[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.gizmo[ 'scale' ].visible = this.mode === 'scale';\n\n\t\tthis.helper[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.helper[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.helper[ 'scale' ].visible = this.mode === 'scale';\n\n\n\t\tlet handles = [];\n\t\thandles = handles.concat( this.picker[ this.mode ].children );\n\t\thandles = handles.concat( this.gizmo[ this.mode ].children );\n\t\thandles = handles.concat( this.helper[ this.mode ].children );\n\n\t\tfor ( let i = 0; i < handles.length; i ++ ) {\n\n\t\t\tconst handle = handles[ i ];\n\n\t\t\t// hide aligned to camera\n\n\t\t\thandle.visible = true;\n\t\t\thandle.rotation.set( 0, 0, 0 );\n\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\tlet factor;\n\n\t\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\t\tfactor = ( this.camera.top - this.camera.bottom ) / this.camera.zoom;\n\n\t\t\t} else {\n\n\t\t\t\tfactor = this.worldPosition.distanceTo( this.cameraPosition ) * Math.min( 1.9 * Math.tan( Math.PI * this.camera.fov / 360 ) / this.camera.zoom, 7 );\n\n\t\t\t}\n\n\t\t\thandle.scale.set( 1, 1, 1 ).multiplyScalar( factor * this.size / 4 );\n\n\t\t\t// TODO: simplify helpers and consider decoupling from gizmo\n\n\t\t\tif ( handle.tag === 'helper' ) {\n\n\t\t\t\thandle.visible = false;\n\n\t\t\t\tif ( handle.name === 'AXIS' ) {\n\n\t\t\t\t\thandle.visible = !! this.axis;\n\n\t\t\t\t\tif ( this.axis === 'X' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Y' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, 0, Math.PI / 2 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Z' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( _tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'XYZE' ) {\n\n\t\t\t\t\t\t_tempQuaternion.setFromEuler( _tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\t_alignVector.copy( this.rotationAxis );\n\t\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( _zeroVector, _alignVector, _unitY ) );\n\t\t\t\t\t\thandle.quaternion.multiply( _tempQuaternion );\n\t\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'E' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else if ( handle.name === 'START' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'END' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPosition );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'DELTA' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.quaternion.copy( this.worldQuaternionStart );\n\t\t\t\t\t_tempVector.set( 1e-10, 1e-10, 1e-10 ).add( this.worldPositionStart ).sub( this.worldPosition ).multiplyScalar( - 1 );\n\t\t\t\t\t_tempVector.applyQuaternion( this.worldQuaternionStart.clone().invert() );\n\t\t\t\t\thandle.scale.copy( _tempVector );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\t\t\tif ( this.dragging ) {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis ) {\n\n\t\t\t\t\t\thandle.visible = this.axis.search( handle.name ) !== - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// If updating helper, skip rest of the loop\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// Align handles to current local or world rotation\n\n\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\tif ( this.mode === 'translate' || this.mode === 'scale' ) {\n\n\t\t\t\t// Hide translate and scale axis facing the camera\n\n\t\t\t\tconst AXIS_HIDE_THRESHOLD = 0.99;\n\t\t\t\tconst PLANE_HIDE_THRESHOLD = 0.2;\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XY' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'YZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XZ' ) {\n\n\t\t\t\t\tif ( Math.abs( _alignVector.copy( _unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_THRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.mode === 'rotate' ) {\n\n\t\t\t\t// Align handles to current local or world rotation\n\n\t\t\t\t_tempQuaternion2.copy( quaternion );\n\t\t\t\t_alignVector.copy( this.eye ).applyQuaternion( _tempQuaternion.copy( quaternion ).invert() );\n\n\t\t\t\tif ( handle.name.search( 'E' ) !== - 1 ) {\n\n\t\t\t\t\thandle.quaternion.setFromRotationMatrix( _lookAtMatrix.lookAt( this.eye, _zeroVector, _unitY ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitX, Math.atan2( - _alignVector.y, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitY, Math.atan2( _alignVector.x, _alignVector.z ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\t_tempQuaternion.setFromAxisAngle( _unitZ, Math.atan2( _alignVector.y, _alignVector.x ) );\n\t\t\t\t\t_tempQuaternion.multiplyQuaternions( _tempQuaternion2, _tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( _tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Hide disabled axes\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'X' ) === - 1 || this.showX );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Y' ) === - 1 || this.showY );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Z' ) === - 1 || this.showZ );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'E' ) === - 1 || ( this.showX && this.showY && this.showZ ) );\n\n\t\t\t// highlight selected axis\n\n\t\t\thandle.material._color = handle.material._color || handle.material.color.clone();\n\t\t\thandle.material._opacity = handle.material._opacity || handle.material.opacity;\n\n\t\t\thandle.material.color.copy( handle.material._color );\n\t\t\thandle.material.opacity = handle.material._opacity;\n\n\t\t\tif ( this.enabled && this.axis ) {\n\n\t\t\t\tif ( handle.name === this.axis ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t} else if ( this.axis.split( '' ).some( function ( a ) {\n\n\t\t\t\t\treturn handle.name === a;\n\n\t\t\t\t} ) ) {\n\n\t\t\t\t\thandle.material.color.setHex( 0xffff00 );\n\t\t\t\t\thandle.material.opacity = 1.0;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\n//\n\nclass TransformControlsPlane extends Mesh {\n\n\tconstructor() {\n\n\t\tsuper(\n\t\t\tnew PlaneGeometry( 100000, 100000, 2, 2 ),\n\t\t\tnew MeshBasicMaterial( { visible: false, wireframe: true, side: DoubleSide, transparent: true, opacity: 0.1, toneMapped: false } )\n\t\t);\n\n\t\tthis.isTransformControlsPlane = true;\n\n\t\tthis.type = 'TransformControlsPlane';\n\n\t}\n\n\tupdateMatrixWorld( force ) {\n\n\t\tlet space = this.space;\n\n\t\tthis.position.copy( this.worldPosition );\n\n\t\tif ( this.mode === 'scale' ) space = 'local'; // scale always oriented to local rotation\n\n\t\t_v1.copy( _unitX ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v2.copy( _unitY ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\t\t_v3.copy( _unitZ ).applyQuaternion( space === 'local' ? this.worldQuaternion : _identityQuaternion );\n\n\t\t// Align the plane for current transform mode, axis and space.\n\n\t\t_alignVector.copy( _v2 );\n\n\t\tswitch ( this.mode ) {\n\n\t\t\tcase 'translate':\n\t\t\tcase 'scale':\n\t\t\t\tswitch ( this.axis ) {\n\n\t\t\t\t\tcase 'X':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v1 );\n\t\t\t\t\t\t_dirVector.copy( _v1 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v2 );\n\t\t\t\t\t\t_dirVector.copy( _v2 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Z':\n\t\t\t\t\t\t_alignVector.copy( this.eye ).cross( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v3 ).cross( _alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XY':\n\t\t\t\t\t\t_dirVector.copy( _v3 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YZ':\n\t\t\t\t\t\t_dirVector.copy( _v1 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XZ':\n\t\t\t\t\t\t_alignVector.copy( _v3 );\n\t\t\t\t\t\t_dirVector.copy( _v2 );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XYZ':\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\t_dirVector.set( 0, 0, 0 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'rotate':\n\t\t\tdefault:\n\t\t\t\t// special case for rotate\n\t\t\t\t_dirVector.set( 0, 0, 0 );\n\n\t\t}\n\n\t\tif ( _dirVector.length() === 0 ) {\n\n\t\t\t// If in rotate mode, make the plane parallel to camera\n\t\t\tthis.quaternion.copy( this.cameraQuaternion );\n\n\t\t} else {\n\n\t\t\t_tempMatrix.lookAt( _tempVector.set( 0, 0, 0 ), _dirVector, _alignVector );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( _tempMatrix );\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n}\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };\n"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$b9499708d6cce9b7$export$198e80c116632110","set","s","enumerable","configurable","$ilwiq","$b9499708d6cce9b7$var$_raycaster","Raycaster","$b9499708d6cce9b7$var$_tempVector","Vector3","$b9499708d6cce9b7$var$_tempVector2","$b9499708d6cce9b7$var$_tempQuaternion","Quaternion","$b9499708d6cce9b7$var$_unit","X","Y","Z","$b9499708d6cce9b7$var$_changeEvent","type","$b9499708d6cce9b7$var$_mouseDownEvent","$b9499708d6cce9b7$var$_mouseUpEvent","mode","$b9499708d6cce9b7$var$_objectChangeEvent","Object3D","constructor","camera","domElement","undefined","console","warn","document","isTransformControls","visible","style","touchAction","_gizmo","$b9499708d6cce9b7$export$c2ae06a69fb9d31f","add","_plane","$b9499708d6cce9b7$export$c0ab73045548e2ca","scope","propName","defaultValue","propValue","value","dispatchEvent","worldPosition","worldPositionStart","worldQuaternion","worldQuaternionStart","cameraPosition","cameraQuaternion","pointStart","pointEnd","rotationAxis","eye","_offset","_startNorm","_endNorm","_cameraScale","_parentPosition","_parentQuaternion","_parentQuaternionInv","_parentScale","_worldScaleStart","_worldQuaternionInv","_worldScale","_positionStart","_quaternionStart","_scaleStart","_getPointer","$b9499708d6cce9b7$var$getPointer","bind","_onPointerDown","$b9499708d6cce9b7$var$onPointerDown","_onPointerHover","$b9499708d6cce9b7$var$onPointerHover","_onPointerMove","$b9499708d6cce9b7$var$onPointerMove","_onPointerUp","$b9499708d6cce9b7$var$onPointerUp","addEventListener","updateMatrixWorld","object","parent","error","matrixWorld","decompose","copy","invert","isOrthographicCamera","getWorldDirection","negate","sub","normalize","pointerHover","pointer","dragging","setFromCamera","intersect","$b9499708d6cce9b7$var$intersectObjectWithRay","picker","axis","name","pointerDown","button","planeIntersect","position","quaternion","scale","point","pointerMove","space","applyQuaternion","indexOf","x","y","z","divide","translationSnap","search","Math","round","setFromMatrixPosition","d","length","dot","multiply","scaleSnap","ROTATION_SPEED","distanceTo","rotationAngle","angleTo","cross","rotationSnap","setFromAxisAngle","pointerUp","dispose","removeEventListener","traverse","child","geometry","material","attach","detach","reset","enabled","getRaycaster","getMode","setMode","setTranslationSnap","setRotationSnap","setScaleSnap","setSize","size","setSpace","event","ownerDocument","pointerLockElement","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","pointerType","setPointerCapture","pointerId","releasePointerCapture","raycaster","includeInvisible","allIntersections","intersectObject","i","$b9499708d6cce9b7$var$_tempEuler","Euler","$b9499708d6cce9b7$var$_alignVector","$b9499708d6cce9b7$var$_zeroVector","$b9499708d6cce9b7$var$_lookAtMatrix","Matrix4","$b9499708d6cce9b7$var$_tempQuaternion2","$b9499708d6cce9b7$var$_identityQuaternion","$b9499708d6cce9b7$var$_dirVector","$b9499708d6cce9b7$var$_tempMatrix","$b9499708d6cce9b7$var$_unitX","$b9499708d6cce9b7$var$_unitY","$b9499708d6cce9b7$var$_unitZ","$b9499708d6cce9b7$var$_v1","$b9499708d6cce9b7$var$_v2","$b9499708d6cce9b7$var$_v3","isTransformControlsGizmo","gizmoMaterial","MeshBasicMaterial","depthTest","depthWrite","fog","toneMapped","transparent","gizmoLineMaterial","LineBasicMaterial","matInvisible","clone","opacity","matHelper","matRed","color","setHex","matGreen","matBlue","matRedTransparent","matGreenTransparent","matBlueTransparent","matWhiteTransparent","matYellowTransparent","matYellow","matGray","arrowGeometry","CylinderGeometry","translate","scaleHandleGeometry","BoxGeometry","lineGeometry","BufferGeometry","setAttribute","Float32BufferAttribute","lineGeometry2","CircleGeometry","radius","arc","TorusGeometry","PI","rotateY","rotateX","gizmoTranslate","Mesh","XYZ","OctahedronGeometry","XY","YZ","XZ","pickerTranslate","helperTranslate","START","END","DELTA","Line","TranslateHelperGeometry","gizmoRotate","XYZE","E","helperRotate","AXIS","pickerRotate","SphereGeometry","gizmoScale","pickerScale","helperScale","setupGizmo","gizmoMap","gizmo","rotation","tag","updateMatrix","tempGeometry","applyMatrix4","matrix","renderOrder","Infinity","helper","force","handles","concat","children","factor","handle","bottom","zoom","min","tan","fov","multiplyScalar","setFromEuler","abs","setFromRotationMatrix","lookAt","atan2","multiplyQuaternions","showX","showY","showZ","_color","_opacity","split","some","a","PlaneGeometry","wireframe","side","DoubleSide","isTransformControlsPlane"],"version":3,"file":"distancecast.addf97b3.js.map"}