{"mappings":"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","sources":["<anon>","node_modules/three/examples/jsm/postprocessing/Pass.js","node_modules/stats.js/build/stats.min.js","example/gpuPathTracing.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4485\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4485\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"RPVlj\", function(module, exports) {\n\n$parcel$export(module.exports, \"FullScreenQuad\", () => $0a1d3a5a6a49de03$export$3983474c8e6e978b);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\nclass $0a1d3a5a6a49de03$export$802bc10488da99c7 {\n    constructor(){\n        this.isPass = true;\n        // if set to true, the pass is processed by the composer\n        this.enabled = true;\n        // if set to true, the pass indicates to swap read and write buffer after rendering\n        this.needsSwap = true;\n        // if set to true, the pass clears its buffer before rendering\n        this.clear = false;\n        // if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n        this.renderToScreen = false;\n    }\n    setSize() {}\n    render() {\n        console.error(\"THREE.Pass: .render() must be implemented in derived pass.\");\n    }\n    dispose() {}\n}\n// Helper for passes that need to fill the viewport with a single quad.\nconst $0a1d3a5a6a49de03$var$_camera = new (0, $ilwiq.OrthographicCamera)(-1, 1, 1, -1, 0, 1);\n// https://github.com/mrdoob/three.js/pull/21358\nconst $0a1d3a5a6a49de03$var$_geometry = new (0, $ilwiq.BufferGeometry)();\n$0a1d3a5a6a49de03$var$_geometry.setAttribute(\"position\", new (0, $ilwiq.Float32BufferAttribute)([\n    -1,\n    3,\n    0,\n    -1,\n    -1,\n    0,\n    3,\n    -1,\n    0\n], 3));\n$0a1d3a5a6a49de03$var$_geometry.setAttribute(\"uv\", new (0, $ilwiq.Float32BufferAttribute)([\n    0,\n    2,\n    0,\n    0,\n    2,\n    0\n], 2));\nclass $0a1d3a5a6a49de03$export$3983474c8e6e978b {\n    constructor(material){\n        this._mesh = new (0, $ilwiq.Mesh)($0a1d3a5a6a49de03$var$_geometry, material);\n    }\n    dispose() {\n        this._mesh.geometry.dispose();\n    }\n    render(renderer) {\n        renderer.render(this._mesh, $0a1d3a5a6a49de03$var$_camera);\n    }\n    get material() {\n        return this._mesh.material;\n    }\n    set material(value) {\n        this._mesh.material = value;\n    }\n}\n\n});\n\nparcelRegister(\"c8CJQ\", function(module, exports) {\n// stats.js - http://github.com/mrdoob/stats.js\n(function(f, e) {\n    module.exports = e();\n})(module.exports, function() {\n    var f = function() {\n        function e(a) {\n            c.appendChild(a.dom);\n            return a;\n        }\n        function u(a) {\n            for(var d = 0; d < c.children.length; d++)c.children[d].style.display = d === a ? \"block\" : \"none\";\n            l = a;\n        }\n        var l = 0, c = document.createElement(\"div\");\n        c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n        c.addEventListener(\"click\", function(a) {\n            a.preventDefault();\n            u(++l % c.children.length);\n        }, !1);\n        var k = (performance || Date).now(), g = k, a = 0, r = e(new f.Panel(\"FPS\", \"#0ff\", \"#002\")), h = e(new f.Panel(\"MS\", \"#0f0\", \"#020\"));\n        if (self.performance && self.performance.memory) var t = e(new f.Panel(\"MB\", \"#f08\", \"#201\"));\n        u(0);\n        return {\n            REVISION: 16,\n            dom: c,\n            addPanel: e,\n            showPanel: u,\n            begin: function() {\n                k = (performance || Date).now();\n            },\n            end: function() {\n                a++;\n                var c = (performance || Date).now();\n                h.update(c - k, 200);\n                if (c > g + 1E3 && (r.update(1E3 * a / (c - g), 100), g = c, a = 0, t)) {\n                    var d = performance.memory;\n                    t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                }\n                return c;\n            },\n            update: function() {\n                k = this.end();\n            },\n            domElement: c,\n            setMode: u\n        };\n    };\n    f.Panel = function(e, f, l) {\n        var c = Infinity, k = 0, g = Math.round, a = g(window.devicePixelRatio || 1), r = 80 * a, h = 48 * a, t = 3 * a, v = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n        q.width = r;\n        q.height = h;\n        q.style.cssText = \"width:80px;height:48px\";\n        var b = q.getContext(\"2d\");\n        b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n        b.textBaseline = \"top\";\n        b.fillStyle = l;\n        b.fillRect(0, 0, r, h);\n        b.fillStyle = f;\n        b.fillText(e, t, v);\n        b.fillRect(d, m, n, p);\n        b.fillStyle = l;\n        b.globalAlpha = .9;\n        b.fillRect(d, m, n, p);\n        return {\n            dom: q,\n            update: function(h, w) {\n                c = Math.min(c, h);\n                k = Math.max(k, h);\n                b.fillStyle = l;\n                b.globalAlpha = 1;\n                b.fillRect(0, 0, r, m);\n                b.fillStyle = f;\n                b.fillText(g(h) + \" \" + e + \" (\" + g(c) + \"-\" + g(k) + \")\", t, v);\n                b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                b.fillRect(d + n - a, m, a, p);\n                b.fillStyle = l;\n                b.globalAlpha = .9;\n                b.fillRect(d + n - a, m, a, g((1 - h / w) * p));\n            }\n        };\n    };\n    return f;\n});\n\n});\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $RPVlj = parcelRequire(\"RPVlj\");\n\nvar $7lx9d = parcelRequire(\"7lx9d\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $7ePFa = parcelRequire(\"7ePFa\");\n\nvar $c8CJQ = parcelRequire(\"c8CJQ\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $gcCUH = parcelRequire(\"gcCUH\");\nvar $5LGag = parcelRequire(\"5LGag\");\nvar $ff8ed = parcelRequire(\"ff8ed\");\nvar $boAbX = parcelRequire(\"boAbX\");\nvar $Mleu6 = parcelRequire(\"Mleu6\");\nconst $d228b9baa97d5fc7$var$params = {\n    enableRaytracing: true,\n    smoothImageScaling: true,\n    resolutionScale: 0.5 / window.devicePixelRatio,\n    bounces: 3,\n    accumulate: true\n};\nlet $d228b9baa97d5fc7$var$renderer, $d228b9baa97d5fc7$var$camera, $d228b9baa97d5fc7$var$scene, $d228b9baa97d5fc7$var$gui, $d228b9baa97d5fc7$var$stats;\nlet $d228b9baa97d5fc7$var$rtQuad, $d228b9baa97d5fc7$var$finalQuad, $d228b9baa97d5fc7$var$renderTarget, $d228b9baa97d5fc7$var$mesh;\nlet $d228b9baa97d5fc7$var$samples = 0;\nlet $d228b9baa97d5fc7$var$outputContainer;\n$d228b9baa97d5fc7$var$init();\n$d228b9baa97d5fc7$var$render();\nfunction $d228b9baa97d5fc7$var$init() {\n    // renderer setup\n    $d228b9baa97d5fc7$var$renderer = new $ilwiq.WebGLRenderer({\n        antialias: false\n    });\n    $d228b9baa97d5fc7$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $d228b9baa97d5fc7$var$renderer.setClearColor(0x09141a);\n    $d228b9baa97d5fc7$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $d228b9baa97d5fc7$var$renderer.outputEncoding = $ilwiq.sRGBEncoding;\n    document.body.appendChild($d228b9baa97d5fc7$var$renderer.domElement);\n    $d228b9baa97d5fc7$var$outputContainer = document.getElementById(\"output\");\n    // scene setup\n    $d228b9baa97d5fc7$var$scene = new $ilwiq.Scene();\n    const light = new $ilwiq.DirectionalLight(0xffffff, 1);\n    light.position.set(1, 1, 1);\n    $d228b9baa97d5fc7$var$scene.add(light);\n    $d228b9baa97d5fc7$var$scene.add(new $ilwiq.AmbientLight(0xb0bec5, 0.5));\n    // camera setup\n    $d228b9baa97d5fc7$var$camera = new $ilwiq.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);\n    $d228b9baa97d5fc7$var$camera.position.set(-2, 2, 3);\n    $d228b9baa97d5fc7$var$camera.far = 100;\n    $d228b9baa97d5fc7$var$camera.updateProjectionMatrix();\n    // stats setup\n    $d228b9baa97d5fc7$var$stats = new (0, (/*@__PURE__*/$parcel$interopDefault($c8CJQ)))();\n    document.body.appendChild($d228b9baa97d5fc7$var$stats.dom);\n    // hand-tuned ray origin offset values to accommodate floating point error. Mobile offset\n    // tuned from Pixel 3 device that reports as highp but seemingly has low precision.\n    const rtMaterial = new $ilwiq.ShaderMaterial({\n        defines: {\n            BOUNCES: 5\n        },\n        uniforms: {\n            bvh: {\n                value: new (0, $boAbX.MeshBVHUniformStruct)()\n            },\n            normalAttribute: {\n                value: new (0, $5LGag.FloatVertexAttributeTexture)()\n            },\n            cameraWorldMatrix: {\n                value: new $ilwiq.Matrix4()\n            },\n            invProjectionMatrix: {\n                value: new $ilwiq.Matrix4()\n            },\n            seed: {\n                value: 0\n            },\n            opacity: {\n                value: 1\n            }\n        },\n        vertexShader: /* glsl */ `\n\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main() {\n\n\t\t\t\tvec4 mvPosition = vec4( position, 1.0 );\n\t\t\t\tmvPosition = modelViewMatrix * mvPosition;\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\tvUv = uv;\n\n\t\t\t}\n\n\t\t`,\n        fragmentShader: /* glsl */ `\n\t\t\t#define RAY_OFFSET 1e-5\n\n\t\t\tprecision highp isampler2D;\n\t\t\tprecision highp usampler2D;\n\t\t\t${(0, $gcCUH).common_functions}\n\t\t\t${(0, $gcCUH).bvh_struct_definitions}\n\t\t\t${(0, $gcCUH).bvh_ray_functions}\n\t\t\t#include <common>\n\n\t\t\tuniform mat4 cameraWorldMatrix;\n\t\t\tuniform mat4 invProjectionMatrix;\n\t\t\tuniform sampler2D normalAttribute;\n\t\t\tuniform BVH bvh;\n\t\t\tuniform float seed;\n\t\t\tuniform float opacity;\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\t// get [-1, 1] normalized device coordinates\n\t\t\t\tvec2 ndc = 2.0 * vUv - vec2( 1.0 );\n\t\t\t\tvec3 rayOrigin, rayDirection;\n\t\t\t\tndcToCameraRay( ndc, cameraWorldMatrix, invProjectionMatrix, rayOrigin, rayDirection );\n\n\t\t\t\t// Lambertian render\n\t\t\t\tgl_FragColor = vec4( 0.0 );\n\n\t\t\t\tvec3 throughputColor = vec3( 1.0 );\n\t\t\t\tvec3 randomPoint = vec3( .0 );\n\n\t\t\t\t// hit results\n\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\tfloat side = 1.0;\n\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\tfor ( int i = 0; i < BOUNCES; i ++ ) {\n\n\t\t\t\t\tif ( ! bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist ) ) {\n\n\t\t\t\t\t\tfloat value = ( rayDirection.y + 0.5 ) / 1.5;\n\t\t\t\t\t\tvec3 skyColor = mix( vec3( 1.0 ), vec3( 0.75, 0.85, 1.0 ), value );\n\n\t\t\t\t\t\tgl_FragColor = vec4( skyColor * throughputColor * 2.0, 1.0 );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// 1 / PI attenuation for physically correct lambert model\n\t\t\t\t\t// https://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/\n\t\t\t\t\tthroughputColor *= 1.0 / PI;\n\n\t\t\t\t\trandomPoint = vec3(\n\t\t\t\t\t\trand( vUv + float( i + 1 ) + vec2( seed, seed ) ),\n\t\t\t\t\t\trand( - vUv * seed + float( i ) - seed ),\n\t\t\t\t\t\trand( - vUv * float( i + 1 ) - vec2( seed, - seed ) )\n\t\t\t\t\t);\n\t\t\t\t\trandomPoint -= 0.5;\n\t\t\t\t\trandomPoint *= 2.0;\n\n\t\t\t\t\t// ensure the random vector is not 0,0,0 and that it won't exactly negate\n\t\t\t\t\t// the surface normal\n\n\t\t\t\t\tfloat pointLength = max( length( randomPoint ), 1e-4 );\n\t\t\t\t\trandomPoint /= pointLength;\n\t\t\t\t\trandomPoint *= 0.999;\n\n\t\t\t\t\t// fetch the interpolated smooth normal\n\t\t\t\t\tvec3 normal =\n\t\t\t\t\t\tside *\n\t\t\t\t\t\ttextureSampleBarycoord(\n\t\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t).xyz;\n\n\t\t\t\t\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t\t\t\t\t// maximum component-wise value of the current point to accommodate floating point\n\t\t\t\t\t// error as values increase.\n\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\trayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\t\t\t\t\trayDirection = normalize( normal + randomPoint );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor.a = opacity;\n\n\t\t\t}\n\n\t\t`\n    });\n    $d228b9baa97d5fc7$var$rtQuad = new (0, $RPVlj.FullScreenQuad)(rtMaterial);\n    rtMaterial.transparent = true;\n    rtMaterial.depthWrite = false;\n    // load mesh and set up material BVH attributes\n    new (0, $7lx9d.GLTFLoader)().load(\"../models/DragonAttenuation.glb\", (gltf)=>{\n        let dragonMesh;\n        gltf.scene.traverse((c)=>{\n            if (c.isMesh && c.name === \"Dragon\") {\n                dragonMesh = c;\n                c.geometry.scale(0.25, 0.25, 0.25).rotateX(Math.PI / 2);\n            }\n        });\n        const planeGeom = new $ilwiq.PlaneGeometry(5, 5, 1, 1);\n        planeGeom.rotateX(-Math.PI / 2);\n        const merged = (0, $7ePFa.mergeGeometries)([\n            planeGeom,\n            dragonMesh.geometry\n        ], false);\n        merged.translate(0, -0.5, 0);\n        $d228b9baa97d5fc7$var$mesh = new $ilwiq.Mesh(merged, new $ilwiq.MeshStandardMaterial());\n        $d228b9baa97d5fc7$var$scene.add($d228b9baa97d5fc7$var$mesh);\n        const bvh = new (0, $ff8ed.MeshBVH)($d228b9baa97d5fc7$var$mesh.geometry, {\n            maxLeafTris: 1,\n            strategy: (0, $Mleu6.SAH)\n        });\n        rtMaterial.uniforms.bvh.value.updateFrom(bvh);\n        rtMaterial.uniforms.normalAttribute.value.updateFrom($d228b9baa97d5fc7$var$mesh.geometry.attributes.normal);\n    });\n    const floatLinearExtSupported = $d228b9baa97d5fc7$var$renderer.extensions.get(\"OES_texture_float_linear\");\n    $d228b9baa97d5fc7$var$renderTarget = new $ilwiq.WebGLRenderTarget(1, 1, {\n        format: $ilwiq.RGBAFormat,\n        type: floatLinearExtSupported ? $ilwiq.FloatType : $ilwiq.HalfFloatType\n    });\n    $d228b9baa97d5fc7$var$finalQuad = new (0, $RPVlj.FullScreenQuad)(new $ilwiq.MeshBasicMaterial({\n        map: $d228b9baa97d5fc7$var$renderTarget.texture\n    }));\n    const controls = new (0, $5Rd1x.OrbitControls)($d228b9baa97d5fc7$var$camera, $d228b9baa97d5fc7$var$renderer.domElement);\n    controls.addEventListener(\"change\", ()=>{\n        $d228b9baa97d5fc7$var$resetSamples();\n    });\n    $d228b9baa97d5fc7$var$gui = new (0, $jiuw3.GUI)();\n    $d228b9baa97d5fc7$var$gui.add($d228b9baa97d5fc7$var$params, \"enableRaytracing\").name(\"enable\");\n    $d228b9baa97d5fc7$var$gui.add($d228b9baa97d5fc7$var$params, \"accumulate\");\n    $d228b9baa97d5fc7$var$gui.add($d228b9baa97d5fc7$var$params, \"smoothImageScaling\");\n    $d228b9baa97d5fc7$var$gui.add($d228b9baa97d5fc7$var$params, \"resolutionScale\", 0.1, 1, 0.01).onChange($d228b9baa97d5fc7$var$resize);\n    $d228b9baa97d5fc7$var$gui.add($d228b9baa97d5fc7$var$params, \"bounces\", 1, 10, 1).onChange((v)=>{\n        rtMaterial.defines.BOUNCES = parseInt(v);\n        rtMaterial.needsUpdate = true;\n        $d228b9baa97d5fc7$var$resetSamples();\n    });\n    $d228b9baa97d5fc7$var$gui.open();\n    window.addEventListener(\"resize\", $d228b9baa97d5fc7$var$resize, false);\n    $d228b9baa97d5fc7$var$resize();\n}\nfunction $d228b9baa97d5fc7$var$resetSamples() {\n    $d228b9baa97d5fc7$var$samples = 0;\n}\nfunction $d228b9baa97d5fc7$var$resize() {\n    $d228b9baa97d5fc7$var$camera.aspect = window.innerWidth / window.innerHeight;\n    $d228b9baa97d5fc7$var$camera.updateProjectionMatrix();\n    const w = window.innerWidth;\n    const h = window.innerHeight;\n    const dpr = window.devicePixelRatio * $d228b9baa97d5fc7$var$params.resolutionScale;\n    $d228b9baa97d5fc7$var$renderer.setSize(w, h);\n    $d228b9baa97d5fc7$var$renderer.setPixelRatio(dpr);\n    $d228b9baa97d5fc7$var$renderTarget.setSize(w * dpr, h * dpr);\n    $d228b9baa97d5fc7$var$resetSamples();\n}\nfunction $d228b9baa97d5fc7$var$render() {\n    $d228b9baa97d5fc7$var$stats.update();\n    requestAnimationFrame($d228b9baa97d5fc7$var$render);\n    $d228b9baa97d5fc7$var$renderer.domElement.style.imageRendering = $d228b9baa97d5fc7$var$params.smoothImageScaling ? \"auto\" : \"pixelated\";\n    if ($d228b9baa97d5fc7$var$mesh && $d228b9baa97d5fc7$var$params.enableRaytracing) {\n        // jitter camera for AA\n        if ($d228b9baa97d5fc7$var$params.accumulate) {\n            if ($d228b9baa97d5fc7$var$samples === 0) $d228b9baa97d5fc7$var$camera.clearViewOffset();\n            else {\n                const w = $d228b9baa97d5fc7$var$renderTarget.width;\n                const h = $d228b9baa97d5fc7$var$renderTarget.height;\n                $d228b9baa97d5fc7$var$camera.setViewOffset(w, h, Math.random() - 0.5, Math.random() - 0.5, w, h);\n            }\n        } else $d228b9baa97d5fc7$var$resetSamples();\n        $d228b9baa97d5fc7$var$camera.updateMatrixWorld();\n        // update material\n        // keep appending a value that doesn't divide evenly into 2 so we have a different seed every frame\n        const seed = ($d228b9baa97d5fc7$var$rtQuad.material.uniforms.seed.value + 0.11111) % 2;\n        $d228b9baa97d5fc7$var$rtQuad.material.uniforms.seed.value = seed;\n        $d228b9baa97d5fc7$var$rtQuad.material.uniforms.cameraWorldMatrix.value.copy($d228b9baa97d5fc7$var$camera.matrixWorld);\n        $d228b9baa97d5fc7$var$rtQuad.material.uniforms.invProjectionMatrix.value.copy($d228b9baa97d5fc7$var$camera.projectionMatrixInverse);\n        $d228b9baa97d5fc7$var$rtQuad.material.uniforms.opacity.value = 1 / ($d228b9baa97d5fc7$var$samples + 1);\n        // render float target\n        $d228b9baa97d5fc7$var$renderer.autoClear = $d228b9baa97d5fc7$var$samples === 0;\n        $d228b9baa97d5fc7$var$renderer.setRenderTarget($d228b9baa97d5fc7$var$renderTarget);\n        $d228b9baa97d5fc7$var$rtQuad.render($d228b9baa97d5fc7$var$renderer);\n        // render to screen\n        $d228b9baa97d5fc7$var$renderer.setRenderTarget(null);\n        $d228b9baa97d5fc7$var$finalQuad.render($d228b9baa97d5fc7$var$renderer);\n        $d228b9baa97d5fc7$var$renderer.autoClear = true;\n        $d228b9baa97d5fc7$var$samples++;\n    } else {\n        $d228b9baa97d5fc7$var$resetSamples();\n        $d228b9baa97d5fc7$var$camera.clearViewOffset();\n        $d228b9baa97d5fc7$var$renderer.render($d228b9baa97d5fc7$var$scene, $d228b9baa97d5fc7$var$camera);\n    }\n    $d228b9baa97d5fc7$var$outputContainer.innerText = `samples: ${$d228b9baa97d5fc7$var$samples}`;\n}\n\n\n//# sourceMappingURL=gpuPathTracing.f27717e8.js.map\n","import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\tthis.isPass = true;\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n\tdispose() {}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import * as THREE from 'three';\nimport { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { mergeGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\nimport Stats from 'stats.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport {\n\tMeshBVH, MeshBVHUniformStruct, FloatVertexAttributeTexture,\n\tSAH, BVHShaderGLSL,\n} from '..';\n\nconst params = {\n\tenableRaytracing: true,\n\tsmoothImageScaling: true,\n\tresolutionScale: 0.5 / window.devicePixelRatio,\n\tbounces: 3,\n\taccumulate: true,\n};\n\nlet renderer, camera, scene, gui, stats;\nlet rtQuad, finalQuad, renderTarget, mesh;\nlet samples = 0;\nlet outputContainer;\n\ninit();\nrender();\n\nfunction init() {\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: false } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setClearColor( 0x09141a );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\tconst light = new THREE.DirectionalLight( 0xffffff, 1 );\n\tlight.position.set( 1, 1, 1 );\n\tscene.add( light );\n\tscene.add( new THREE.AmbientLight( 0xb0bec5, 0.5 ) );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( - 2, 2, 3 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\t// hand-tuned ray origin offset values to accommodate floating point error. Mobile offset\n\t// tuned from Pixel 3 device that reports as highp but seemingly has low precision.\n\tconst rtMaterial = new THREE.ShaderMaterial( {\n\n\t\tdefines: {\n\t\t\tBOUNCES: 5,\n\t\t},\n\n\t\tuniforms: {\n\t\t\tbvh: { value: new MeshBVHUniformStruct() },\n\t\t\tnormalAttribute: { value: new FloatVertexAttributeTexture() },\n\t\t\tcameraWorldMatrix: { value: new THREE.Matrix4() },\n\t\t\tinvProjectionMatrix: { value: new THREE.Matrix4() },\n\t\t\tseed: { value: 0 },\n\t\t\topacity: { value: 1 },\n\t\t},\n\n\t\tvertexShader: /* glsl */`\n\n\t\t\tvarying vec2 vUv;\n\t\t\tvoid main() {\n\n\t\t\t\tvec4 mvPosition = vec4( position, 1.0 );\n\t\t\t\tmvPosition = modelViewMatrix * mvPosition;\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\tvUv = uv;\n\n\t\t\t}\n\n\t\t`,\n\n\t\tfragmentShader: /* glsl */`\n\t\t\t#define RAY_OFFSET 1e-5\n\n\t\t\tprecision highp isampler2D;\n\t\t\tprecision highp usampler2D;\n\t\t\t${ BVHShaderGLSL.common_functions }\n\t\t\t${ BVHShaderGLSL.bvh_struct_definitions }\n\t\t\t${ BVHShaderGLSL.bvh_ray_functions }\n\t\t\t#include <common>\n\n\t\t\tuniform mat4 cameraWorldMatrix;\n\t\t\tuniform mat4 invProjectionMatrix;\n\t\t\tuniform sampler2D normalAttribute;\n\t\t\tuniform BVH bvh;\n\t\t\tuniform float seed;\n\t\t\tuniform float opacity;\n\t\t\tvarying vec2 vUv;\n\n\t\t\tvoid main() {\n\n\t\t\t\t// get [-1, 1] normalized device coordinates\n\t\t\t\tvec2 ndc = 2.0 * vUv - vec2( 1.0 );\n\t\t\t\tvec3 rayOrigin, rayDirection;\n\t\t\t\tndcToCameraRay( ndc, cameraWorldMatrix, invProjectionMatrix, rayOrigin, rayDirection );\n\n\t\t\t\t// Lambertian render\n\t\t\t\tgl_FragColor = vec4( 0.0 );\n\n\t\t\t\tvec3 throughputColor = vec3( 1.0 );\n\t\t\t\tvec3 randomPoint = vec3( .0 );\n\n\t\t\t\t// hit results\n\t\t\t\tuvec4 faceIndices = uvec4( 0u );\n\t\t\t\tvec3 faceNormal = vec3( 0.0, 0.0, 1.0 );\n\t\t\t\tvec3 barycoord = vec3( 0.0 );\n\t\t\t\tfloat side = 1.0;\n\t\t\t\tfloat dist = 0.0;\n\n\t\t\t\tfor ( int i = 0; i < BOUNCES; i ++ ) {\n\n\t\t\t\t\tif ( ! bvhIntersectFirstHit( bvh, rayOrigin, rayDirection, faceIndices, faceNormal, barycoord, side, dist ) ) {\n\n\t\t\t\t\t\tfloat value = ( rayDirection.y + 0.5 ) / 1.5;\n\t\t\t\t\t\tvec3 skyColor = mix( vec3( 1.0 ), vec3( 0.75, 0.85, 1.0 ), value );\n\n\t\t\t\t\t\tgl_FragColor = vec4( skyColor * throughputColor * 2.0, 1.0 );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// 1 / PI attenuation for physically correct lambert model\n\t\t\t\t\t// https://www.rorydriscoll.com/2009/01/25/energy-conservation-in-games/\n\t\t\t\t\tthroughputColor *= 1.0 / PI;\n\n\t\t\t\t\trandomPoint = vec3(\n\t\t\t\t\t\trand( vUv + float( i + 1 ) + vec2( seed, seed ) ),\n\t\t\t\t\t\trand( - vUv * seed + float( i ) - seed ),\n\t\t\t\t\t\trand( - vUv * float( i + 1 ) - vec2( seed, - seed ) )\n\t\t\t\t\t);\n\t\t\t\t\trandomPoint -= 0.5;\n\t\t\t\t\trandomPoint *= 2.0;\n\n\t\t\t\t\t// ensure the random vector is not 0,0,0 and that it won't exactly negate\n\t\t\t\t\t// the surface normal\n\n\t\t\t\t\tfloat pointLength = max( length( randomPoint ), 1e-4 );\n\t\t\t\t\trandomPoint /= pointLength;\n\t\t\t\t\trandomPoint *= 0.999;\n\n\t\t\t\t\t// fetch the interpolated smooth normal\n\t\t\t\t\tvec3 normal =\n\t\t\t\t\t\tside *\n\t\t\t\t\t\ttextureSampleBarycoord(\n\t\t\t\t\t\t\tnormalAttribute,\n\t\t\t\t\t\t\tbarycoord,\n\t\t\t\t\t\t\tfaceIndices.xyz\n\t\t\t\t\t\t).xyz;\n\n\t\t\t\t\t// adjust the hit point by the surface normal by a factor of some offset and the\n\t\t\t\t\t// maximum component-wise value of the current point to accommodate floating point\n\t\t\t\t\t// error as values increase.\n\t\t\t\t\tvec3 point = rayOrigin + rayDirection * dist;\n\t\t\t\t\tvec3 absPoint = abs( point );\n\t\t\t\t\tfloat maxPoint = max( absPoint.x, max( absPoint.y, absPoint.z ) );\n\t\t\t\t\trayOrigin = point + faceNormal * ( maxPoint + 1.0 ) * RAY_OFFSET;\n\t\t\t\t\trayDirection = normalize( normal + randomPoint );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor.a = opacity;\n\n\t\t\t}\n\n\t\t`\n\n\t} );\n\n\trtQuad = new FullScreenQuad( rtMaterial );\n\trtMaterial.transparent = true;\n\trtMaterial.depthWrite = false;\n\n\t// load mesh and set up material BVH attributes\n\tnew GLTFLoader()\n\t\t.load( '../models/DragonAttenuation.glb', gltf => {\n\n\t\t\tlet dragonMesh;\n\t\t\tgltf.scene.traverse( c => {\n\n\t\t\t\tif ( c.isMesh && c.name === 'Dragon' ) {\n\n\t\t\t\t\tdragonMesh = c;\n\t\t\t\t\tc.geometry.scale( 0.25, 0.25, 0.25 ).rotateX( Math.PI / 2 );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tconst planeGeom = new THREE.PlaneGeometry( 5, 5, 1, 1 );\n\t\t\tplaneGeom.rotateX( - Math.PI / 2 );\n\n\t\t\tconst merged = mergeGeometries( [ planeGeom, dragonMesh.geometry ], false );\n\t\t\tmerged.translate( 0, - 0.5, 0 );\n\n\t\t\tmesh = new THREE.Mesh( merged, new THREE.MeshStandardMaterial() );\n\t\t\tscene.add( mesh );\n\n\t\t\tconst bvh = new MeshBVH( mesh.geometry, { maxLeafTris: 1, strategy: SAH } );\n\t\t\trtMaterial.uniforms.bvh.value.updateFrom( bvh );\n\t\t\trtMaterial.uniforms.normalAttribute.value.updateFrom( mesh.geometry.attributes.normal );\n\n\t\t} );\n\n\n\tconst floatLinearExtSupported = renderer.extensions.get( 'OES_texture_float_linear' );\n\trenderTarget = new THREE.WebGLRenderTarget( 1, 1, {\n\n\t\tformat: THREE.RGBAFormat,\n\t\ttype: floatLinearExtSupported ? THREE.FloatType : THREE.HalfFloatType,\n\n\t} );\n\n\tfinalQuad = new FullScreenQuad( new THREE.MeshBasicMaterial( {\n\n\t\tmap: renderTarget.texture,\n\n\t} ) );\n\n\tconst controls = new OrbitControls( camera, renderer.domElement );\n\tcontrols.addEventListener( 'change', () => {\n\n\t\tresetSamples();\n\n\t} );\n\n\tgui = new GUI();\n\tgui.add( params, 'enableRaytracing' ).name( 'enable' );\n\tgui.add( params, 'accumulate' );\n\tgui.add( params, 'smoothImageScaling' );\n\tgui.add( params, 'resolutionScale', 0.1, 1, 0.01 ).onChange( resize );\n\tgui.add( params, 'bounces', 1, 10, 1 ).onChange( v => {\n\n\t\trtMaterial.defines.BOUNCES = parseInt( v );\n\t\trtMaterial.needsUpdate = true;\n\t\tresetSamples();\n\n\t} );\n\tgui.open();\n\n\twindow.addEventListener( 'resize', resize, false );\n\tresize();\n\n}\n\nfunction resetSamples() {\n\n\tsamples = 0;\n\n}\n\nfunction resize() {\n\n\tcamera.aspect = window.innerWidth / window.innerHeight;\n\tcamera.updateProjectionMatrix();\n\n\tconst w = window.innerWidth;\n\tconst h = window.innerHeight;\n\tconst dpr = window.devicePixelRatio * params.resolutionScale;\n\trenderer.setSize( w, h );\n\trenderer.setPixelRatio( dpr );\n\n\trenderTarget.setSize( w * dpr, h * dpr );\n\n\tresetSamples();\n\n}\n\nfunction render() {\n\n\tstats.update();\n\trequestAnimationFrame( render );\n\n\trenderer.domElement.style.imageRendering = params.smoothImageScaling ? 'auto' : 'pixelated';\n\n\tif ( mesh && params.enableRaytracing ) {\n\n\t\t// jitter camera for AA\n\t\tif ( params.accumulate ) {\n\n\t\t\tif ( samples === 0 ) {\n\n\t\t\t\tcamera.clearViewOffset();\n\n\t\t\t} else {\n\n\t\t\t\tconst w = renderTarget.width;\n\t\t\t\tconst h = renderTarget.height;\n\t\t\t\tcamera.setViewOffset(\n\t\t\t\t\tw, h,\n\t\t\t\t\tMath.random() - 0.5, Math.random() - 0.5,\n\t\t\t\t\tw, h,\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tresetSamples();\n\n\t\t}\n\n\t\tcamera.updateMatrixWorld();\n\n\t\t// update material\n\t\t// keep appending a value that doesn't divide evenly into 2 so we have a different seed every frame\n\t\tconst seed = ( rtQuad.material.uniforms.seed.value + 0.11111 ) % 2;\n\t\trtQuad.material.uniforms.seed.value = seed;\n\t\trtQuad.material.uniforms.cameraWorldMatrix.value.copy( camera.matrixWorld );\n\t\trtQuad.material.uniforms.invProjectionMatrix.value.copy( camera.projectionMatrixInverse );\n\t\trtQuad.material.uniforms.opacity.value = 1 / ( samples + 1 );\n\n\t\t// render float target\n\t\trenderer.autoClear = samples === 0;\n\t\trenderer.setRenderTarget( renderTarget );\n\t\trtQuad.render( renderer );\n\n\t\t// render to screen\n\t\trenderer.setRenderTarget( null );\n\t\tfinalQuad.render( renderer );\n\n\t\trenderer.autoClear = true;\n\t\tsamples ++;\n\n\t} else {\n\n\t\tresetSamples();\n\t\tcamera.clearViewOffset();\n\t\trenderer.render( scene, camera );\n\n\t}\n\n\toutputContainer.innerText = `samples: ${ samples }`;\n\n}\n"],"names":["$d228b9baa97d5fc7$var$renderer","$d228b9baa97d5fc7$var$camera","$d228b9baa97d5fc7$var$scene","$d228b9baa97d5fc7$var$gui","$d228b9baa97d5fc7$var$stats","$d228b9baa97d5fc7$var$rtQuad","$d228b9baa97d5fc7$var$finalQuad","$d228b9baa97d5fc7$var$renderTarget","$d228b9baa97d5fc7$var$mesh","$d228b9baa97d5fc7$var$outputContainer","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$0a1d3a5a6a49de03$export$3983474c8e6e978b","set","s","enumerable","configurable","$ilwiq","$0a1d3a5a6a49de03$var$_camera","OrthographicCamera","$0a1d3a5a6a49de03$var$_geometry","BufferGeometry","setAttribute","Float32BufferAttribute","constructor","material","_mesh","Mesh","dispose","geometry","render","renderer","value","f","e","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","v","m","n","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","$RPVlj","$7lx9d","$5Rd1x","$7ePFa","$c8CJQ","$jiuw3","$gcCUH","$5LGag","$ff8ed","$boAbX","$Mleu6","$d228b9baa97d5fc7$var$params","enableRaytracing","smoothImageScaling","resolutionScale","bounces","accumulate","$d228b9baa97d5fc7$var$samples","$d228b9baa97d5fc7$var$resize","aspect","innerWidth","innerHeight","updateProjectionMatrix","dpr","setSize","setPixelRatio","$d228b9baa97d5fc7$var$init","WebGLRenderer","antialias","setClearColor","outputEncoding","sRGBEncoding","body","getElementById","Scene","light","DirectionalLight","position","add","AmbientLight","PerspectiveCamera","far","__esModule","default","rtMaterial","ShaderMaterial","defines","BOUNCES","uniforms","bvh","MeshBVHUniformStruct","normalAttribute","FloatVertexAttributeTexture","cameraWorldMatrix","Matrix4","invProjectionMatrix","seed","opacity","vertexShader","fragmentShader","common_functions","bvh_struct_definitions","bvh_ray_functions","FullScreenQuad","transparent","depthWrite","GLTFLoader","load","gltf","dragonMesh","scene","traverse","isMesh","name","scale","rotateX","PI","planeGeom","PlaneGeometry","merged","mergeGeometries","translate","MeshStandardMaterial","MeshBVH","maxLeafTris","strategy","SAH","updateFrom","attributes","normal","floatLinearExtSupported","extensions","WebGLRenderTarget","format","RGBAFormat","type","FloatType","HalfFloatType","MeshBasicMaterial","map","texture","controls","OrbitControls","GUI","onChange","parseInt","needsUpdate","open","$d228b9baa97d5fc7$var$render","requestAnimationFrame","imageRendering","clearViewOffset","setViewOffset","random","updateMatrixWorld","copy","matrixWorld","projectionMatrixInverse","autoClear","setRenderTarget","innerText"],"version":3,"file":"gpuPathTracing.f27717e8.js.map"}