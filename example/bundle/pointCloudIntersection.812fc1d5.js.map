{"mappings":"IKcI,EACA,EAAO,EAAQ,EAAU,EAAS,EAAQ,EAAY,EAEtD,E,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,W,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,E,O,C,U,I,GJbJ,IAAI,EAAQ,WAEX,IAAI,EAAO,EAEP,EAAY,SAAS,aAAa,CAAE,OAWxC,SAAS,EAAU,CAAK,EAGvB,OADA,EAAU,WAAW,CAAE,EAAM,GAAG,EACzB,CAER,CAEA,SAAS,EAAW,CAAE,EAErB,IAAM,IAAI,EAAI,EAAG,EAAI,EAAU,QAAQ,CAAC,MAAM,CAAE,IAE/C,EAAU,QAAQ,CAAE,EAAG,CAAC,KAAK,CAAC,OAAO,CAAG,IAAM,EAAK,QAAU,OAI9D,EAAO,CAER,CA3BA,EAAU,KAAK,CAAC,OAAO,CAAG,uEAC1B,EAAU,gBAAgB,CAAE,QAAS,SAAW,CAAK,EAEpD,EAAM,cAAc,GACpB,EAAW,EAAG,EAAO,EAAU,QAAQ,CAAC,MAAM,CAE/C,EAAG,CAAA,GAyBH,IAAI,EAAc,AAAA,CAAA,aAAe,IAAA,EAAO,GAAG,GAAI,EAAW,EAAW,EAAS,EAE1E,EAAW,EAAU,IAAI,EAAM,KAAK,CAAE,MAAO,OAAQ,SACrD,EAAU,EAAU,IAAI,EAAM,KAAK,CAAE,KAAM,OAAQ,SAEvD,GAAK,KAAK,WAAW,EAAI,KAAK,WAAW,CAAC,MAAM,CAE/C,IAAI,EAAW,EAAU,IAAI,EAAM,KAAK,CAAE,KAAM,OAAQ,SAMzD,OAFA,EAAW,GAEJ,CAEN,SAAU,GAEV,IAAK,EAEL,SAAU,EACV,UAAW,EAEX,MAAO,WAEN,EAAc,AAAA,CAAA,aAAe,IAAA,EAAO,GAAG,EAExC,EAEA,IAAK,WAEJ,IAEA,IAAI,EAAO,AAAE,CAAA,aAAe,IAAA,EAAO,GAAG,GAItC,GAFA,EAAQ,MAAM,CAAE,EAAO,EAAW,KAE7B,EAAO,EAAW,MAEtB,EAAS,MAAM,CAAI,AAAS,IAAT,EAAoB,CAAA,EAAO,CAAA,EAAY,KAE1D,EAAW,EACX,EAAS,EAEJ,GAAW,CAEf,IAAI,EAAS,YAAY,MAAM,CAC/B,EAAS,MAAM,CAAE,EAAO,cAAc,CAAG,QAAS,EAAO,eAAe,CAAG,QAE5E,CAID,OAAO,CAER,EAEA,OAAQ,WAEP,EAAY,IAAI,CAAC,GAAG,EAErB,EAIA,WAAY,EACZ,QAAS,CAEV,CAED,CAEA,CAAA,EAAM,KAAK,CAAG,SAAW,CAAI,CAAE,CAAE,CAAE,CAAE,EAEpC,IAAI,EAAM,IAAU,EAAM,EAAG,EAAQ,KAAK,KAAK,CAC3C,EAAK,EAAO,OAAO,gBAAgB,EAAI,GAEvC,EAAQ,GAAK,EAAI,EAAS,GAAK,EACjC,EAAS,EAAI,EAAI,EAAS,EAAI,EAC9B,EAAU,EAAI,EAAI,EAAU,GAAK,EACjC,EAAc,GAAK,EAAI,EAAe,GAAK,EAEzC,EAAS,SAAS,aAAa,CAAE,SACrC,CAAA,EAAO,KAAK,CAAG,EACf,EAAO,MAAM,CAAG,EAChB,EAAO,KAAK,CAAC,OAAO,CAAG,yBAEvB,IAAI,EAAU,EAAO,UAAU,CAAE,MAejC,OAdA,EAAQ,IAAI,CAAG,QAAY,EAAI,EAAO,gCACtC,EAAQ,YAAY,CAAG,MAEvB,EAAQ,SAAS,CAAG,EACpB,EAAQ,QAAQ,CAAE,EAAG,EAAG,EAAO,GAE/B,EAAQ,SAAS,CAAG,EACpB,EAAQ,QAAQ,CAAE,EAAM,EAAQ,GAChC,EAAQ,QAAQ,CAAE,EAAS,EAAS,EAAa,GAEjD,EAAQ,SAAS,CAAG,EACpB,EAAQ,WAAW,CAAG,GACtB,EAAQ,QAAQ,CAAE,EAAS,EAAS,EAAa,GAE1C,CAEN,IAAK,EAEL,OAAQ,SAAW,CAAK,CAAE,CAAQ,EAEjC,EAAM,KAAK,GAAG,CAAE,EAAK,GACrB,EAAM,KAAK,GAAG,CAAE,EAAK,GAErB,EAAQ,SAAS,CAAG,EACpB,EAAQ,WAAW,CAAG,EACtB,EAAQ,QAAQ,CAAE,EAAG,EAAG,EAAO,GAC/B,EAAQ,SAAS,CAAG,EACpB,EAAQ,QAAQ,CAAE,EAAO,GAAU,IAAM,EAAO,KAAO,EAAO,GAAQ,IAAM,EAAO,GAAQ,IAAK,EAAQ,GAExG,EAAQ,SAAS,CAAE,EAAQ,EAAU,EAAI,EAAS,EAAc,EAAI,EAAc,EAAS,EAAS,EAAc,EAAI,GAEtH,EAAQ,QAAQ,CAAE,EAAU,EAAc,EAAI,EAAS,EAAI,GAE3D,EAAQ,SAAS,CAAG,EACpB,EAAQ,WAAW,CAAG,GACtB,EAAQ,QAAQ,CAAE,EAAU,EAAc,EAAI,EAAS,EAAI,EAAS,AAAA,CAAA,EAAM,EAAQ,CAAA,EAAe,GAElG,CAED,CAED,C,G,E,Q,S,C,C,C,E,E,E,O,C,qB,I,G,E,E,O,C,oB,I,G,E,E,O,C,oB,I,G,I,E,E,S,E,E,S,E,E,SCpKA,IAAM,EAAsB,IAAI,EAAA,GAAE,CAC5B,EAAmC,IAAI,EAAA,OAAM,CAC7C,EAAsB,AAAA,EAAA,IAAG,CAAE,SAAS,CAAC,OAAO,CAE3C,SAAS,EAAoB,CAAS,CAAE,CAAU,EAExD,GAAK,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAG,CAE/B,GAAK,AAAkB,KAAA,IAAlB,IAAI,CAAC,QAAQ,CAAiB,OAEnC,EAAiB,IAAI,CAAE,IAAI,CAAC,WAAW,EAAG,MAAM,GAChD,EAAI,IAAI,CAAE,EAAU,GAAG,EAAG,YAAY,CAAE,GAExC,IAAM,EAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,CACpC,GAAK,AAA2B,CAAA,IAA3B,EAAU,YAAY,CAAY,CAEtC,IAAM,EAAM,AAAA,CAAA,EAAA,EAAA,uBAAsB,AAAtB,EAAyB,EAAI,YAAY,CAAE,EAAK,IAAI,CAAC,QAAQ,EAAI,IAAI,CAAE,GAC9E,GAEJ,EAAW,IAAI,CAAE,EAInB,KAAO,CAEN,IAAM,EAAO,EAAI,OAAO,CAAE,EAAK,IAAI,CAAC,QAAQ,EAC5C,IAAM,IAAI,EAAI,EAAG,EAAI,EAAK,MAAM,CAAE,EAAI,EAAG,IAAO,CAE/C,IAAM,EAAM,AAAA,CAAA,EAAA,EAAA,uBAAsB,AAAtB,EAAyB,CAAI,CAAE,EAAG,CAAE,IAAI,CAAE,GACjD,GAEJ,EAAW,IAAI,CAAE,EAInB,CAED,CAED,MAEC,EAAoB,IAAI,CAAE,IAAI,CAAE,EAAW,EAI7C,CAEO,SAAS,EAAmB,CAAO,EAGzC,OADA,IAAI,CAAC,UAAU,CAAG,IAAI,EAAA,OAAM,CAAG,IAAI,CAAE,GAC9B,IAAI,CAAC,UAAU,AAEvB,CAEO,SAAS,IAEf,IAAI,CAAC,UAAU,CAAG,IAEnB,C,G,E,Q,S,C,C,C,E,E,E,O,C,0B,I,GC5DO,SAAS,EAAyB,CAAG,CAAE,CAAM,CAAE,CAAS,SAE9D,AAAK,AAAQ,OAAR,EAEG,MAIR,EAAI,KAAK,CAAC,YAAY,CAAE,EAAO,WAAW,EAC1C,EAAI,QAAQ,CAAG,EAAI,KAAK,CAAC,UAAU,CAAE,EAAU,GAAG,CAAC,MAAM,EACzD,EAAI,MAAM,CAAG,EAER,EAAI,QAAQ,CAAG,EAAU,IAAI,EAAI,EAAI,QAAQ,CAAG,EAAU,GAAG,EAE1D,KAIA,CAIT,C,G,E,Q,S,C,C,C,E,E,E,O,C,gB,I,G,I,E,E,S,E,E,S,E,E,SCpBA,IAAM,EAA8B,IAAI,EAAA,IAAG,AAC3C,OAAM,UAA0B,EAAA,QAAO,CAEtC,IAAI,QAAS,CAEZ,MAAO,CAAE,IAAI,CAAC,YAAY,AAE3B,CAEA,IAAI,gBAAiB,CAEpB,OAAO,IAAI,CAAC,YAAY,AAEzB,CAEA,IAAI,QAAS,CAEZ,OAAO,IAAI,CAAC,YAAY,AAEzB,CAEA,YAAa,CAAG,CAAE,CAAQ,CAAE,EAAQ,EAAE,CAAE,EAAQ,CAAC,CAAG,CAEnD,KAAK,GAEL,IAAI,CAAC,QAAQ,CAAG,EAChB,IAAI,CAAC,QAAQ,CAAG,IAAI,EAAA,cAAa,CACjC,IAAI,CAAC,IAAI,CAAG,oBACZ,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,cAAc,CAAG,CAAA,EACtB,IAAI,CAAC,GAAG,CAAG,EACX,IAAI,CAAC,YAAY,CAAG,CAAA,EACpB,IAAI,CAAC,MAAM,CAAG,CAEf,CAEA,SAAU,CAAC,CAEX,QAAS,CAER,IAAM,EAAW,IAAI,CAAC,QAAQ,CACxB,EAAa,IAAI,CAAC,GAAG,CACrB,EAAQ,IAAI,CAAC,MAAM,CAGzB,GAFA,EAAS,OAAO,GAChB,IAAI,CAAC,OAAO,CAAG,CAAA,EACV,EAAa,KA2Db,EACA,EAzDJ,IAAM,EAAc,IAAI,CAAC,KAAK,CAAG,EAC3B,EAAiB,IAAI,CAAC,cAAc,CACtC,EAAc,EAClB,EAAW,QAAQ,CAAE,CAAE,EAAO,KAE7B,GAAK,GAAS,GAAe,EAG5B,OADA,IACO,CAAA,EAEI,GAEX,GAIF,EAAG,GAGH,IAAI,EAAW,EACT,EAAgB,IAAI,aAAc,GAAQ,GAChD,EAAW,QAAQ,CAAE,CAAE,EAAO,EAAQ,KAErC,IAAM,EAAY,GAAS,GAAe,EAC1C,GAAK,GAAa,EAAiB,CAElC,AAAA,CAAA,EAAA,EAAA,UAAS,AAAT,EAAY,EAAG,EAAc,GAE7B,GAAM,CAAA,IAAE,CAAG,CAAA,IAAE,CAAG,CAAE,CAAG,EACrB,IAAM,IAAI,EAAI,GAAK,GAAK,EAAG,GAAK,EAAI,CAEnC,IAAM,EAAO,EAAI,EAAI,EAAI,CAAC,CAAG,EAAI,CAAC,CAClC,IAAM,IAAI,EAAI,GAAK,GAAK,EAAG,GAAK,EAAI,CAEnC,IAAM,EAAO,EAAI,EAAI,EAAI,CAAC,CAAG,EAAI,CAAC,CAClC,IAAM,IAAI,EAAI,GAAK,GAAK,EAAG,GAAK,EAAI,CAEnC,IAAM,EAAO,EAAI,EAAI,EAAI,CAAC,CAAG,EAAI,CAAC,AAClC,CAAA,CAAa,CAAE,EAAW,EAAG,CAAG,EAChC,CAAa,CAAE,EAAW,EAAG,CAAG,EAChC,CAAa,CAAE,EAAW,EAAG,CAAG,EAEhC,GAAY,CAEb,CAED,CAED,CAEA,OAAO,CAER,CAED,EAAG,GAOF,MAAc,WAHV,IAAI,CAAC,YAAY,CAGK,CAEzB,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EAGH,EAAG,EACH,EAAG,EACH,EAAG,EACH,EAAG,EACH,CAIyB,CAGzB,EAAG,EAAG,EACN,EAAG,EAAG,EAEN,EAAG,EAAG,EACN,EAAG,EAAG,EAGN,EAAG,EAAG,EACN,EAAG,EAAG,EAEN,EAAG,EAAG,EACN,EAAG,EAAG,EAGN,EAAG,EAAG,EACN,EAAG,EAAG,EAEN,EAAG,EAAG,EACN,EAAG,EAAG,EAEN,EAMD,EAFI,EAAc,MAAM,CAAG,MAEd,IAAI,YAAa,EAAQ,MAAM,CAAG,GAIlC,IAAI,YAAa,EAAQ,MAAM,CAAG,GAIhD,IAAM,EAAc,EAAQ,MAAM,CAClC,IAAM,IAAI,EAAI,EAAG,EAAI,EAAa,IAAO,CAExC,IAAM,EAAY,AAAI,EAAJ,EACZ,EAAc,EAAI,EACxB,IAAM,IAAI,EAAI,EAAG,EAAI,EAAa,IAEjC,CAAU,CAAE,EAAc,EAAG,CAAG,EAAY,CAAO,CAAE,EAAG,AAI1D,CAGA,EAAS,QAAQ,CAChB,IAAI,EAAA,eAAc,CAAG,EAAY,EAAG,CAAA,IAErC,EAAS,YAAY,CACpB,WACA,IAAI,EAAA,eAAc,CAAG,EAAe,EAAG,CAAA,IAExC,IAAI,CAAC,OAAO,CAAG,CAAA,CAEhB,CAED,CAED,CAEA,MAAM,UAAsB,EAAA,KAAI,CAE/B,IAAI,OAAQ,CAEX,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,AAE/B,CAEA,IAAI,SAAU,CAEb,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,AAEjC,CAEA,IAAI,QAAS,CAAC,CAAG,CAEhB,IAAI,CAAC,YAAY,CAAC,OAAO,CAAG,EAC5B,IAAI,CAAC,YAAY,CAAC,OAAO,CAAG,CAE7B,CAEA,YAAa,EAAO,IAAI,CAAE,EAAM,IAAI,CAAE,EAAQ,EAAE,CAAG,CAG7C,aAAgB,EAAA,OAAM,GAE1B,EAAQ,GAAO,GACf,EAAM,EACN,EAAO,MAKY,UAAf,OAAO,IAEX,EAAQ,EACR,EAAM,MAIP,KAAK,GAEL,IAAI,CAAC,IAAI,CAAG,gBACZ,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,GAAG,CAAG,EACX,IAAI,CAAC,cAAc,CAAG,CAAA,EACtB,IAAI,CAAC,YAAY,CAAG,CAAA,EACpB,IAAI,CAAC,MAAM,CAAG,EAAE,CAEhB,IAAM,EAAe,IAAI,EAAA,iBAAgB,CAAG,CAC3C,MAAO,MACP,YAAa,CAAA,EACb,QAAS,GACT,WAAY,CAAA,CACb,GAEM,EAAe,IAAI,EAAA,iBAAgB,CAAG,CAC3C,MAAO,MACP,YAAa,CAAA,EACb,QAAS,GACT,WAAY,CAAA,CACb,EAEA,CAAA,EAAa,KAAK,CAAG,EAAa,KAAK,CAEvC,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,YAAY,CAAG,EAEpB,IAAI,CAAC,MAAM,EAEZ,CAEA,QAAS,CAER,IAAM,EAAM,IAAI,CAAC,GAAG,EAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAC/C,EAAa,EAAM,EAAI,MAAM,CAAC,MAAM,CAAG,EAC7C,KAAQ,IAAI,CAAC,MAAM,CAAC,MAAM,CAAG,GAAa,CAEzC,IAAM,EAAO,IAAI,CAAC,MAAM,CAAC,GAAG,GAC5B,EAAK,QAAQ,CAAC,OAAO,GACrB,IAAI,CAAC,MAAM,CAAE,EAEd,CAEA,IAAM,IAAI,EAAI,EAAG,EAAI,EAAY,IAAO,CAEvC,GAAM,CAAA,MAAE,CAAK,CAAA,aAAE,CAAY,CAAA,aAAE,CAAY,CAAA,eAAE,CAAc,CAAA,aAAE,CAAY,CAAE,CAAG,IAAI,CAEhF,GAAK,GAAK,IAAI,CAAC,MAAM,CAAC,MAAM,CAAG,CAE9B,IAAM,EAAO,IAAI,EAAmB,EAAK,EAAc,EAAO,GAC9D,IAAI,CAAC,GAAG,CAAE,GACV,IAAI,CAAC,MAAM,CAAC,IAAI,CAAE,EAEnB,CAEA,IAAM,EAAO,IAAI,CAAC,MAAM,CAAE,EAAG,AAC7B,CAAA,EAAK,GAAG,CAAG,EACX,EAAK,KAAK,CAAG,EACb,EAAK,cAAc,CAAG,EACtB,EAAK,YAAY,CAAG,EACpB,EAAK,QAAQ,CAAG,EAAe,EAAe,EAC9C,EAAK,MAAM,EAEZ,CAED,CAEA,kBAAmB,GAAG,CAAI,CAAG,CAE5B,IAAM,EAAO,IAAI,CAAC,IAAI,CAChB,EAAS,IAAI,CAAC,MAAM,AAEZ,QAAT,IAEJ,EAAK,iBAAiB,CAAE,CAAA,EAAM,CAAA,GAEzB,EAEJ,IAAI,CAAC,MAAM,CACT,IAAI,CAAE,EAAO,WAAW,EACxB,MAAM,GACN,QAAQ,CAAE,EAAK,WAAW,EAI5B,IAAI,CAAC,MAAM,CACT,IAAI,CAAE,EAAK,WAAW,EAIzB,IAAI,CAAC,MAAM,CAAC,SAAS,CACpB,IAAI,CAAC,QAAQ,CACb,IAAI,CAAC,UAAU,CACf,IAAI,CAAC,KAAK,GAKZ,KAAK,CAAC,qBAAsB,EAE7B,CAEA,KAAM,CAAM,CAAG,CAEd,IAAI,CAAC,KAAK,CAAG,EAAO,KAAK,CACzB,IAAI,CAAC,IAAI,CAAG,EAAO,IAAI,CACvB,IAAI,CAAC,GAAG,CAAG,EAAO,GAAG,CACrB,IAAI,CAAC,OAAO,CAAG,EAAO,OAAO,CAC7B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAE,EAAO,KAAK,CAE9B,CAEA,OAAQ,CAEP,OAAO,IAAI,EAAe,IAAI,CAAC,IAAI,CAAE,IAAI,CAAC,GAAG,CAAE,IAAI,CAAC,KAAK,CAE1D,CAEA,SAAU,CAET,IAAI,CAAC,YAAY,CAAC,OAAO,GACzB,IAAI,CAAC,YAAY,CAAC,OAAO,GAEzB,IAAM,EAAW,IAAI,CAAC,QAAQ,CAC9B,IAAM,IAAI,EAAI,EAAG,EAAI,EAAS,MAAM,CAAE,EAAI,EAAG,IAE5C,CAAQ,CAAE,EAAG,CAAC,QAAQ,CAAC,OAAO,EAIhC,CAED,C,G,I,E,E,S,E,E,S,E,E,S,E,E,SE3UA,MAAM,EAAS,IAAI,EAAA,KAAI,AAEvB,OAAM,UAAkB,EAAA,MAAK,CAE5B,YAAa,CAAO,CAAG,CAEtB,KAAK,CAAE,GAEP,IAAI,CAAC,mBAAmB,CAAG,CAAC,EAC5B,IAAI,CAAC,qBAAqB,CAAG,CAAC,CAE/B,CAEA,KAAM,CAAG,CAAE,CAAM,CAAE,CAAU,CAAE,CAAO,CAAG,CAExC,IAAM,EAAQ,IAAI,CAEZ,EAAS,IAAI,EAAA,UAAS,CAAG,IAAI,CAAC,OAAO,EAC3C,EAAO,OAAO,CAAE,IAAI,CAAC,IAAI,EACzB,EAAO,eAAe,CAAE,eACxB,EAAO,gBAAgB,CAAE,IAAI,CAAC,aAAa,EAC3C,EAAO,kBAAkB,CAAE,IAAI,CAAC,eAAe,EAC/C,EAAO,IAAI,CAAE,EAAK,SAAW,CAAI,EAEhC,GAAI,CAEH,EAAQ,EAAM,KAAK,CAAE,GAEtB,CAAE,MAAQ,EAAI,CAER,EAEJ,EAAS,GAIT,QAAQ,KAAK,CAAE,GAIhB,EAAM,OAAO,CAAC,SAAS,CAAE,EAE1B,CAED,EAAG,EAAY,EAEhB,CAEA,uBAAwB,CAAO,CAAG,CAEjC,IAAI,CAAC,mBAAmB,CAAG,CAE5B,CAEA,6BAA8B,CAAO,CAAG,CAEvC,IAAI,CAAC,qBAAqB,CAAG,CAE9B,CAEA,MAAO,CAAI,CAAG,KAslBT,EAplBJ,SAAS,EAAa,CAAI,MAsBrB,EAnBJ,IAAI,EAAa,GACb,EAAe,EACb,EAAS,AAHO,sCAGO,IAAI,CAAE,EAEnB,QAAX,IAEJ,EAAa,CAAM,CAAE,EAAG,CACxB,EAAe,IAAI,KAAM,CAAE,CAAM,CAAE,EAAG,CAAE,EAAG,IAAI,EAIhD,IAAM,EAAS,CACd,SAAU,EAAE,CACZ,SAAU,EAAE,CACZ,aAAc,EACd,QAAS,EACV,EAEM,EAAQ,EAAW,KAAK,CAAE,cA6BhC,IAAM,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAO,CAEzC,IAAI,EAAO,CAAK,CAAE,EAAG,CAGrB,GAAK,AAAS,KAFd,CAAA,EAAO,EAAK,IAAI,EAAhB,EAEmB,SAEnB,IAAM,EAAa,EAAK,KAAK,CAAE,OACzB,EAAW,EAAW,KAAK,GAGjC,OAFA,EAAO,EAAW,IAAI,CAAE,KAEf,GAER,IAAK,SAEJ,EAAO,MAAM,CAAG,CAAU,CAAE,EAAG,CAC/B,EAAO,OAAO,CAAG,CAAU,CAAE,EAAG,CAEhC,KAED,KAAK,UAEJ,EAAO,QAAQ,CAAC,IAAI,CAAE,GAEtB,KAED,KAAK,UAEoB,KAAA,IAAnB,GAEJ,EAAO,QAAQ,CAAC,IAAI,CAAE,GAKvB,AADA,CAAA,EAAiB,CAAC,CAAA,EACH,IAAI,CAAG,CAAU,CAAE,EAAG,CACrC,EAAe,KAAK,CAAG,SAAU,CAAU,CAAE,EAAG,EAChD,EAAe,UAAU,CAAG,EAAE,CAE9B,KAED,KAAK,WAEJ,EAAe,UAAU,CAAC,IAAI,CAAE,AArEnC,SAAoC,CAAa,CAAE,CAAmB,EAErE,IAAM,EAAW,CAAE,KAAM,CAAa,CAAE,EAAG,AAAC,EAoB5C,MAlBK,AAAkB,SAAlB,EAAS,IAAI,EAEjB,EAAS,IAAI,CAAG,CAAa,CAAE,EAAG,CAClC,EAAS,SAAS,CAAG,CAAa,CAAE,EAAG,CACvC,EAAS,QAAQ,CAAG,CAAa,CAAE,EAAG,EAItC,EAAS,IAAI,CAAG,CAAa,CAAE,EAAG,CAI9B,EAAS,IAAI,IAAI,GAErB,CAAA,EAAS,IAAI,CAAG,CAAmB,CAAE,EAAS,IAAI,CAAE,AAAF,EAI5C,CAER,EA6C8D,EAAY,EAAM,mBAAmB,GAEhG,KAED,KAAK,WAEJ,EAAO,OAAO,CAAG,EAEjB,KAGD,SAEC,QAAQ,GAAG,CAAE,YAAa,EAAU,EAEtC,CAED,CAQA,OANwB,KAAA,IAAnB,GAEJ,EAAO,QAAQ,CAAC,IAAI,CAAE,GAIhB,CAER,CAEA,SAAS,EAAkB,CAAC,CAAE,CAAI,EAEjC,OAAS,GAER,IAAK,OAAQ,IAAK,QAAS,IAAK,QAAS,IAAK,SAAU,IAAK,MAAO,IAAK,OACzE,IAAK,OAAQ,IAAK,QAAS,IAAK,QAAS,IAAK,SAAU,IAAK,QAAS,IAAK,SAE1E,OAAO,SAAU,EAElB,KAAK,QAAS,IAAK,SAAU,IAAK,UAAW,IAAK,UAEjD,OAAO,WAAY,EAErB,CAED,CAmCA,SAAS,IAER,IAAM,EAAS,CACb,QAAS,EAAE,CACX,SAAU,EAAE,CACZ,QAAS,EAAE,CACX,IAAK,EAAE,CACP,cAAe,EAAE,CACjB,OAAQ,EAAE,AACZ,EAEA,IAAM,IAAM,KAAkB,OAAO,IAAI,CAAE,EAAM,qBAAqB,EAEpE,CAAM,CAAE,EAAgB,CAAG,EAAE,CAI/B,OAAO,CAER,CAEA,SAAS,EAAsB,CAAU,EAExC,IAAM,EAAe,EAAW,GAAG,CAAE,AAAA,GAE7B,EAAS,IAAI,EAIrB,SAAS,EAAc,CAAK,EAE3B,IAAM,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,EAAI,EAAG,IAAO,CAEhD,IAAM,EAAO,CAAK,CAAE,EAAG,CAEvB,GAAK,EAAa,QAAQ,CAAE,GAAS,OAAO,CAE7C,CAEA,OAAO,IAER,CAEA,MAAO,CACN,MAAO,EAAc,CAAE,IAAK,KAAM,OAAQ,GAAM,IAChD,MAAO,EAAc,CAAE,IAAK,KAAM,OAAQ,GAAM,IAChD,MAAO,EAAc,CAAE,IAAK,KAAM,OAAQ,GAAM,IAChD,OAAQ,EAAc,CAAE,KAAM,UAAW,EACzC,OAAQ,EAAc,CAAE,KAAM,UAAW,EACzC,OAAQ,EAAc,CAAE,KAAM,UAAW,EACzC,MAAO,EAAc,CAAE,IAAK,IAAK,YAAa,KAAM,EACpD,MAAO,EAAc,CAAE,IAAK,IAAK,YAAa,KAAM,EACpD,MAAO,EAAc,CAAE,MAAO,cAAe,IAAK,YAAa,EAC/D,MAAO,EAAc,CAAE,QAAS,gBAAiB,IAAK,YAAa,EACnE,MAAO,EAAc,CAAE,OAAQ,eAAgB,IAAK,YAAa,CAClE,CAED,CAEA,SAAS,EAAY,CAAI,CAAE,CAAM,MAM5B,EAFJ,IAAM,EAAS,IAKX,EAAO,EACoC,QAAxC,CAAA,EAAS,AAFI,yBAEQ,IAAI,CAAE,EAAA,GAEjC,CAAA,EAAO,CAAM,CAAE,EAAG,AAAH,EAIhB,IAAM,EAAQ,EAAK,KAAK,CAAE,cACtB,EAAiB,EACjB,EAAsB,EACtB,EAAc,EAAO,QAAQ,CAAE,EAAgB,CAC/C,EAAe,EAAsB,EAAY,UAAU,EAE/D,IAAM,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAO,CAEzC,IAAI,EAAO,CAAK,CAAE,EAAG,CAErB,GAAK,AAAS,KADd,CAAA,EAAO,EAAK,IAAI,EAAhB,EAGC,SAII,GAAuB,EAAY,KAAK,GAE5C,IACA,EAAsB,EAGtB,EAAe,EAAsB,AAFrC,CAAA,EAAc,EAAO,QAAQ,CAAE,EAAgB,AAAhB,EAEkB,UAAU,GAI5D,IAAM,EAAU,AAtIlB,SAA4B,CAAU,CAAE,CAAI,EAE3C,IAAM,EAAS,EAAK,KAAK,CAAE,OAErB,EAAU,CAAC,EAEjB,IAAM,IAAI,EAAI,EAAG,EAAI,EAAW,MAAM,CAAE,IAEvC,GAAK,AAAyB,SAAzB,CAAU,CAAE,EAAG,CAAC,IAAI,CAAc,CAEtC,IAAM,EAAO,EAAE,CACT,EAAI,EAAkB,EAAO,KAAK,GAAI,CAAU,CAAE,EAAG,CAAC,SAAS,EAErE,IAAM,IAAI,EAAI,EAAG,EAAI,EAAG,IAEvB,EAAK,IAAI,CAAE,EAAkB,EAAO,KAAK,GAAI,CAAU,CAAE,EAAG,CAAC,QAAQ,EAItE,CAAA,CAAO,CAAE,CAAU,CAAE,EAAG,CAAC,IAAI,CAAE,CAAG,CAEnC,MAEC,CAAO,CAAE,CAAU,CAAE,EAAG,CAAC,IAAI,CAAE,CAAG,EAAkB,EAAO,KAAK,GAAI,CAAU,CAAE,EAAG,CAAC,IAAI,EAM1F,OAAO,CAER,EAuGqC,EAAY,UAAU,CAAE,GAE3D,EAAe,EAAQ,EAAY,IAAI,CAAE,EAAS,GAElD,GAED,CAEA,OAAO,EAAa,EAErB,CAEA,SAAS,EAAa,CAAM,EAE3B,IAAI,EAAW,IAAI,EAAA,cAAa,CAyChC,IAAM,IAAM,KArCP,EAAO,OAAO,CAAC,MAAM,CAAG,GAE5B,EAAS,QAAQ,CAAE,EAAO,OAAO,EAIlC,EAAS,YAAY,CAAE,WAAY,IAAI,EAAA,sBAAqB,CAAG,EAAO,QAAQ,CAAE,IAI3E,EAAO,OAAO,CAAC,MAAM,CAAG,GAE5B,EAAS,YAAY,CAAE,SAAU,IAAI,EAAA,sBAAqB,CAAG,EAAO,OAAO,CAAE,IAIzE,EAAO,GAAG,CAAC,MAAM,CAAG,GAExB,EAAS,YAAY,CAAE,KAAM,IAAI,EAAA,sBAAqB,CAAG,EAAO,GAAG,CAAE,IAIjE,EAAO,MAAM,CAAC,MAAM,CAAG,GAE3B,EAAS,YAAY,CAAE,QAAS,IAAI,EAAA,sBAAqB,CAAG,EAAO,MAAM,CAAE,IAIvE,EAAO,aAAa,CAAC,MAAM,CAAG,GAGlC,AADA,CAAA,EAAW,EAAS,YAAY,EAAhC,EACS,YAAY,CAAE,KAAM,IAAI,EAAA,sBAAqB,CAAG,EAAO,aAAa,CAAE,IAMlD,OAAO,IAAI,CAAE,EAAM,qBAAqB,GAEhE,CAAM,CAAE,EAAgB,CAAC,MAAM,CAAG,GAEpC,EAAS,YAAY,CACtB,EACA,IAAI,EAAA,sBAAqB,CACtB,CAAM,CAAE,EAAgB,CACxB,EAAM,qBAAqB,CAAE,EAAgB,CAAC,MAAM,GAU1D,OAFA,EAAS,qBAAqB,GAEvB,CAER,CAEA,SAAS,EAAe,CAAM,CAAE,CAAW,CAAE,CAAO,CAAE,CAAU,EAE/D,GAAK,AAAgB,WAAhB,EA4BJ,IAAM,IAAM,KA1BZ,EAAO,QAAQ,CAAC,IAAI,CAAE,CAAO,CAAE,EAAW,KAAK,CAAE,CAAE,CAAO,CAAE,EAAW,KAAK,CAAE,CAAE,CAAO,CAAE,EAAW,KAAK,CAAE,EAEhF,OAAtB,EAAW,MAAM,EAAa,AAAsB,OAAtB,EAAW,MAAM,EAAa,AAAsB,OAAtB,EAAW,MAAM,EAEjF,EAAO,OAAO,CAAC,IAAI,CAAE,CAAO,CAAE,EAAW,MAAM,CAAE,CAAE,CAAO,CAAE,EAAW,MAAM,CAAE,CAAE,CAAO,CAAE,EAAW,MAAM,CAAE,EAIpF,OAArB,EAAW,KAAK,EAAa,AAAqB,OAArB,EAAW,KAAK,EAEjD,EAAO,GAAG,CAAC,IAAI,CAAE,CAAO,CAAE,EAAW,KAAK,CAAE,CAAE,CAAO,CAAE,EAAW,KAAK,CAAE,EAIhD,OAArB,EAAW,KAAK,EAAa,AAAqB,OAArB,EAAW,KAAK,EAAa,AAAqB,OAArB,EAAW,KAAK,GAE9E,EAAO,MAAM,CACZ,CAAO,CAAE,EAAW,KAAK,CAAE,CAAG,IAC9B,CAAO,CAAE,EAAW,KAAK,CAAE,CAAG,IAC9B,CAAO,CAAE,EAAW,KAAK,CAAE,CAAG,KAC7B,mBAAmB,GAErB,EAAO,MAAM,CAAC,IAAI,CAAE,EAAO,CAAC,CAAE,EAAO,CAAC,CAAE,EAAO,CAAC,GAInB,OAAO,IAAI,CAAE,EAAM,qBAAqB,GAErE,IAAM,IAAM,KAAmB,EAAM,qBAAqB,CAAE,EAAgB,CAE1E,CAAM,CAAE,EAAgB,CAAC,IAAI,CAAE,CAAO,CAAE,EAAiB,OAMtD,GAAK,AAAgB,SAAhB,EAAyB,CAEpC,IAAM,EAAiB,EAAQ,cAAc,EAAI,EAAQ,YAAY,CAC/D,EAAW,EAAQ,QAAQ,AAE5B,AAA0B,CAAA,IAA1B,EAAe,MAAM,EAEzB,EAAO,OAAO,CAAC,IAAI,CAAE,CAAc,CAAE,EAAG,CAAE,CAAc,CAAE,EAAG,CAAE,CAAc,CAAE,EAAG,EAE7E,GAAY,AAAoB,IAApB,EAAS,MAAM,GAE/B,EAAO,aAAa,CAAC,IAAI,CAAE,CAAQ,CAAE,EAAG,CAAE,CAAQ,CAAE,EAAG,EACvD,EAAO,aAAa,CAAC,IAAI,CAAE,CAAQ,CAAE,EAAG,CAAE,CAAQ,CAAE,EAAG,EACvD,EAAO,aAAa,CAAC,IAAI,CAAE,CAAQ,CAAE,EAAG,CAAE,CAAQ,CAAE,EAAG,IAInB,IAA1B,EAAe,MAAM,GAEhC,EAAO,OAAO,CAAC,IAAI,CAAE,CAAc,CAAE,EAAG,CAAE,CAAc,CAAE,EAAG,CAAE,CAAc,CAAE,EAAG,EAClF,EAAO,OAAO,CAAC,IAAI,CAAE,CAAc,CAAE,EAAG,CAAE,CAAc,CAAE,EAAG,CAAE,CAAc,CAAE,EAAG,EAIpF,CAED,CAqLA,IAAM,EAAQ,IAAI,CAElB,GAAK,aAAgB,YAAc,CAElC,IAAM,EAAQ,IAAI,WAAY,GAExB,EAAS,EADI,AA1CpB,SAA4B,CAAK,EAEhC,IAAI,EAAI,EACJ,EAAO,CAAA,EAEP,EAAO,GACL,EAAQ,EAAE,CAEhB,EAAG,CAEF,IAAM,EAAI,OAAO,YAAY,CAAE,CAAK,CAAE,IAAM,CAEvC,AAAM,CAAA,OAAN,GAAc,AAAM,OAAN,EAElB,GAAQ,GAIM,eAAT,GAAwB,CAAA,EAAO,CAAA,CAApC,EACc,KAAT,IAEJ,EAAM,IAAI,CAAE,GACZ,EAAO,IAMV,OAAU,GAAQ,EAAI,EAAM,MAAM,CAAG,AAErC,OAAO,EAAM,IAAI,CAAE,MAAS,IAE7B,EAUuC,IAOrC,EAJI,AAAkB,UAAlB,EAAO,MAAM,CAIN,EAFE,IAAI,cAAc,MAAM,CAAE,GAEV,GAIlB,AArFb,SAAsB,CAAI,CAAE,CAAM,EAEjC,IAAM,EAAS,IAET,EAAkB,AAAkB,yBAAlB,EAAO,MAAM,CAC/B,EAAO,IAAI,SAAU,EAAM,EAAO,YAAY,EAChD,EAAQ,EAAM,EAElB,IAAM,IAAI,EAAiB,EAAG,EAAiB,EAAO,QAAQ,CAAC,MAAM,CAAE,IAAoB,CAE1F,IAAM,EAAc,EAAO,QAAQ,CAAE,EAAgB,CAC/C,EAAa,EAAY,UAAU,CACnC,EAAe,EAAsB,IAE3C,AArFF,SAAmC,CAAU,CAAE,CAAI,CAAE,CAAa,EAEjE,SAAS,EAAiB,CAAQ,CAAE,CAAI,CAAE,CAAa,EAEtD,OAAS,GAGR,IAAK,OAAQ,IAAK,OAAQ,MAAO,CAAE,KAAM,AAAE,GAEnC,EAAS,OAAO,CAAE,GAEvB,KAAM,CAAE,CACX,KAAK,QAAS,IAAK,QAAS,MAAO,CAAE,KAAM,AAAE,GAErC,EAAS,QAAQ,CAAE,GAExB,KAAM,CAAE,CACX,KAAK,QAAS,IAAK,QAAS,MAAO,CAAE,KAAM,AAAE,GAErC,EAAS,QAAQ,CAAE,EAAI,GAE5B,KAAM,CAAE,CACX,KAAK,SAAU,IAAK,SAAU,MAAO,CAAE,KAAM,AAAE,GAEvC,EAAS,SAAS,CAAE,EAAI,GAE7B,KAAM,CAAE,CACX,KAAK,QAAS,IAAK,MAAQ,MAAO,CAAE,KAAM,AAAE,GAEpC,EAAS,QAAQ,CAAE,EAAI,GAE5B,KAAM,CAAE,CACX,KAAK,SAAU,IAAK,OAAQ,MAAO,CAAE,KAAM,AAAE,GAErC,EAAS,SAAS,CAAE,EAAI,GAE7B,KAAM,CAAE,CACX,KAAK,UAAW,IAAK,QAAS,MAAO,CAAE,KAAM,AAAE,GAEvC,EAAS,UAAU,CAAE,EAAI,GAE9B,KAAM,CAAE,CACX,KAAK,UAAW,IAAK,SAAU,MAAO,CAAE,KAAM,AAAE,GAExC,EAAS,UAAU,CAAE,EAAI,GAE9B,KAAM,CAAE,CAEZ,CAED,CAEA,IAAM,IAAI,EAAI,EAAG,EAAI,EAAW,MAAM,CAAE,EAAI,EAAG,IAAO,CAErD,IAAM,EAAW,CAAU,CAAE,EAAG,AAE3B,AAAkB,CAAA,SAAlB,EAAS,IAAI,EAEjB,EAAS,WAAW,CAAG,EAAiB,EAAM,EAAS,SAAS,CAAE,GAClE,EAAS,WAAW,CAAG,EAAiB,EAAM,EAAS,QAAQ,CAAE,IAIjE,EAAS,WAAW,CAAG,EAAiB,EAAM,EAAS,IAAI,CAAE,EAI/D,CAED,EAgB4B,EAAY,EAAM,GAE5C,IAAM,IAAI,EAAsB,EAAG,EAAsB,EAAY,KAAK,CAAE,IAAyB,CAEpG,EAAS,AAhIZ,SAA4B,CAAE,CAAE,CAAU,EAEzC,IAAM,EAAU,CAAC,EACb,EAAO,EAEX,IAAM,IAAI,EAAI,EAAG,EAAI,EAAW,MAAM,CAAE,IAAO,CAE9C,IAAM,EAAW,CAAU,CAAE,EAAG,CAC1B,EAAc,EAAS,WAAW,CAExC,GAAK,AAAkB,SAAlB,EAAS,IAAI,CAAc,CAE/B,IAAM,EAAO,EAAE,CAET,EAAI,EAAS,WAAW,CAAC,IAAI,CAAE,EAAK,GAC1C,GAAQ,EAAS,WAAW,CAAC,IAAI,CAEjC,IAAM,IAAI,EAAI,EAAG,EAAI,EAAG,IAEvB,EAAK,IAAI,CAAE,EAAY,IAAI,CAAE,EAAK,IAClC,GAAQ,EAAY,IAAI,AAIzB,CAAA,CAAO,CAAE,EAAS,IAAI,CAAE,CAAG,CAE5B,MAEC,CAAO,CAAE,EAAS,IAAI,CAAE,CAAG,EAAY,IAAI,CAAE,EAAK,GAClD,GAAQ,EAAY,IAAI,AAI1B,CAEA,MAAO,CAAE,EAAS,EAAM,AAEzB,EA2F+B,EAAK,GACjC,GAAO,CAAM,CAAE,EAAG,CAClB,IAAM,EAAU,CAAM,CAAE,EAAG,CAE3B,EAAe,EAAQ,EAAY,IAAI,CAAE,EAAS,EAEnD,CAED,CAEA,OAAO,EAAa,EAErB,EAuD0B,EAAM,EAIhC,MAEC,EAAW,EAAY,EAAM,EAAa,IAI3C,OAAO,CAER,CAED,C,I,E,E,S,E,E,S,E,E,S,E,E,QDntBA,CAAA,EAAA,IAAA,CAAW,SAAS,CAAC,OAAO,CAAG,EAAA,kBAAiB,CAChD,EAAA,cAAA,CAAqB,SAAS,CAAC,iBAAiB,CAAG,EAAA,iBAAgB,CACnE,EAAA,cAAA,CAAqB,SAAS,CAAC,iBAAiB,CAAG,EAAA,iBAAgB,CAInE,IAAI,EAAQ,IAAI,EAAhB,OAAA,CAIA,MAAM,EAAY,IAAI,EAAtB,SAAA,CACM,EAAS,CAEd,cAAe,CAAA,EACf,YAAa,GACb,eAAgB,CAAA,EAEhB,SAAU,EAAA,MAAK,CACf,UAAW,KACX,iBAAkB,KAClB,OAAQ,CAAA,CAET,EAkHA,OAAO,gBAAgB,CAAE,cAAe,AAAE,IAEzC,GAAK,CAAE,EAEN,MAID,CAAA,EAAM,CAAC,CAAG,EAAQ,OAAO,CAAG,OAAO,UAAU,CAAK,EAAI,EACtD,EAAM,CAAC,CAAG,CAAA,CAAA,AAAI,EAAM,OAAO,CAAG,OAAO,WAAU,CAAM,CAAA,EAAI,EACzD,EAAU,aAAa,CAAE,EAAO,GAEhC,IAAM,EAAY,OAAO,WAAW,CAAC,GAAG,GACxC,GAAK,EAAO,MAAM,CAAG,CAEpB,EAAgB,OAAO,CAAG,CAAA,EAE1B,IAAM,EAAgB,IAAI,EAA1B,OAAA,CACA,EAAc,IAAI,CAAE,EAAQ,WAAW,EAAG,MAAM,GAChD,EAAU,GAAG,CAAC,YAAY,CAAE,GAG5B,IAAM,EAAiB,AADL,EAAU,MAAM,CAAC,MAAM,CAAC,SAAS,CACZ,CAAA,AAAA,CAAA,EAAQ,KAAK,CAAC,CAAC,CAAG,EAAQ,KAAK,CAAC,CAAC,CAAG,EAAQ,KAAK,CAAC,CAAA,AAAA,EAAM,CAAA,EACzF,EAAmB,EAAiB,EAEpC,CAAA,IAAE,CAAG,CAAE,CAAG,EACZ,EAAkB,IACtB,EAAQ,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAE,CACtC,oBAAqB,AAAA,GAGb,EAAI,eAAe,CAAE,EAAI,MAAM,EAGvC,iBAAkB,CAAE,EAAK,EAAQ,IAIhC,AAAK,EAAQ,EAEL,EAFR,eAAA,EAMA,EAAI,cAAc,CAAE,GACb,EAAI,aAAa,CAAE,GAAQ,EAAA,WAAU,CAAI,EAAA,eAAc,EAG/D,mBAAoB,AAAA,IAGnB,GAAK,AADoB,EAAI,iBAAiB,CAAE,EAAS,CAAC,EAClC,EAAmB,CAI1C,IAAM,EAAkB,EAAI,MAAM,CAAC,UAAU,CAAE,EAAS,CAAC,EACpD,EAAkB,IAEtB,EAAkB,EAClB,EAAgB,QAAQ,CAAC,IAAI,CAAE,EAAS,CAAC,EAAG,YAAY,CAAE,EAAQ,WAAW,EAC7E,EAAgB,OAAO,CAAG,CAAA,EAI5B,CAED,CACD,EAED,KAAO,CAGN,IAAM,EAAM,AADO,EAAU,eAAe,CAAE,EAAY,CAAA,EACpC,CAAE,EAAG,CACtB,GAEJ,EAAgB,QAAQ,CAAC,IAAI,CAAE,EAAI,KAAK,EACxC,EAAgB,OAAO,CAAG,CAAA,GAI1B,EAAgB,OAAO,CAAG,CAAA,CAI5B,CAEA,IAAM,EAAQ,OAAO,WAAW,CAAC,GAAG,GAAK,CACzC,CAAA,EAAgB,SAAS,CAAG,CAAC,EAAG,EAAM,OAAO,CAAE,GAAK,EAAE,CAAC,AAExD,EAAG,CAAA,GAsBH,AA/NA,WAIC,EAAkB,SAAS,cAAc,CAAE,UAI3C,AADA,CAAA,EAAW,IAAI,EAAA,aAAA,CAAqB,CAAE,UAAW,CAAA,CAAK,EAAA,EAC7C,aAAa,CAAE,OAAO,gBAAgB,EAC/C,EAAS,OAAO,CAAE,OAAO,UAAU,CAAE,OAAO,WAAW,EACvD,EAAS,aAAa,CARN,QAQiB,GACjC,SAAS,IAAI,CAAC,WAAW,CAAE,EAAS,UAAU,EAG9C,EAAQ,IAAI,EAAZ,KAAA,CAIA,AADA,CAAA,EAAS,IAAI,EAAA,iBAAA,CAAyB,GAAI,OAAO,UAAU,CAAG,OAAO,WAAW,CAAE,GAAK,GAAvF,EACO,QAAQ,CAAC,GAAG,CAAE,EAAG,EAAG,GAC3B,EAAO,GAAG,CAAG,IACb,EAAO,sBAAsB,GAE7B,IAAI,EAAA,aAAY,CAAG,EAAQ,EAAS,UAAU,EAG9C,EAAQ,IAAI,EAAA,OAAI,CAChB,SAAS,IAAI,CAAC,WAAW,CAAE,EAAM,GAAG,EAGpC,OAAO,gBAAgB,CAAE,SAAU,WAElC,EAAO,MAAM,CAAG,OAAO,UAAU,CAAG,OAAO,WAAW,CACtD,EAAO,sBAAsB,GAE7B,EAAS,OAAO,CAAE,OAAO,UAAU,CAAE,OAAO,WAAW,CAExD,EAAG,CAAA,GAIH,AADe,IAAI,IAEjB,IAAI,CAxDS,4DAwDE,AAAA,IAEf,EAAS,MAAM,GACf,IAAM,EAAW,IAAI,EAAA,cAAA,CAAsB,CAAE,KAAM,EAAO,SAAS,CAAE,aAAc,CAAA,CAAK,EAExF,CADA,CAAA,EAAa,IAAI,EAAA,MAAA,CAAc,EAAU,EAAzC,EACW,gBAAgB,CAAG,CAAA,EAE9B,EAAM,GAAG,CAAE,GAGX,IAAM,EAAU,EAAE,CACZ,EAAc,EAAS,KAAK,GAC9B,EAAiB,EAAY,UAAU,CAAC,QAAQ,CAAC,KAAK,CAC1D,IAAM,IAAI,EAAI,EAAuB,EAAhB,EAAuB,IAE3C,EAAQ,IAAI,CAAE,EAAG,EAAG,GAIrB,EAAY,QAAQ,CAAE,GACtB,IAAM,EAAc,IAAI,EAAA,iBAAA,CAAyB,CAAE,MAAO,QAAS,GACnE,EAAU,IAAI,EAAA,IAAA,CAAY,EAAa,GAEvC,QAAQ,IAAI,CAAE,qBACd,EAAQ,QAAQ,CAAC,iBAAiB,CAAE,CAAE,KAAM,EAAO,IAAI,AAAC,GACxD,QAAQ,OAAO,CAAE,qBAEjB,EAAS,IAAI,EAAA,aAAY,CAAG,EAAS,EAAO,KAAK,EACjD,EAAM,GAAG,CAAE,EAEZ,GAED,IAAM,EAAW,IAAI,EAAA,cAAA,CAAsB,IAAM,GAAI,IAC/C,EAAW,IAAI,EAAA,iBAAA,CAAyB,CAAE,MAAO,SAAU,QAAS,GAAK,YAAa,CAAA,CAAK,EAEjG,CADA,CAAA,EAAkB,IAAI,EAAA,IAAA,CAAY,EAAU,EAA5C,EACgB,OAAO,CAAG,CAAA,EAC1B,EAAM,GAAG,CAAE,GAEX,IAAM,EAAM,IAAI,EAAA,GAAE,CACZ,EAAe,EAAI,SAAS,CAAE,UACpC,EAAa,GAAG,CAAE,EAAQ,iBAC1B,EAAa,GAAG,CAAE,EAAQ,kBAAmB,QAAQ,CAAE,AAAA,IAEtD,EAAO,cAAc,CAAG,EACxB,EAAO,MAAM,EAEd,GACA,EAAa,GAAG,CAAE,EAAQ,cAAe,EAAG,GAAI,GAAI,IAAI,CAAE,SAAU,QAAQ,CAAE,AAAA,IAE7E,EAAO,KAAK,CAAG,SAAU,GACzB,EAAO,MAAM,EAEd,GACA,EAAa,IAAI,GAEjB,IAAM,EAAe,EAAI,SAAS,CAAE,UACpC,EAAa,GAAG,CAAE,EAAQ,UAC1B,EAAa,GAAG,CAAE,EAAQ,WAAY,CAAE,OAAA,EAAA,MAAA,CAAQ,QAAA,EAAA,OAAA,CAAS,IAAA,EAAA,GAAA,AAAI,GAAI,QAAQ,CAAE,AAAA,IAE1E,QAAQ,IAAI,CAAE,qBACd,EAAQ,QAAQ,CAAC,iBAAiB,CAAE,CAAE,SAAU,SAAU,EAAI,GAC9D,QAAQ,OAAO,CAAE,qBACjB,EAAO,MAAM,EAEd,GACA,EAAa,GAAG,CAAE,EAAQ,YAAa,KAAO,IAAM,MACpD,EAAa,GAAG,CAAE,EAAQ,mBAAoB,KAAO,IAAM,MAC3D,EAAa,IAAI,EAElB,IAkHA,AArBA,SAAS,IAER,sBAAuB,GAElB,IAEJ,EAAW,QAAQ,CAAC,IAAI,CAAG,EAAO,SAAS,CAC3C,EAAO,OAAO,CAAG,EAAO,aAAa,CACrC,EAAU,MAAM,CAAC,MAAM,CAAC,SAAS,CAAG,EAAO,gBAAgB,EAI5D,EAAM,KAAK,GAEX,EAAS,MAAM,CAAE,EAAO,GACxB,EAAM,GAAG,EAEV","sources":["<anon>","node_modules/stats.js/src/Stats.js","src/utils/ExtensionUtilities.js","src/utils/GeometryRayIntersectUtilities.js","src/objects/MeshBVHHelper.js","example/pointCloudIntersection.js","node_modules/three/examples/jsm/loaders/PLYLoader.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4485\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4485\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"hBOJ2\", function(module, exports) {\n\n$parcel$export(module.exports, \"default\", () => $cd1d3d651be7f2fc$export$2e2bcd8739ae039);\n/**\n * @author mrdoob / http://mrdoob.com/\n */ var $cd1d3d651be7f2fc$export$2e2bcd8739ae039 = function() {\n    var mode = 0;\n    var container = document.createElement(\"div\");\n    container.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n    container.addEventListener(\"click\", function(event) {\n        event.preventDefault();\n        showPanel(++mode % container.children.length);\n    }, false);\n    //\n    function addPanel(panel) {\n        container.appendChild(panel.dom);\n        return panel;\n    }\n    function showPanel(id) {\n        for(var i = 0; i < container.children.length; i++)container.children[i].style.display = i === id ? \"block\" : \"none\";\n        mode = id;\n    }\n    //\n    var beginTime = (performance || Date).now(), prevTime = beginTime, frames = 0;\n    var fpsPanel = addPanel(new $cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel(\"FPS\", \"#0ff\", \"#002\"));\n    var msPanel = addPanel(new $cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel(\"MS\", \"#0f0\", \"#020\"));\n    if (self.performance && self.performance.memory) var memPanel = addPanel(new $cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel(\"MB\", \"#f08\", \"#201\"));\n    showPanel(0);\n    return {\n        REVISION: 16,\n        dom: container,\n        addPanel: addPanel,\n        showPanel: showPanel,\n        begin: function() {\n            beginTime = (performance || Date).now();\n        },\n        end: function() {\n            frames++;\n            var time = (performance || Date).now();\n            msPanel.update(time - beginTime, 200);\n            if (time > prevTime + 1000) {\n                fpsPanel.update(frames * 1000 / (time - prevTime), 100);\n                prevTime = time;\n                frames = 0;\n                if (memPanel) {\n                    var memory = performance.memory;\n                    memPanel.update(memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576);\n                }\n            }\n            return time;\n        },\n        update: function() {\n            beginTime = this.end();\n        },\n        // Backwards Compatibility\n        domElement: container,\n        setMode: showPanel\n    };\n};\n$cd1d3d651be7f2fc$export$2e2bcd8739ae039.Panel = function(name, fg, bg) {\n    var min = Infinity, max = 0, round = Math.round;\n    var PR = round(window.devicePixelRatio || 1);\n    var WIDTH = 80 * PR, HEIGHT = 48 * PR, TEXT_X = 3 * PR, TEXT_Y = 2 * PR, GRAPH_X = 3 * PR, GRAPH_Y = 15 * PR, GRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n    var canvas = document.createElement(\"canvas\");\n    canvas.width = WIDTH;\n    canvas.height = HEIGHT;\n    canvas.style.cssText = \"width:80px;height:48px\";\n    var context = canvas.getContext(\"2d\");\n    context.font = \"bold \" + 9 * PR + \"px Helvetica,Arial,sans-serif\";\n    context.textBaseline = \"top\";\n    context.fillStyle = bg;\n    context.fillRect(0, 0, WIDTH, HEIGHT);\n    context.fillStyle = fg;\n    context.fillText(name, TEXT_X, TEXT_Y);\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    context.fillStyle = bg;\n    context.globalAlpha = 0.9;\n    context.fillRect(GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT);\n    return {\n        dom: canvas,\n        update: function(value, maxValue) {\n            min = Math.min(min, value);\n            max = Math.max(max, value);\n            context.fillStyle = bg;\n            context.globalAlpha = 1;\n            context.fillRect(0, 0, WIDTH, GRAPH_Y);\n            context.fillStyle = fg;\n            context.fillText(round(value) + \" \" + name + \" (\" + round(min) + \"-\" + round(max) + \")\", TEXT_X, TEXT_Y);\n            context.drawImage(canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT);\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT);\n            context.fillStyle = bg;\n            context.globalAlpha = 0.9;\n            context.fillRect(GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round((1 - value / maxValue) * GRAPH_HEIGHT));\n        }\n    };\n};\n\n});\n\nparcelRegister(\"4h5hN\", function(module, exports) {\n\n$parcel$export(module.exports, \"acceleratedRaycast\", () => $31ccd9a92979d6bb$export$a0dc2935489c814a);\n$parcel$export(module.exports, \"computeBoundsTree\", () => $31ccd9a92979d6bb$export$749bba8a65fa6d70);\n$parcel$export(module.exports, \"disposeBoundsTree\", () => $31ccd9a92979d6bb$export$e0a981a7a32ddba4);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $b4YKL = parcelRequire(\"b4YKL\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $31ccd9a92979d6bb$var$ray = /* @__PURE__ */ new (0, $ilwiq.Ray)();\nconst $31ccd9a92979d6bb$var$tmpInverseMatrix = /* @__PURE__ */ new (0, $ilwiq.Matrix4)();\nconst $31ccd9a92979d6bb$var$origMeshRaycastFunc = (0, $ilwiq.Mesh).prototype.raycast;\nfunction $31ccd9a92979d6bb$export$a0dc2935489c814a(raycaster, intersects) {\n    if (this.geometry.boundsTree) {\n        if (this.material === undefined) return;\n        $31ccd9a92979d6bb$var$tmpInverseMatrix.copy(this.matrixWorld).invert();\n        $31ccd9a92979d6bb$var$ray.copy(raycaster.ray).applyMatrix4($31ccd9a92979d6bb$var$tmpInverseMatrix);\n        const bvh = this.geometry.boundsTree;\n        if (raycaster.firstHitOnly === true) {\n            const hit = (0, $b4YKL.convertRaycastIntersect)(bvh.raycastFirst($31ccd9a92979d6bb$var$ray, this.material), this, raycaster);\n            if (hit) intersects.push(hit);\n        } else {\n            const hits = bvh.raycast($31ccd9a92979d6bb$var$ray, this.material);\n            for(let i = 0, l = hits.length; i < l; i++){\n                const hit = (0, $b4YKL.convertRaycastIntersect)(hits[i], this, raycaster);\n                if (hit) intersects.push(hit);\n            }\n        }\n    } else $31ccd9a92979d6bb$var$origMeshRaycastFunc.call(this, raycaster, intersects);\n}\nfunction $31ccd9a92979d6bb$export$749bba8a65fa6d70(options) {\n    this.boundsTree = new (0, $ff8ed.MeshBVH)(this, options);\n    return this.boundsTree;\n}\nfunction $31ccd9a92979d6bb$export$e0a981a7a32ddba4() {\n    this.boundsTree = null;\n}\n\n});\nparcelRegister(\"b4YKL\", function(module, exports) {\n\n$parcel$export(module.exports, \"convertRaycastIntersect\", () => $810f31c6ff4f494e$export$adb106eed99e8cd8);\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nfunction $810f31c6ff4f494e$export$adb106eed99e8cd8(hit, object, raycaster) {\n    if (hit === null) return null;\n    hit.point.applyMatrix4(object.matrixWorld);\n    hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n    hit.object = object;\n    if (hit.distance < raycaster.near || hit.distance > raycaster.far) return null;\n    else return hit;\n}\n\n});\n\n\nparcelRegister(\"5ca9G\", function(module, exports) {\n\n$parcel$export(module.exports, \"MeshBVHHelper\", () => $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $aw71y = parcelRequire(\"aw71y\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $3c85f35a8c29fa9b$var$boundingBox = /* @__PURE__ */ new (0, $ilwiq.Box3)();\nclass $3c85f35a8c29fa9b$var$MeshBVHRootHelper extends (0, $ilwiq.Object3D) {\n    get isMesh() {\n        return !this.displayEdges;\n    }\n    get isLineSegments() {\n        return this.displayEdges;\n    }\n    get isLine() {\n        return this.displayEdges;\n    }\n    constructor(bvh, material, depth = 10, group = 0){\n        super();\n        this.material = material;\n        this.geometry = new (0, $ilwiq.BufferGeometry)();\n        this.name = \"MeshBVHRootHelper\";\n        this.depth = depth;\n        this.displayParents = false;\n        this.bvh = bvh;\n        this.displayEdges = true;\n        this._group = group;\n    }\n    raycast() {}\n    update() {\n        const geometry = this.geometry;\n        const boundsTree = this.bvh;\n        const group = this._group;\n        geometry.dispose();\n        this.visible = false;\n        if (boundsTree) {\n            // count the number of bounds required\n            const targetDepth = this.depth - 1;\n            const displayParents = this.displayParents;\n            let boundsCount = 0;\n            boundsTree.traverse((depth, isLeaf)=>{\n                if (depth >= targetDepth || isLeaf) {\n                    boundsCount++;\n                    return true;\n                } else if (displayParents) boundsCount++;\n            }, group);\n            // fill in the position buffer with the bounds corners\n            let posIndex = 0;\n            const positionArray = new Float32Array(24 * boundsCount);\n            boundsTree.traverse((depth, isLeaf, boundingData)=>{\n                const terminate = depth >= targetDepth || isLeaf;\n                if (terminate || displayParents) {\n                    (0, $aw71y.arrayToBox)(0, boundingData, $3c85f35a8c29fa9b$var$boundingBox);\n                    const { min: min, max: max } = $3c85f35a8c29fa9b$var$boundingBox;\n                    for(let x = -1; x <= 1; x += 2){\n                        const xVal = x < 0 ? min.x : max.x;\n                        for(let y = -1; y <= 1; y += 2){\n                            const yVal = y < 0 ? min.y : max.y;\n                            for(let z = -1; z <= 1; z += 2){\n                                const zVal = z < 0 ? min.z : max.z;\n                                positionArray[posIndex + 0] = xVal;\n                                positionArray[posIndex + 1] = yVal;\n                                positionArray[posIndex + 2] = zVal;\n                                posIndex += 3;\n                            }\n                        }\n                    }\n                    return terminate;\n                }\n            }, group);\n            let indexArray;\n            let indices;\n            if (this.displayEdges) // fill in the index buffer to point to the corner points\n            indices = new Uint8Array([\n                // x axis\n                0,\n                4,\n                1,\n                5,\n                2,\n                6,\n                3,\n                7,\n                // y axis\n                0,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                7,\n                // z axis\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7\n            ]);\n            else indices = new Uint8Array([\n                // X-, X+\n                0,\n                1,\n                2,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                6,\n                7,\n                5,\n                // Y-, Y+\n                1,\n                4,\n                5,\n                0,\n                4,\n                1,\n                2,\n                3,\n                6,\n                3,\n                7,\n                6,\n                // Z-, Z+\n                0,\n                2,\n                4,\n                2,\n                6,\n                4,\n                1,\n                5,\n                3,\n                3,\n                5,\n                7\n            ]);\n            if (positionArray.length > 65535) indexArray = new Uint32Array(indices.length * boundsCount);\n            else indexArray = new Uint16Array(indices.length * boundsCount);\n            const indexLength = indices.length;\n            for(let i = 0; i < boundsCount; i++){\n                const posOffset = i * 8;\n                const indexOffset = i * indexLength;\n                for(let j = 0; j < indexLength; j++)indexArray[indexOffset + j] = posOffset + indices[j];\n            }\n            // update the geometry\n            geometry.setIndex(new (0, $ilwiq.BufferAttribute)(indexArray, 1, false));\n            geometry.setAttribute(\"position\", new (0, $ilwiq.BufferAttribute)(positionArray, 3, false));\n            this.visible = true;\n        }\n    }\n}\nclass $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 extends (0, $ilwiq.Group) {\n    get color() {\n        return this.edgeMaterial.color;\n    }\n    get opacity() {\n        return this.edgeMaterial.opacity;\n    }\n    set opacity(v) {\n        this.edgeMaterial.opacity = v;\n        this.meshMaterial.opacity = v;\n    }\n    constructor(mesh = null, bvh = null, depth = 10){\n        // handle bvh, depth signature\n        if (mesh instanceof (0, $ff8ed.MeshBVH)) {\n            depth = bvh || 10;\n            bvh = mesh;\n            mesh = null;\n        }\n        // handle mesh, depth signature\n        if (typeof bvh === \"number\") {\n            depth = bvh;\n            bvh = null;\n        }\n        super();\n        this.name = \"MeshBVHHelper\";\n        this.depth = depth;\n        this.mesh = mesh;\n        this.bvh = bvh;\n        this.displayParents = false;\n        this.displayEdges = true;\n        this._roots = [];\n        const edgeMaterial = new (0, $ilwiq.LineBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        const meshMaterial = new (0, $ilwiq.MeshBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        meshMaterial.color = edgeMaterial.color;\n        this.edgeMaterial = edgeMaterial;\n        this.meshMaterial = meshMaterial;\n        this.update();\n    }\n    update() {\n        const bvh = this.bvh || this.mesh.geometry.boundsTree;\n        const totalRoots = bvh ? bvh._roots.length : 0;\n        while(this._roots.length > totalRoots){\n            const root = this._roots.pop();\n            root.geometry.dispose();\n            this.remove(root);\n        }\n        for(let i = 0; i < totalRoots; i++){\n            const { depth: depth, edgeMaterial: edgeMaterial, meshMaterial: meshMaterial, displayParents: displayParents, displayEdges: displayEdges } = this;\n            if (i >= this._roots.length) {\n                const root = new $3c85f35a8c29fa9b$var$MeshBVHRootHelper(bvh, edgeMaterial, depth, i);\n                this.add(root);\n                this._roots.push(root);\n            }\n            const root = this._roots[i];\n            root.bvh = bvh;\n            root.depth = depth;\n            root.displayParents = displayParents;\n            root.displayEdges = displayEdges;\n            root.material = displayEdges ? edgeMaterial : meshMaterial;\n            root.update();\n        }\n    }\n    updateMatrixWorld(...args) {\n        const mesh = this.mesh;\n        const parent = this.parent;\n        if (mesh !== null) {\n            mesh.updateWorldMatrix(true, false);\n            if (parent) this.matrix.copy(parent.matrixWorld).invert().multiply(mesh.matrixWorld);\n            else this.matrix.copy(mesh.matrixWorld);\n            this.matrix.decompose(this.position, this.quaternion, this.scale);\n        }\n        super.updateMatrixWorld(...args);\n    }\n    copy(source) {\n        this.depth = source.depth;\n        this.mesh = source.mesh;\n        this.bvh = source.bvh;\n        this.opacity = source.opacity;\n        this.color.copy(source.color);\n    }\n    clone() {\n        return new $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5(this.mesh, this.bvh, this.depth);\n    }\n    dispose() {\n        this.edgeMaterial.dispose();\n        this.meshMaterial.dispose();\n        const children = this.children;\n        for(let i = 0, l = children.length; i < l; i++)children[i].geometry.dispose();\n    }\n}\nclass $3c85f35a8c29fa9b$export$5ead38ed5c75a1c8 extends $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 {\n    constructor(...args){\n        super(...args);\n        console.warn(\"MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.\");\n    }\n}\n\n});\n\n\nvar $hBOJ2 = parcelRequire(\"hBOJ2\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n * Custom properties outside of the defaults for position, uv, normal\n * and color attributes can be added using the setCustomPropertyNameMapping method.\n * For example, the following maps the element properties “custom_property_a”\n * and “custom_property_b” to an attribute “customAttribute” with an item size of 2.\n * Attribute item sizes are set from the number of element properties in the property array.\n *\n * loader.setCustomPropertyNameMapping( {\n *\tcustomAttribute: ['custom_property_a', 'custom_property_b'],\n * } );\n *\n */ const $cecdfc71d7a8184f$var$_color = new (0, $ilwiq.Color)();\nclass $cecdfc71d7a8184f$export$363d99ab40f454cb extends (0, $ilwiq.Loader) {\n    constructor(manager){\n        super(manager);\n        this.propertyNameMapping = {};\n        this.customPropertyMapping = {};\n    }\n    load(url, onLoad, onProgress, onError) {\n        const scope = this;\n        const loader = new (0, $ilwiq.FileLoader)(this.manager);\n        loader.setPath(this.path);\n        loader.setResponseType(\"arraybuffer\");\n        loader.setRequestHeader(this.requestHeader);\n        loader.setWithCredentials(this.withCredentials);\n        loader.load(url, function(text) {\n            try {\n                onLoad(scope.parse(text));\n            } catch (e) {\n                if (onError) onError(e);\n                else console.error(e);\n                scope.manager.itemError(url);\n            }\n        }, onProgress, onError);\n    }\n    setPropertyNameMapping(mapping) {\n        this.propertyNameMapping = mapping;\n    }\n    setCustomPropertyNameMapping(mapping) {\n        this.customPropertyMapping = mapping;\n    }\n    parse(data) {\n        function parseHeader(data) {\n            const patternHeader = /^ply([\\s\\S]*)end_header(\\r\\n|\\r|\\n)/;\n            let headerText = \"\";\n            let headerLength = 0;\n            const result = patternHeader.exec(data);\n            if (result !== null) {\n                headerText = result[1];\n                headerLength = new Blob([\n                    result[0]\n                ]).size;\n            }\n            const header = {\n                comments: [],\n                elements: [],\n                headerLength: headerLength,\n                objInfo: \"\"\n            };\n            const lines = headerText.split(/\\r\\n|\\r|\\n/);\n            let currentElement;\n            function make_ply_element_property(propertValues, propertyNameMapping) {\n                const property = {\n                    type: propertValues[0]\n                };\n                if (property.type === \"list\") {\n                    property.name = propertValues[3];\n                    property.countType = propertValues[1];\n                    property.itemType = propertValues[2];\n                } else property.name = propertValues[1];\n                if (property.name in propertyNameMapping) property.name = propertyNameMapping[property.name];\n                return property;\n            }\n            for(let i = 0; i < lines.length; i++){\n                let line = lines[i];\n                line = line.trim();\n                if (line === \"\") continue;\n                const lineValues = line.split(/\\s+/);\n                const lineType = lineValues.shift();\n                line = lineValues.join(\" \");\n                switch(lineType){\n                    case \"format\":\n                        header.format = lineValues[0];\n                        header.version = lineValues[1];\n                        break;\n                    case \"comment\":\n                        header.comments.push(line);\n                        break;\n                    case \"element\":\n                        if (currentElement !== undefined) header.elements.push(currentElement);\n                        currentElement = {};\n                        currentElement.name = lineValues[0];\n                        currentElement.count = parseInt(lineValues[1]);\n                        currentElement.properties = [];\n                        break;\n                    case \"property\":\n                        currentElement.properties.push(make_ply_element_property(lineValues, scope.propertyNameMapping));\n                        break;\n                    case \"obj_info\":\n                        header.objInfo = line;\n                        break;\n                    default:\n                        console.log(\"unhandled\", lineType, lineValues);\n                }\n            }\n            if (currentElement !== undefined) header.elements.push(currentElement);\n            return header;\n        }\n        function parseASCIINumber(n, type) {\n            switch(type){\n                case \"char\":\n                case \"uchar\":\n                case \"short\":\n                case \"ushort\":\n                case \"int\":\n                case \"uint\":\n                case \"int8\":\n                case \"uint8\":\n                case \"int16\":\n                case \"uint16\":\n                case \"int32\":\n                case \"uint32\":\n                    return parseInt(n);\n                case \"float\":\n                case \"double\":\n                case \"float32\":\n                case \"float64\":\n                    return parseFloat(n);\n            }\n        }\n        function parseASCIIElement(properties, line) {\n            const values = line.split(/\\s+/);\n            const element = {};\n            for(let i = 0; i < properties.length; i++)if (properties[i].type === \"list\") {\n                const list = [];\n                const n = parseASCIINumber(values.shift(), properties[i].countType);\n                for(let j = 0; j < n; j++)list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n                element[properties[i].name] = list;\n            } else element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n            return element;\n        }\n        function createBuffer() {\n            const buffer = {\n                indices: [],\n                vertices: [],\n                normals: [],\n                uvs: [],\n                faceVertexUvs: [],\n                colors: []\n            };\n            for (const customProperty of Object.keys(scope.customPropertyMapping))buffer[customProperty] = [];\n            return buffer;\n        }\n        function mapElementAttributes(properties) {\n            const elementNames = properties.map((property)=>{\n                return property.name;\n            });\n            function findAttrName(names) {\n                for(let i = 0, l = names.length; i < l; i++){\n                    const name = names[i];\n                    if (elementNames.includes(name)) return name;\n                }\n                return null;\n            }\n            return {\n                attrX: findAttrName([\n                    \"x\",\n                    \"px\",\n                    \"posx\"\n                ]) || \"x\",\n                attrY: findAttrName([\n                    \"y\",\n                    \"py\",\n                    \"posy\"\n                ]) || \"y\",\n                attrZ: findAttrName([\n                    \"z\",\n                    \"pz\",\n                    \"posz\"\n                ]) || \"z\",\n                attrNX: findAttrName([\n                    \"nx\",\n                    \"normalx\"\n                ]),\n                attrNY: findAttrName([\n                    \"ny\",\n                    \"normaly\"\n                ]),\n                attrNZ: findAttrName([\n                    \"nz\",\n                    \"normalz\"\n                ]),\n                attrS: findAttrName([\n                    \"s\",\n                    \"u\",\n                    \"texture_u\",\n                    \"tx\"\n                ]),\n                attrT: findAttrName([\n                    \"t\",\n                    \"v\",\n                    \"texture_v\",\n                    \"ty\"\n                ]),\n                attrR: findAttrName([\n                    \"red\",\n                    \"diffuse_red\",\n                    \"r\",\n                    \"diffuse_r\"\n                ]),\n                attrG: findAttrName([\n                    \"green\",\n                    \"diffuse_green\",\n                    \"g\",\n                    \"diffuse_g\"\n                ]),\n                attrB: findAttrName([\n                    \"blue\",\n                    \"diffuse_blue\",\n                    \"b\",\n                    \"diffuse_b\"\n                ])\n            };\n        }\n        function parseASCII(data, header) {\n            // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n            const buffer = createBuffer();\n            let result;\n            const patternBody = /end_header\\s([\\s\\S]*)$/;\n            let body = \"\";\n            if ((result = patternBody.exec(data)) !== null) body = result[1];\n            const lines = body.split(/\\r\\n|\\r|\\n/);\n            let currentElement = 0;\n            let currentElementCount = 0;\n            let elementDesc = header.elements[currentElement];\n            let attributeMap = mapElementAttributes(elementDesc.properties);\n            for(let i = 0; i < lines.length; i++){\n                let line = lines[i];\n                line = line.trim();\n                if (line === \"\") continue;\n                if (currentElementCount >= elementDesc.count) {\n                    currentElement++;\n                    currentElementCount = 0;\n                    elementDesc = header.elements[currentElement];\n                    attributeMap = mapElementAttributes(elementDesc.properties);\n                }\n                const element = parseASCIIElement(elementDesc.properties, line);\n                handleElement(buffer, elementDesc.name, element, attributeMap);\n                currentElementCount++;\n            }\n            return postProcess(buffer);\n        }\n        function postProcess(buffer) {\n            let geometry = new (0, $ilwiq.BufferGeometry)();\n            // mandatory buffer data\n            if (buffer.indices.length > 0) geometry.setIndex(buffer.indices);\n            geometry.setAttribute(\"position\", new (0, $ilwiq.Float32BufferAttribute)(buffer.vertices, 3));\n            // optional buffer data\n            if (buffer.normals.length > 0) geometry.setAttribute(\"normal\", new (0, $ilwiq.Float32BufferAttribute)(buffer.normals, 3));\n            if (buffer.uvs.length > 0) geometry.setAttribute(\"uv\", new (0, $ilwiq.Float32BufferAttribute)(buffer.uvs, 2));\n            if (buffer.colors.length > 0) geometry.setAttribute(\"color\", new (0, $ilwiq.Float32BufferAttribute)(buffer.colors, 3));\n            if (buffer.faceVertexUvs.length > 0) {\n                geometry = geometry.toNonIndexed();\n                geometry.setAttribute(\"uv\", new (0, $ilwiq.Float32BufferAttribute)(buffer.faceVertexUvs, 2));\n            }\n            // custom buffer data\n            for (const customProperty of Object.keys(scope.customPropertyMapping))if (buffer[customProperty].length > 0) geometry.setAttribute(customProperty, new (0, $ilwiq.Float32BufferAttribute)(buffer[customProperty], scope.customPropertyMapping[customProperty].length));\n            geometry.computeBoundingSphere();\n            return geometry;\n        }\n        function handleElement(buffer, elementName, element, cacheEntry) {\n            if (elementName === \"vertex\") {\n                buffer.vertices.push(element[cacheEntry.attrX], element[cacheEntry.attrY], element[cacheEntry.attrZ]);\n                if (cacheEntry.attrNX !== null && cacheEntry.attrNY !== null && cacheEntry.attrNZ !== null) buffer.normals.push(element[cacheEntry.attrNX], element[cacheEntry.attrNY], element[cacheEntry.attrNZ]);\n                if (cacheEntry.attrS !== null && cacheEntry.attrT !== null) buffer.uvs.push(element[cacheEntry.attrS], element[cacheEntry.attrT]);\n                if (cacheEntry.attrR !== null && cacheEntry.attrG !== null && cacheEntry.attrB !== null) {\n                    $cecdfc71d7a8184f$var$_color.setRGB(element[cacheEntry.attrR] / 255.0, element[cacheEntry.attrG] / 255.0, element[cacheEntry.attrB] / 255.0).convertSRGBToLinear();\n                    buffer.colors.push($cecdfc71d7a8184f$var$_color.r, $cecdfc71d7a8184f$var$_color.g, $cecdfc71d7a8184f$var$_color.b);\n                }\n                for (const customProperty of Object.keys(scope.customPropertyMapping))for (const elementProperty of scope.customPropertyMapping[customProperty])buffer[customProperty].push(element[elementProperty]);\n            } else if (elementName === \"face\") {\n                const vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n                const texcoord = element.texcoord;\n                if (vertex_indices.length === 3) {\n                    buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[2]);\n                    if (texcoord && texcoord.length === 6) {\n                        buffer.faceVertexUvs.push(texcoord[0], texcoord[1]);\n                        buffer.faceVertexUvs.push(texcoord[2], texcoord[3]);\n                        buffer.faceVertexUvs.push(texcoord[4], texcoord[5]);\n                    }\n                } else if (vertex_indices.length === 4) {\n                    buffer.indices.push(vertex_indices[0], vertex_indices[1], vertex_indices[3]);\n                    buffer.indices.push(vertex_indices[1], vertex_indices[2], vertex_indices[3]);\n                }\n            }\n        }\n        function binaryReadElement(at, properties) {\n            const element = {};\n            let read = 0;\n            for(let i = 0; i < properties.length; i++){\n                const property = properties[i];\n                const valueReader = property.valueReader;\n                if (property.type === \"list\") {\n                    const list = [];\n                    const n = property.countReader.read(at + read);\n                    read += property.countReader.size;\n                    for(let j = 0; j < n; j++){\n                        list.push(valueReader.read(at + read));\n                        read += valueReader.size;\n                    }\n                    element[property.name] = list;\n                } else {\n                    element[property.name] = valueReader.read(at + read);\n                    read += valueReader.size;\n                }\n            }\n            return [\n                element,\n                read\n            ];\n        }\n        function setPropertyBinaryReaders(properties, body, little_endian) {\n            function getBinaryReader(dataview, type, little_endian) {\n                switch(type){\n                    // corespondences for non-specific length types here match rply:\n                    case \"int8\":\n                    case \"char\":\n                        return {\n                            read: (at)=>{\n                                return dataview.getInt8(at);\n                            },\n                            size: 1\n                        };\n                    case \"uint8\":\n                    case \"uchar\":\n                        return {\n                            read: (at)=>{\n                                return dataview.getUint8(at);\n                            },\n                            size: 1\n                        };\n                    case \"int16\":\n                    case \"short\":\n                        return {\n                            read: (at)=>{\n                                return dataview.getInt16(at, little_endian);\n                            },\n                            size: 2\n                        };\n                    case \"uint16\":\n                    case \"ushort\":\n                        return {\n                            read: (at)=>{\n                                return dataview.getUint16(at, little_endian);\n                            },\n                            size: 2\n                        };\n                    case \"int32\":\n                    case \"int\":\n                        return {\n                            read: (at)=>{\n                                return dataview.getInt32(at, little_endian);\n                            },\n                            size: 4\n                        };\n                    case \"uint32\":\n                    case \"uint\":\n                        return {\n                            read: (at)=>{\n                                return dataview.getUint32(at, little_endian);\n                            },\n                            size: 4\n                        };\n                    case \"float32\":\n                    case \"float\":\n                        return {\n                            read: (at)=>{\n                                return dataview.getFloat32(at, little_endian);\n                            },\n                            size: 4\n                        };\n                    case \"float64\":\n                    case \"double\":\n                        return {\n                            read: (at)=>{\n                                return dataview.getFloat64(at, little_endian);\n                            },\n                            size: 8\n                        };\n                }\n            }\n            for(let i = 0, l = properties.length; i < l; i++){\n                const property = properties[i];\n                if (property.type === \"list\") {\n                    property.countReader = getBinaryReader(body, property.countType, little_endian);\n                    property.valueReader = getBinaryReader(body, property.itemType, little_endian);\n                } else property.valueReader = getBinaryReader(body, property.type, little_endian);\n            }\n        }\n        function parseBinary(data, header) {\n            const buffer = createBuffer();\n            const little_endian = header.format === \"binary_little_endian\";\n            const body = new DataView(data, header.headerLength);\n            let result, loc = 0;\n            for(let currentElement = 0; currentElement < header.elements.length; currentElement++){\n                const elementDesc = header.elements[currentElement];\n                const properties = elementDesc.properties;\n                const attributeMap = mapElementAttributes(properties);\n                setPropertyBinaryReaders(properties, body, little_endian);\n                for(let currentElementCount = 0; currentElementCount < elementDesc.count; currentElementCount++){\n                    result = binaryReadElement(loc, properties);\n                    loc += result[1];\n                    const element = result[0];\n                    handleElement(buffer, elementDesc.name, element, attributeMap);\n                }\n            }\n            return postProcess(buffer);\n        }\n        function extractHeaderText(bytes) {\n            let i = 0;\n            let cont = true;\n            let line = \"\";\n            const lines = [];\n            do {\n                const c = String.fromCharCode(bytes[i++]);\n                if (c !== \"\\n\" && c !== \"\\r\") line += c;\n                else {\n                    if (line === \"end_header\") cont = false;\n                    if (line !== \"\") {\n                        lines.push(line);\n                        line = \"\";\n                    }\n                }\n            }while (cont && i < bytes.length);\n            return lines.join(\"\\r\") + \"\\r\";\n        }\n        //\n        let geometry;\n        const scope = this;\n        if (data instanceof ArrayBuffer) {\n            const bytes = new Uint8Array(data);\n            const headerText = extractHeaderText(bytes);\n            const header = parseHeader(headerText);\n            if (header.format === \"ascii\") {\n                const text = new TextDecoder().decode(bytes);\n                geometry = parseASCII(text, header);\n            } else geometry = parseBinary(data, header);\n        } else geometry = parseASCII(data, parseHeader(data));\n        return geometry;\n    }\n}\n\n\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $4h5hN = parcelRequire(\"4h5hN\");\nvar $Mleu6 = parcelRequire(\"Mleu6\");\nvar $5ca9G = parcelRequire(\"5ca9G\");\n$ilwiq.Mesh.prototype.raycast = (0, $4h5hN.acceleratedRaycast);\n$ilwiq.BufferGeometry.prototype.computeBoundsTree = (0, $4h5hN.computeBoundsTree);\n$ilwiq.BufferGeometry.prototype.disposeBoundsTree = (0, $4h5hN.disposeBoundsTree);\nlet $d988e066c7f02c6a$var$stats;\nlet $d988e066c7f02c6a$var$scene, $d988e066c7f02c6a$var$camera, $d988e066c7f02c6a$var$renderer, $d988e066c7f02c6a$var$bvhMesh, $d988e066c7f02c6a$var$helper, $d988e066c7f02c6a$var$pointCloud, $d988e066c7f02c6a$var$outputContainer;\nlet $d988e066c7f02c6a$var$mouse = new $ilwiq.Vector2();\nlet $d988e066c7f02c6a$var$sphereCollision;\nconst $d988e066c7f02c6a$var$plyPath = \"../models/point_cloud_porsche_911_1.7M_vertices/scene.ply\";\nconst $d988e066c7f02c6a$var$raycaster = new $ilwiq.Raycaster();\nconst $d988e066c7f02c6a$var$params = {\n    displayHelper: false,\n    helperDepth: 10,\n    displayParents: false,\n    strategy: (0, $Mleu6.CENTER),\n    pointSize: 0.005,\n    raycastThreshold: 0.005,\n    useBVH: true\n};\nfunction $d988e066c7f02c6a$var$init() {\n    const bgColor = 1251612;\n    $d988e066c7f02c6a$var$outputContainer = document.getElementById(\"output\");\n    // renderer setup\n    $d988e066c7f02c6a$var$renderer = new $ilwiq.WebGLRenderer({\n        antialias: true\n    });\n    $d988e066c7f02c6a$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $d988e066c7f02c6a$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $d988e066c7f02c6a$var$renderer.setClearColor(bgColor, 1);\n    document.body.appendChild($d988e066c7f02c6a$var$renderer.domElement);\n    // scene setup\n    $d988e066c7f02c6a$var$scene = new $ilwiq.Scene();\n    // camera setup\n    $d988e066c7f02c6a$var$camera = new $ilwiq.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);\n    $d988e066c7f02c6a$var$camera.position.set(3, 3, 3);\n    $d988e066c7f02c6a$var$camera.far = 100;\n    $d988e066c7f02c6a$var$camera.updateProjectionMatrix();\n    new (0, $5Rd1x.OrbitControls)($d988e066c7f02c6a$var$camera, $d988e066c7f02c6a$var$renderer.domElement);\n    // stats setup\n    $d988e066c7f02c6a$var$stats = new (0, $hBOJ2.default)();\n    document.body.appendChild($d988e066c7f02c6a$var$stats.dom);\n    window.addEventListener(\"resize\", function() {\n        $d988e066c7f02c6a$var$camera.aspect = window.innerWidth / window.innerHeight;\n        $d988e066c7f02c6a$var$camera.updateProjectionMatrix();\n        $d988e066c7f02c6a$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    }, false);\n    // Load point cloud\n    const loader = new (0, $cecdfc71d7a8184f$export$363d99ab40f454cb)();\n    loader.load($d988e066c7f02c6a$var$plyPath, (geometry)=>{\n        geometry.center();\n        const material = new $ilwiq.PointsMaterial({\n            size: $d988e066c7f02c6a$var$params.pointSize,\n            vertexColors: true\n        });\n        $d988e066c7f02c6a$var$pointCloud = new $ilwiq.Points(geometry, material);\n        $d988e066c7f02c6a$var$pointCloud.matrixAutoUpdate = false;\n        $d988e066c7f02c6a$var$scene.add($d988e066c7f02c6a$var$pointCloud);\n        // BVH Mesh creation\n        const indices = [];\n        const bvhGeometry = geometry.clone();\n        let verticesLength = bvhGeometry.attributes.position.count;\n        for(let i = 0, l = verticesLength; i < l; i++)indices.push(i, i, i);\n        bvhGeometry.setIndex(indices);\n        const bvhMaterial = new $ilwiq.MeshBasicMaterial({\n            color: 0xff0000\n        });\n        $d988e066c7f02c6a$var$bvhMesh = new $ilwiq.Mesh(bvhGeometry, bvhMaterial);\n        console.time(\"computeBoundsTree\");\n        $d988e066c7f02c6a$var$bvhMesh.geometry.computeBoundsTree({\n            mode: $d988e066c7f02c6a$var$params.mode\n        });\n        console.timeEnd(\"computeBoundsTree\");\n        $d988e066c7f02c6a$var$helper = new (0, $5ca9G.MeshBVHHelper)($d988e066c7f02c6a$var$bvhMesh, $d988e066c7f02c6a$var$params.depth);\n        $d988e066c7f02c6a$var$scene.add($d988e066c7f02c6a$var$helper);\n    });\n    const geometry = new $ilwiq.SphereGeometry(0.01, 32, 32);\n    const material = new $ilwiq.MeshBasicMaterial({\n        color: 0xffff00,\n        opacity: 0.9,\n        transparent: true\n    });\n    $d988e066c7f02c6a$var$sphereCollision = new $ilwiq.Mesh(geometry, material);\n    $d988e066c7f02c6a$var$sphereCollision.visible = false;\n    $d988e066c7f02c6a$var$scene.add($d988e066c7f02c6a$var$sphereCollision);\n    const gui = new (0, $jiuw3.GUI)();\n    const helperFolder = gui.addFolder(\"helper\");\n    helperFolder.add($d988e066c7f02c6a$var$params, \"displayHelper\");\n    helperFolder.add($d988e066c7f02c6a$var$params, \"displayParents\").onChange((v)=>{\n        $d988e066c7f02c6a$var$helper.displayParents = v;\n        $d988e066c7f02c6a$var$helper.update();\n    });\n    helperFolder.add($d988e066c7f02c6a$var$params, \"helperDepth\", 1, 20, 1).name(\"depth\").onChange((v)=>{\n        $d988e066c7f02c6a$var$helper.depth = parseInt(v);\n        $d988e066c7f02c6a$var$helper.update();\n    });\n    helperFolder.open();\n    const pointsFolder = gui.addFolder(\"points\");\n    pointsFolder.add($d988e066c7f02c6a$var$params, \"useBVH\");\n    pointsFolder.add($d988e066c7f02c6a$var$params, \"strategy\", {\n        CENTER: $Mleu6.CENTER,\n        AVERAGE: $Mleu6.AVERAGE,\n        SAH: $Mleu6.SAH\n    }).onChange((v)=>{\n        console.time(\"computeBoundsTree\");\n        $d988e066c7f02c6a$var$bvhMesh.geometry.computeBoundsTree({\n            strategy: parseInt(v)\n        });\n        console.timeEnd(\"computeBoundsTree\");\n        $d988e066c7f02c6a$var$helper.update();\n    });\n    pointsFolder.add($d988e066c7f02c6a$var$params, \"pointSize\", 0.001, 0.01, 0.001);\n    pointsFolder.add($d988e066c7f02c6a$var$params, \"raycastThreshold\", 0.001, 0.01, 0.001);\n    pointsFolder.open();\n}\nwindow.addEventListener(\"pointermove\", (event)=>{\n    if (!$d988e066c7f02c6a$var$bvhMesh) return;\n    $d988e066c7f02c6a$var$mouse.x = event.clientX / window.innerWidth * 2 - 1;\n    $d988e066c7f02c6a$var$mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n    $d988e066c7f02c6a$var$raycaster.setFromCamera($d988e066c7f02c6a$var$mouse, $d988e066c7f02c6a$var$camera);\n    const startTime = window.performance.now();\n    if ($d988e066c7f02c6a$var$params.useBVH) {\n        $d988e066c7f02c6a$var$sphereCollision.visible = false;\n        const inverseMatrix = new $ilwiq.Matrix4();\n        inverseMatrix.copy($d988e066c7f02c6a$var$bvhMesh.matrixWorld).invert();\n        $d988e066c7f02c6a$var$raycaster.ray.applyMatrix4(inverseMatrix);\n        const threshold = $d988e066c7f02c6a$var$raycaster.params.Points.threshold;\n        const localThreshold = threshold / (($d988e066c7f02c6a$var$bvhMesh.scale.x + $d988e066c7f02c6a$var$bvhMesh.scale.y + $d988e066c7f02c6a$var$bvhMesh.scale.z) / 3);\n        const localThresholdSq = localThreshold * localThreshold;\n        const { ray: ray } = $d988e066c7f02c6a$var$raycaster;\n        let closestDistance = Infinity;\n        $d988e066c7f02c6a$var$bvhMesh.geometry.boundsTree.shapecast({\n            boundsTraverseOrder: (box)=>{\n                // traverse the closer bounds first.\n                return box.distanceToPoint(ray.origin);\n            },\n            intersectsBounds: (box, isLeaf, score)=>{\n                // if we've already found a point that's closer then the full bounds then\n                // don't traverse further.\n                if (score > closestDistance) return 0, $Mleu6.NOT_INTERSECTED;\n                box.expandByScalar(localThreshold);\n                return ray.intersectsBox(box) ? (0, $Mleu6.INTERSECTED) : (0, $Mleu6.NOT_INTERSECTED);\n            },\n            intersectsTriangle: (triangle)=>{\n                const distancesToRaySq = ray.distanceSqToPoint(triangle.a);\n                if (distancesToRaySq < localThresholdSq) {\n                    // track the closest found point distance so we can early out traversal and only\n                    // use the closest point along the ray.\n                    const distanceToPoint = ray.origin.distanceTo(triangle.a);\n                    if (distanceToPoint < closestDistance) {\n                        closestDistance = distanceToPoint;\n                        $d988e066c7f02c6a$var$sphereCollision.position.copy(triangle.a).applyMatrix4($d988e066c7f02c6a$var$bvhMesh.matrixWorld);\n                        $d988e066c7f02c6a$var$sphereCollision.visible = true;\n                    }\n                }\n            }\n        });\n    } else {\n        const intersects = $d988e066c7f02c6a$var$raycaster.intersectObject($d988e066c7f02c6a$var$pointCloud, true);\n        const hit = intersects[0];\n        if (hit) {\n            $d988e066c7f02c6a$var$sphereCollision.position.copy(hit.point);\n            $d988e066c7f02c6a$var$sphereCollision.visible = true;\n        } else $d988e066c7f02c6a$var$sphereCollision.visible = false;\n    }\n    const delta = window.performance.now() - startTime;\n    $d988e066c7f02c6a$var$outputContainer.innerText = `${delta.toFixed(2)}ms`;\n}, false);\nfunction $d988e066c7f02c6a$var$render() {\n    requestAnimationFrame($d988e066c7f02c6a$var$render);\n    if ($d988e066c7f02c6a$var$pointCloud) {\n        $d988e066c7f02c6a$var$pointCloud.material.size = $d988e066c7f02c6a$var$params.pointSize;\n        $d988e066c7f02c6a$var$helper.visible = $d988e066c7f02c6a$var$params.displayHelper;\n        $d988e066c7f02c6a$var$raycaster.params.Points.threshold = $d988e066c7f02c6a$var$params.raycastThreshold;\n    }\n    $d988e066c7f02c6a$var$stats.begin();\n    $d988e066c7f02c6a$var$renderer.render($d988e066c7f02c6a$var$scene, $d988e066c7f02c6a$var$camera);\n    $d988e066c7f02c6a$var$stats.end();\n}\n$d988e066c7f02c6a$var$init();\n$d988e066c7f02c6a$var$render();\n\n\n//# sourceMappingURL=pointCloudIntersection.812fc1d5.js.map\n","/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nvar Stats = function () {\n\n\tvar mode = 0;\n\n\tvar container = document.createElement( 'div' );\n\tcontainer.style.cssText = 'position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000';\n\tcontainer.addEventListener( 'click', function ( event ) {\n\n\t\tevent.preventDefault();\n\t\tshowPanel( ++ mode % container.children.length );\n\n\t}, false );\n\n\t//\n\n\tfunction addPanel( panel ) {\n\n\t\tcontainer.appendChild( panel.dom );\n\t\treturn panel;\n\n\t}\n\n\tfunction showPanel( id ) {\n\n\t\tfor ( var i = 0; i < container.children.length; i ++ ) {\n\n\t\t\tcontainer.children[ i ].style.display = i === id ? 'block' : 'none';\n\n\t\t}\n\n\t\tmode = id;\n\n\t}\n\n\t//\n\n\tvar beginTime = ( performance || Date ).now(), prevTime = beginTime, frames = 0;\n\n\tvar fpsPanel = addPanel( new Stats.Panel( 'FPS', '#0ff', '#002' ) );\n\tvar msPanel = addPanel( new Stats.Panel( 'MS', '#0f0', '#020' ) );\n\n\tif ( self.performance && self.performance.memory ) {\n\n\t\tvar memPanel = addPanel( new Stats.Panel( 'MB', '#f08', '#201' ) );\n\n\t}\n\n\tshowPanel( 0 );\n\n\treturn {\n\n\t\tREVISION: 16,\n\n\t\tdom: container,\n\n\t\taddPanel: addPanel,\n\t\tshowPanel: showPanel,\n\n\t\tbegin: function () {\n\n\t\t\tbeginTime = ( performance || Date ).now();\n\n\t\t},\n\n\t\tend: function () {\n\n\t\t\tframes ++;\n\n\t\t\tvar time = ( performance || Date ).now();\n\n\t\t\tmsPanel.update( time - beginTime, 200 );\n\n\t\t\tif ( time > prevTime + 1000 ) {\n\n\t\t\t\tfpsPanel.update( ( frames * 1000 ) / ( time - prevTime ), 100 );\n\n\t\t\t\tprevTime = time;\n\t\t\t\tframes = 0;\n\n\t\t\t\tif ( memPanel ) {\n\n\t\t\t\t\tvar memory = performance.memory;\n\t\t\t\t\tmemPanel.update( memory.usedJSHeapSize / 1048576, memory.jsHeapSizeLimit / 1048576 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn time;\n\n\t\t},\n\n\t\tupdate: function () {\n\n\t\t\tbeginTime = this.end();\n\n\t\t},\n\n\t\t// Backwards Compatibility\n\n\t\tdomElement: container,\n\t\tsetMode: showPanel\n\n\t};\n\n};\n\nStats.Panel = function ( name, fg, bg ) {\n\n\tvar min = Infinity, max = 0, round = Math.round;\n\tvar PR = round( window.devicePixelRatio || 1 );\n\n\tvar WIDTH = 80 * PR, HEIGHT = 48 * PR,\n\t\t\tTEXT_X = 3 * PR, TEXT_Y = 2 * PR,\n\t\t\tGRAPH_X = 3 * PR, GRAPH_Y = 15 * PR,\n\t\t\tGRAPH_WIDTH = 74 * PR, GRAPH_HEIGHT = 30 * PR;\n\n\tvar canvas = document.createElement( 'canvas' );\n\tcanvas.width = WIDTH;\n\tcanvas.height = HEIGHT;\n\tcanvas.style.cssText = 'width:80px;height:48px';\n\n\tvar context = canvas.getContext( '2d' );\n\tcontext.font = 'bold ' + ( 9 * PR ) + 'px Helvetica,Arial,sans-serif';\n\tcontext.textBaseline = 'top';\n\n\tcontext.fillStyle = bg;\n\tcontext.fillRect( 0, 0, WIDTH, HEIGHT );\n\n\tcontext.fillStyle = fg;\n\tcontext.fillText( name, TEXT_X, TEXT_Y );\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\tcontext.fillStyle = bg;\n\tcontext.globalAlpha = 0.9;\n\tcontext.fillRect( GRAPH_X, GRAPH_Y, GRAPH_WIDTH, GRAPH_HEIGHT );\n\n\treturn {\n\n\t\tdom: canvas,\n\n\t\tupdate: function ( value, maxValue ) {\n\n\t\t\tmin = Math.min( min, value );\n\t\t\tmax = Math.max( max, value );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 1;\n\t\t\tcontext.fillRect( 0, 0, WIDTH, GRAPH_Y );\n\t\t\tcontext.fillStyle = fg;\n\t\t\tcontext.fillText( round( value ) + ' ' + name + ' (' + round( min ) + '-' + round( max ) + ')', TEXT_X, TEXT_Y );\n\n\t\t\tcontext.drawImage( canvas, GRAPH_X + PR, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT, GRAPH_X, GRAPH_Y, GRAPH_WIDTH - PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, GRAPH_HEIGHT );\n\n\t\t\tcontext.fillStyle = bg;\n\t\t\tcontext.globalAlpha = 0.9;\n\t\t\tcontext.fillRect( GRAPH_X + GRAPH_WIDTH - PR, GRAPH_Y, PR, round( ( 1 - ( value / maxValue ) ) * GRAPH_HEIGHT ) );\n\n\t\t}\n\n\t};\n\n};\n\nexport { Stats as default };\n","import { Ray, Matrix4, Mesh } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst ray = /* @__PURE__ */ new Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n","// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\treturn null;\n\n\t} else {\n\n\t\treturn hit;\n\n\t}\n\n}\n","import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nclass MeshBVHRootHelper extends Object3D {\n\n\tget isMesh() {\n\n\t\treturn ! this.displayEdges;\n\n\t}\n\n\tget isLineSegments() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tget isLine() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tconstructor( bvh, material, depth = 10, group = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.material = material;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.name = 'MeshBVHRootHelper';\n\t\tthis.depth = depth;\n\t\tthis.displayParents = false;\n\t\tthis.bvh = bvh;\n\t\tthis.displayEdges = true;\n\t\tthis._group = group;\n\n\t}\n\n\traycast() {}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst boundsTree = this.bvh;\n\t\tconst group = this._group;\n\t\tgeometry.dispose();\n\t\tthis.visible = false;\n\t\tif ( boundsTree ) {\n\n\t\t\t// count the number of bounds required\n\t\t\tconst targetDepth = this.depth - 1;\n\t\t\tconst displayParents = this.displayParents;\n\t\t\tlet boundsCount = 0;\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\tif ( depth >= targetDepth || isLeaf ) {\n\n\t\t\t\t\tboundsCount ++;\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\t// fill in the position buffer with the bounds corners\n\t\t\tlet posIndex = 0;\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\tconst terminate = depth >= targetDepth || isLeaf;\n\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn terminate;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\tlet indexArray;\n\t\t\tlet indices;\n\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t// x axis\n\t\t\t\t\t0, 4,\n\t\t\t\t\t1, 5,\n\t\t\t\t\t2, 6,\n\t\t\t\t\t3, 7,\n\n\t\t\t\t\t// y axis\n\t\t\t\t\t0, 2,\n\t\t\t\t\t1, 3,\n\t\t\t\t\t4, 6,\n\t\t\t\t\t5, 7,\n\n\t\t\t\t\t// z axis\n\t\t\t\t\t0, 1,\n\t\t\t\t\t2, 3,\n\t\t\t\t\t4, 5,\n\t\t\t\t\t6, 7,\n\t\t\t\t] );\n\n\t\t\t} else {\n\n\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t// X-, X+\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t} else {\n\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t}\n\n\t\t\tconst indexLength = indices.length;\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\tconst posOffset = i * 8;\n\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the geometry\n\t\t\tgeometry.setIndex(\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\n\t\t\t);\n\t\t\tgeometry.setAttribute(\n\t\t\t\t'position',\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\n\t\t\t);\n\t\t\tthis.visible = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass MeshBVHHelper extends Group {\n\n\tget color() {\n\n\t\treturn this.edgeMaterial.color;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.edgeMaterial.opacity;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tthis.edgeMaterial.opacity = v;\n\t\tthis.meshMaterial.opacity = v;\n\n\t}\n\n\tconstructor( mesh = null, bvh = null, depth = 10 ) {\n\n\t\t// handle bvh, depth signature\n\t\tif ( mesh instanceof MeshBVH ) {\n\n\t\t\tdepth = bvh || 10;\n\t\t\tbvh = mesh;\n\t\t\tmesh = null;\n\n\t\t}\n\n\t\t// handle mesh, depth signature\n\t\tif ( typeof bvh === 'number' ) {\n\n\t\t\tdepth = bvh;\n\t\t\tbvh = null;\n\n\t\t}\n\n\t\tsuper();\n\n\t\tthis.name = 'MeshBVHHelper';\n\t\tthis.depth = depth;\n\t\tthis.mesh = mesh;\n\t\tthis.bvh = bvh;\n\t\tthis.displayParents = false;\n\t\tthis.displayEdges = true;\n\t\tthis._roots = [];\n\n\t\tconst edgeMaterial = new LineBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tconst meshMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\tthis.edgeMaterial = edgeMaterial;\n\t\tthis.meshMaterial = meshMaterial;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst bvh = this.bvh || this.mesh.geometry.boundsTree;\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\tconst root = this._roots.pop();\n\t\t\troot.geometry.dispose();\n\t\t\tthis.remove( root );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\tconst { depth, edgeMaterial, meshMaterial, displayParents, displayEdges } = this;\n\n\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\tconst root = new MeshBVHRootHelper( bvh, edgeMaterial, depth, i );\n\t\t\t\tthis.add( root );\n\t\t\t\tthis._roots.push( root );\n\n\t\t\t}\n\n\t\t\tconst root = this._roots[ i ];\n\t\t\troot.bvh = bvh;\n\t\t\troot.depth = depth;\n\t\t\troot.displayParents = displayParents;\n\t\t\troot.displayEdges = displayEdges;\n\t\t\troot.material = displayEdges ? edgeMaterial : meshMaterial;\n\t\t\troot.update();\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( ...args ) {\n\n\t\tconst mesh = this.mesh;\n\t\tconst parent = this.parent;\n\n\t\tif ( mesh !== null ) {\n\n\t\t\tmesh.updateWorldMatrix( true, false );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( parent.matrixWorld )\n\t\t\t\t\t.invert()\n\t\t\t\t\t.multiply( mesh.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( mesh.matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.matrix.decompose(\n\t\t\t\tthis.position,\n\t\t\t\tthis.quaternion,\n\t\t\t\tthis.scale,\n\t\t\t);\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( ...args );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.depth = source.depth;\n\t\tthis.mesh = source.mesh;\n\t\tthis.bvh = source.bvh;\n\t\tthis.opacity = source.opacity;\n\t\tthis.color.copy( source.color );\n\n\t}\n\n\tclone() {\n\n\t\treturn new MeshBVHHelper( this.mesh, this.bvh, this.depth );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.edgeMaterial.dispose();\n\t\tthis.meshMaterial.dispose();\n\n\t\tconst children = this.children;\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport class MeshBVHVisualizer extends MeshBVHHelper {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconsole.warn( 'MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.' );\n\n\t}\n\n}\n\nexport { MeshBVHHelper };\n","import Stats from 'stats.js/src/Stats';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { PLYLoader } from 'three/examples/jsm/loaders/PLYLoader.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport {\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree, MeshBVHHelper, INTERSECTED, NOT_INTERSECTED,\n\tSAH, CENTER, AVERAGE,\n} from '..';\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nlet stats;\nlet scene, camera, renderer, bvhMesh, helper, pointCloud, outputContainer;\nlet mouse = new THREE.Vector2();\nlet sphereCollision;\n\nconst plyPath = '../models/point_cloud_porsche_911_1.7M_vertices/scene.ply';\nconst raycaster = new THREE.Raycaster();\nconst params = {\n\n\tdisplayHelper: false,\n\thelperDepth: 10,\n\tdisplayParents: false,\n\n\tstrategy: CENTER,\n\tpointSize: 0.005,\n\traycastThreshold: 0.005,\n\tuseBVH: true,\n\n};\n\nfunction init() {\n\n\tconst bgColor = 0x263238 / 2;\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 3, 3, 3 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\tnew OrbitControls( camera, renderer.domElement );\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\t// Load point cloud\n\tconst loader = new PLYLoader();\n\tloader\n\t\t.load( plyPath, geometry => {\n\n\t\t\tgeometry.center();\n\t\t\tconst material = new THREE.PointsMaterial( { size: params.pointSize, vertexColors: true } );\n\t\t\tpointCloud = new THREE.Points( geometry, material );\n\t\t\tpointCloud.matrixAutoUpdate = false;\n\n\t\t\tscene.add( pointCloud );\n\n\t\t\t// BVH Mesh creation\n\t\t\tconst indices = [];\n\t\t\tconst bvhGeometry = geometry.clone();\n\t\t\tlet verticesLength = bvhGeometry.attributes.position.count;\n\t\t\tfor ( let i = 0, l = verticesLength; i < l; i ++ ) {\n\n\t\t\t\tindices.push( i, i, i );\n\n\t\t\t}\n\n\t\t\tbvhGeometry.setIndex( indices );\n\t\t\tconst bvhMaterial = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\n\t\t\tbvhMesh = new THREE.Mesh( bvhGeometry, bvhMaterial );\n\n\t\t\tconsole.time( 'computeBoundsTree' );\n\t\t\tbvhMesh.geometry.computeBoundsTree( { mode: params.mode } );\n\t\t\tconsole.timeEnd( 'computeBoundsTree' );\n\n\t\t\thelper = new MeshBVHHelper( bvhMesh, params.depth );\n\t\t\tscene.add( helper );\n\n\t\t} );\n\n\tconst geometry = new THREE.SphereGeometry( 0.01, 32, 32 );\n\tconst material = new THREE.MeshBasicMaterial( { color: 0xffff00, opacity: 0.9, transparent: true } );\n\tsphereCollision = new THREE.Mesh( geometry, material );\n\tsphereCollision.visible = false;\n\tscene.add( sphereCollision );\n\n\tconst gui = new GUI();\n\tconst helperFolder = gui.addFolder( 'helper' );\n\thelperFolder.add( params, 'displayHelper' );\n\thelperFolder.add( params, 'displayParents' ).onChange( v => {\n\n\t\thelper.displayParents = v;\n\t\thelper.update();\n\n\t} );\n\thelperFolder.add( params, 'helperDepth', 1, 20, 1 ).name( 'depth' ).onChange( v => {\n\n\t\thelper.depth = parseInt( v );\n\t\thelper.update();\n\n\t} );\n\thelperFolder.open();\n\n\tconst pointsFolder = gui.addFolder( 'points' );\n\tpointsFolder.add( params, 'useBVH' );\n\tpointsFolder.add( params, 'strategy', { CENTER, AVERAGE, SAH } ).onChange( v => {\n\n\t\tconsole.time( 'computeBoundsTree' );\n\t\tbvhMesh.geometry.computeBoundsTree( { strategy: parseInt( v ) } );\n\t\tconsole.timeEnd( 'computeBoundsTree' );\n\t\thelper.update();\n\n\t} );\n\tpointsFolder.add( params, 'pointSize', 0.001, 0.01, 0.001 );\n\tpointsFolder.add( params, 'raycastThreshold', 0.001, 0.01, 0.001 );\n\tpointsFolder.open();\n\n}\n\nwindow.addEventListener( 'pointermove', ( event ) => {\n\n\tif ( ! bvhMesh ) {\n\n\t\treturn;\n\n\t}\n\n\tmouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n\tmouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n\traycaster.setFromCamera( mouse, camera );\n\n\tconst startTime = window.performance.now();\n\tif ( params.useBVH ) {\n\n\t\tsphereCollision.visible = false;\n\n\t\tconst inverseMatrix = new THREE.Matrix4();\n\t\tinverseMatrix.copy( bvhMesh.matrixWorld ).invert();\n\t\traycaster.ray.applyMatrix4( inverseMatrix );\n\n\t\tconst threshold = raycaster.params.Points.threshold;\n\t\tconst localThreshold = threshold / ( ( bvhMesh.scale.x + bvhMesh.scale.y + bvhMesh.scale.z ) / 3 );\n\t\tconst localThresholdSq = localThreshold * localThreshold;\n\n\t\tconst { ray } = raycaster;\n\t\tlet closestDistance = Infinity;\n\t\tbvhMesh.geometry.boundsTree.shapecast( {\n\t\t\tboundsTraverseOrder: box => {\n\n\t\t\t\t// traverse the closer bounds first.\n\t\t\t\treturn box.distanceToPoint( ray.origin );\n\n\t\t\t},\n\t\t\tintersectsBounds: ( box, isLeaf, score ) => {\n\n\t\t\t\t// if we've already found a point that's closer then the full bounds then\n\t\t\t\t// don't traverse further.\n\t\t\t\tif ( score > closestDistance ) {\n\n\t\t\t\t\treturn NOT_INTERSECTED;\n\n\t\t\t\t}\n\n\t\t\t\tbox.expandByScalar( localThreshold );\n\t\t\t\treturn ray.intersectsBox( box ) ? INTERSECTED : NOT_INTERSECTED;\n\n\t\t\t},\n\t\t\tintersectsTriangle: triangle => {\n\n\t\t\t\tconst distancesToRaySq = ray.distanceSqToPoint( triangle.a );\n\t\t\t\tif ( distancesToRaySq < localThresholdSq ) {\n\n\t\t\t\t\t// track the closest found point distance so we can early out traversal and only\n\t\t\t\t\t// use the closest point along the ray.\n\t\t\t\t\tconst distanceToPoint = ray.origin.distanceTo( triangle.a );\n\t\t\t\t\tif ( distanceToPoint < closestDistance ) {\n\n\t\t\t\t\t\tclosestDistance = distanceToPoint;\n\t\t\t\t\t\tsphereCollision.position.copy( triangle.a ).applyMatrix4( bvhMesh.matrixWorld );\n\t\t\t\t\t\tsphereCollision.visible = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t},\n\t\t} );\n\n\t} else {\n\n\t\tconst intersects = raycaster.intersectObject( pointCloud, true );\n\t\tconst hit = intersects[ 0 ];\n\t\tif ( hit ) {\n\n\t\t\tsphereCollision.position.copy( hit.point );\n\t\t\tsphereCollision.visible = true;\n\n\t\t} else {\n\n\t\t\tsphereCollision.visible = false;\n\n\t\t}\n\n\t}\n\n\tconst delta = window.performance.now() - startTime;\n\toutputContainer.innerText = `${ delta.toFixed( 2 ) }ms`;\n\n}, false );\n\nfunction render() {\n\n\trequestAnimationFrame( render );\n\n\tif ( pointCloud ) {\n\n\t\tpointCloud.material.size = params.pointSize;\n\t\thelper.visible = params.displayHelper;\n\t\traycaster.params.Points.threshold = params.raycastThreshold;\n\n\t}\n\n\tstats.begin();\n\n\trenderer.render( scene, camera );\n\tstats.end();\n\n}\n\n\ninit();\nrender();\n","import {\n\tBufferGeometry,\n\tFileLoader,\n\tFloat32BufferAttribute,\n\tLoader,\n\tColor\n} from 'three';\n\n/**\n * Description: A THREE loader for PLY ASCII files (known as the Polygon\n * File Format or the Stanford Triangle Format).\n *\n * Limitations: ASCII decoding assumes file is UTF-8.\n *\n * Usage:\n *\tconst loader = new PLYLoader();\n *\tloader.load('./models/ply/ascii/dolphins.ply', function (geometry) {\n *\n *\t\tscene.add( new THREE.Mesh( geometry ) );\n *\n *\t} );\n *\n * If the PLY file uses non standard property names, they can be mapped while\n * loading. For example, the following maps the properties\n * “diffuse_(red|green|blue)” in the file to standard color names.\n *\n * loader.setPropertyNameMapping( {\n *\tdiffuse_red: 'red',\n *\tdiffuse_green: 'green',\n *\tdiffuse_blue: 'blue'\n * } );\n *\n * Custom properties outside of the defaults for position, uv, normal\n * and color attributes can be added using the setCustomPropertyNameMapping method.\n * For example, the following maps the element properties “custom_property_a”\n * and “custom_property_b” to an attribute “customAttribute” with an item size of 2.\n * Attribute item sizes are set from the number of element properties in the property array.\n *\n * loader.setCustomPropertyNameMapping( {\n *\tcustomAttribute: ['custom_property_a', 'custom_property_b'],\n * } );\n *\n */\n\nconst _color = new Color();\n\nclass PLYLoader extends Loader {\n\n\tconstructor( manager ) {\n\n\t\tsuper( manager );\n\n\t\tthis.propertyNameMapping = {};\n\t\tthis.customPropertyMapping = {};\n\n\t}\n\n\tload( url, onLoad, onProgress, onError ) {\n\n\t\tconst scope = this;\n\n\t\tconst loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setRequestHeader( this.requestHeader );\n\t\tloader.setWithCredentials( this.withCredentials );\n\t\tloader.load( url, function ( text ) {\n\n\t\t\ttry {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t} catch ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\n\t\t\t}\n\n\t\t}, onProgress, onError );\n\n\t}\n\n\tsetPropertyNameMapping( mapping ) {\n\n\t\tthis.propertyNameMapping = mapping;\n\n\t}\n\n\tsetCustomPropertyNameMapping( mapping ) {\n\n\t\tthis.customPropertyMapping = mapping;\n\n\t}\n\n\tparse( data ) {\n\n\t\tfunction parseHeader( data ) {\n\n\t\t\tconst patternHeader = /^ply([\\s\\S]*)end_header(\\r\\n|\\r|\\n)/;\n\t\t\tlet headerText = '';\n\t\t\tlet headerLength = 0;\n\t\t\tconst result = patternHeader.exec( data );\n\n\t\t\tif ( result !== null ) {\n\n\t\t\t\theaderText = result[ 1 ];\n\t\t\t\theaderLength = new Blob( [ result[ 0 ] ] ).size;\n\n\t\t\t}\n\n\t\t\tconst header = {\n\t\t\t\tcomments: [],\n\t\t\t\telements: [],\n\t\t\t\theaderLength: headerLength,\n\t\t\t\tobjInfo: ''\n\t\t\t};\n\n\t\t\tconst lines = headerText.split( /\\r\\n|\\r|\\n/ );\n\t\t\tlet currentElement;\n\n\t\t\tfunction make_ply_element_property( propertValues, propertyNameMapping ) {\n\n\t\t\t\tconst property = { type: propertValues[ 0 ] };\n\n\t\t\t\tif ( property.type === 'list' ) {\n\n\t\t\t\t\tproperty.name = propertValues[ 3 ];\n\t\t\t\t\tproperty.countType = propertValues[ 1 ];\n\t\t\t\t\tproperty.itemType = propertValues[ 2 ];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tproperty.name = propertValues[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( property.name in propertyNameMapping ) {\n\n\t\t\t\t\tproperty.name = propertyNameMapping[ property.name ];\n\n\t\t\t\t}\n\n\t\t\t\treturn property;\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tlet line = lines[ i ];\n\t\t\t\tline = line.trim();\n\n\t\t\t\tif ( line === '' ) continue;\n\n\t\t\t\tconst lineValues = line.split( /\\s+/ );\n\t\t\t\tconst lineType = lineValues.shift();\n\t\t\t\tline = lineValues.join( ' ' );\n\n\t\t\t\tswitch ( lineType ) {\n\n\t\t\t\t\tcase 'format':\n\n\t\t\t\t\t\theader.format = lineValues[ 0 ];\n\t\t\t\t\t\theader.version = lineValues[ 1 ];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'comment':\n\n\t\t\t\t\t\theader.comments.push( line );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'element':\n\n\t\t\t\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcurrentElement = {};\n\t\t\t\t\t\tcurrentElement.name = lineValues[ 0 ];\n\t\t\t\t\t\tcurrentElement.count = parseInt( lineValues[ 1 ] );\n\t\t\t\t\t\tcurrentElement.properties = [];\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'property':\n\n\t\t\t\t\t\tcurrentElement.properties.push( make_ply_element_property( lineValues, scope.propertyNameMapping ) );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'obj_info':\n\n\t\t\t\t\t\theader.objInfo = line;\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.log( 'unhandled', lineType, lineValues );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( currentElement !== undefined ) {\n\n\t\t\t\theader.elements.push( currentElement );\n\n\t\t\t}\n\n\t\t\treturn header;\n\n\t\t}\n\n\t\tfunction parseASCIINumber( n, type ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'char': case 'uchar': case 'short': case 'ushort': case 'int': case 'uint':\n\t\t\t\tcase 'int8': case 'uint8': case 'int16': case 'uint16': case 'int32': case 'uint32':\n\n\t\t\t\t\treturn parseInt( n );\n\n\t\t\t\tcase 'float': case 'double': case 'float32': case 'float64':\n\n\t\t\t\t\treturn parseFloat( n );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseASCIIElement( properties, line ) {\n\n\t\t\tconst values = line.split( /\\s+/ );\n\n\t\t\tconst element = {};\n\n\t\t\tfor ( let i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\tif ( properties[ i ].type === 'list' ) {\n\n\t\t\t\t\tconst list = [];\n\t\t\t\t\tconst n = parseASCIINumber( values.shift(), properties[ i ].countType );\n\n\t\t\t\t\tfor ( let j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\tlist.push( parseASCIINumber( values.shift(), properties[ i ].itemType ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\telement[ properties[ i ].name ] = list;\n\n\t\t\t\t} else {\n\n\t\t\t\t\telement[ properties[ i ].name ] = parseASCIINumber( values.shift(), properties[ i ].type );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn element;\n\n\t\t}\n\n\t\tfunction createBuffer() {\n\n\t\t\tconst buffer = {\n\t\t\t  indices: [],\n\t\t\t  vertices: [],\n\t\t\t  normals: [],\n\t\t\t  uvs: [],\n\t\t\t  faceVertexUvs: [],\n\t\t\t  colors: [],\n\t\t\t};\n\n\t\t\tfor ( const customProperty of Object.keys( scope.customPropertyMapping ) ) {\n\n\t\t\t  buffer[ customProperty ] = [];\n\n\t\t\t}\n\n\t\t\treturn buffer;\n\n\t\t}\n\n\t\tfunction mapElementAttributes( properties ) {\n\n\t\t\tconst elementNames = properties.map( property => {\n\n\t\t\t\treturn property.name;\n\n\t\t\t} );\n\n\t\t\tfunction findAttrName( names ) {\n\n\t\t\t\tfor ( let i = 0, l = names.length; i < l; i ++ ) {\n\n\t\t\t\t\tconst name = names[ i ];\n\n\t\t\t\t\tif ( elementNames.includes( name ) ) return name;\n\n\t\t\t\t}\n\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tattrX: findAttrName( [ 'x', 'px', 'posx' ] ) || 'x',\n\t\t\t\tattrY: findAttrName( [ 'y', 'py', 'posy' ] ) || 'y',\n\t\t\t\tattrZ: findAttrName( [ 'z', 'pz', 'posz' ] ) || 'z',\n\t\t\t\tattrNX: findAttrName( [ 'nx', 'normalx' ] ),\n\t\t\t\tattrNY: findAttrName( [ 'ny', 'normaly' ] ),\n\t\t\t\tattrNZ: findAttrName( [ 'nz', 'normalz' ] ),\n\t\t\t\tattrS: findAttrName( [ 's', 'u', 'texture_u', 'tx' ] ),\n\t\t\t\tattrT: findAttrName( [ 't', 'v', 'texture_v', 'ty' ] ),\n\t\t\t\tattrR: findAttrName( [ 'red', 'diffuse_red', 'r', 'diffuse_r' ] ),\n\t\t\t\tattrG: findAttrName( [ 'green', 'diffuse_green', 'g', 'diffuse_g' ] ),\n\t\t\t\tattrB: findAttrName( [ 'blue', 'diffuse_blue', 'b', 'diffuse_b' ] ),\n\t\t\t};\n\n\t\t}\n\n\t\tfunction parseASCII( data, header ) {\n\n\t\t\t// PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n\t\t\tconst buffer = createBuffer();\n\n\t\t\tlet result;\n\n\t\t\tconst patternBody = /end_header\\s([\\s\\S]*)$/;\n\t\t\tlet body = '';\n\t\t\tif ( ( result = patternBody.exec( data ) ) !== null ) {\n\n\t\t\t\tbody = result[ 1 ];\n\n\t\t\t}\n\n\t\t\tconst lines = body.split( /\\r\\n|\\r|\\n/ );\n\t\t\tlet currentElement = 0;\n\t\t\tlet currentElementCount = 0;\n\t\t\tlet elementDesc = header.elements[ currentElement ];\n\t\t\tlet attributeMap = mapElementAttributes( elementDesc.properties );\n\n\t\t\tfor ( let i = 0; i < lines.length; i ++ ) {\n\n\t\t\t\tlet line = lines[ i ];\n\t\t\t\tline = line.trim();\n\t\t\t\tif ( line === '' ) {\n\n\t\t\t\t\tcontinue;\n\n\t\t\t\t}\n\n\t\t\t\tif ( currentElementCount >= elementDesc.count ) {\n\n\t\t\t\t\tcurrentElement ++;\n\t\t\t\t\tcurrentElementCount = 0;\n\t\t\t\t\telementDesc = header.elements[ currentElement ];\n\n\t\t\t\t\tattributeMap = mapElementAttributes( elementDesc.properties );\n\n\t\t\t\t}\n\n\t\t\t\tconst element = parseASCIIElement( elementDesc.properties, line );\n\n\t\t\t\thandleElement( buffer, elementDesc.name, element, attributeMap );\n\n\t\t\t\tcurrentElementCount ++;\n\n\t\t\t}\n\n\t\t\treturn postProcess( buffer );\n\n\t\t}\n\n\t\tfunction postProcess( buffer ) {\n\n\t\t\tlet geometry = new BufferGeometry();\n\n\t\t\t// mandatory buffer data\n\n\t\t\tif ( buffer.indices.length > 0 ) {\n\n\t\t\t\tgeometry.setIndex( buffer.indices );\n\n\t\t\t}\n\n\t\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( buffer.vertices, 3 ) );\n\n\t\t\t// optional buffer data\n\n\t\t\tif ( buffer.normals.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'normal', new Float32BufferAttribute( buffer.normals, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.uvs.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.uvs, 2 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.colors.length > 0 ) {\n\n\t\t\t\tgeometry.setAttribute( 'color', new Float32BufferAttribute( buffer.colors, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( buffer.faceVertexUvs.length > 0 ) {\n\n\t\t\t\tgeometry = geometry.toNonIndexed();\n\t\t\t\tgeometry.setAttribute( 'uv', new Float32BufferAttribute( buffer.faceVertexUvs, 2 ) );\n\n\t\t\t}\n\n\t\t\t// custom buffer data\n\n\t\t\tfor ( const customProperty of Object.keys( scope.customPropertyMapping ) ) {\n\n\t\t\t\tif ( buffer[ customProperty ].length > 0 ) {\n\n\t\t\t\t  \tgeometry.setAttribute(\n\t\t\t\t\t\tcustomProperty,\n\t\t\t\t\t\tnew Float32BufferAttribute(\n\t\t\t\t\t  \t\tbuffer[ customProperty ],\n\t\t\t\t\t  \t\tscope.customPropertyMapping[ customProperty ].length\n\t\t\t\t\t\t)\n\t\t\t\t  \t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.computeBoundingSphere();\n\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tfunction handleElement( buffer, elementName, element, cacheEntry ) {\n\n\t\t\tif ( elementName === 'vertex' ) {\n\n\t\t\t\tbuffer.vertices.push( element[ cacheEntry.attrX ], element[ cacheEntry.attrY ], element[ cacheEntry.attrZ ] );\n\n\t\t\t\tif ( cacheEntry.attrNX !== null && cacheEntry.attrNY !== null && cacheEntry.attrNZ !== null ) {\n\n\t\t\t\t\tbuffer.normals.push( element[ cacheEntry.attrNX ], element[ cacheEntry.attrNY ], element[ cacheEntry.attrNZ ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( cacheEntry.attrS !== null && cacheEntry.attrT !== null ) {\n\n\t\t\t\t\tbuffer.uvs.push( element[ cacheEntry.attrS ], element[ cacheEntry.attrT ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( cacheEntry.attrR !== null && cacheEntry.attrG !== null && cacheEntry.attrB !== null ) {\n\n\t\t\t\t\t_color.setRGB(\n\t\t\t\t\t\telement[ cacheEntry.attrR ] / 255.0,\n\t\t\t\t\t\telement[ cacheEntry.attrG ] / 255.0,\n\t\t\t\t\t\telement[ cacheEntry.attrB ] / 255.0\n\t\t\t\t\t).convertSRGBToLinear();\n\n\t\t\t\t\tbuffer.colors.push( _color.r, _color.g, _color.b );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( const customProperty of Object.keys( scope.customPropertyMapping ) ) {\n\n\t\t\t\t\tfor ( const elementProperty of scope.customPropertyMapping[ customProperty ] ) {\n\n\t\t\t\t\t  buffer[ customProperty ].push( element[ elementProperty ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( elementName === 'face' ) {\n\n\t\t\t\tconst vertex_indices = element.vertex_indices || element.vertex_index; // issue #9338\n\t\t\t\tconst texcoord = element.texcoord;\n\n\t\t\t\tif ( vertex_indices.length === 3 ) {\n\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 2 ] );\n\n\t\t\t\t\tif ( texcoord && texcoord.length === 6 ) {\n\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 0 ], texcoord[ 1 ] );\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 2 ], texcoord[ 3 ] );\n\t\t\t\t\t\tbuffer.faceVertexUvs.push( texcoord[ 4 ], texcoord[ 5 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( vertex_indices.length === 4 ) {\n\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 0 ], vertex_indices[ 1 ], vertex_indices[ 3 ] );\n\t\t\t\t\tbuffer.indices.push( vertex_indices[ 1 ], vertex_indices[ 2 ], vertex_indices[ 3 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction binaryReadElement( at, properties ) {\n\n\t\t\tconst element = {};\n\t\t\tlet read = 0;\n\n\t\t\tfor ( let i = 0; i < properties.length; i ++ ) {\n\n\t\t\t\tconst property = properties[ i ];\n\t\t\t\tconst valueReader = property.valueReader;\n\n\t\t\t\tif ( property.type === 'list' ) {\n\n\t\t\t\t\tconst list = [];\n\n\t\t\t\t\tconst n = property.countReader.read( at + read );\n\t\t\t\t\tread += property.countReader.size;\n\n\t\t\t\t\tfor ( let j = 0; j < n; j ++ ) {\n\n\t\t\t\t\t\tlist.push( valueReader.read( at + read ) );\n\t\t\t\t\t\tread += valueReader.size;\n\n\t\t\t\t\t}\n\n\t\t\t\t\telement[ property.name ] = list;\n\n\t\t\t\t} else {\n\n\t\t\t\t\telement[ property.name ] = valueReader.read( at + read );\n\t\t\t\t\tread += valueReader.size;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn [ element, read ];\n\n\t\t}\n\n\t\tfunction setPropertyBinaryReaders( properties, body, little_endian ) {\n\n\t\t\tfunction getBinaryReader( dataview, type, little_endian ) {\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t// corespondences for non-specific length types here match rply:\n\t\t\t\t\tcase 'int8':\tcase 'char':\treturn { read: ( at ) => {\n\n\t\t\t\t\t\treturn dataview.getInt8( at );\n\n\t\t\t\t\t}, size: 1 };\n\t\t\t\t\tcase 'uint8':\tcase 'uchar':\treturn { read: ( at ) => {\n\n\t\t\t\t\t\treturn dataview.getUint8( at );\n\n\t\t\t\t\t}, size: 1 };\n\t\t\t\t\tcase 'int16':\tcase 'short':\treturn { read: ( at ) => {\n\n\t\t\t\t\t\treturn dataview.getInt16( at, little_endian );\n\n\t\t\t\t\t}, size: 2 };\n\t\t\t\t\tcase 'uint16':\tcase 'ushort':\treturn { read: ( at ) => {\n\n\t\t\t\t\t\treturn dataview.getUint16( at, little_endian );\n\n\t\t\t\t\t}, size: 2 };\n\t\t\t\t\tcase 'int32':\tcase 'int':\t\treturn { read: ( at ) => {\n\n\t\t\t\t\t\treturn dataview.getInt32( at, little_endian );\n\n\t\t\t\t\t}, size: 4 };\n\t\t\t\t\tcase 'uint32':\tcase 'uint':\treturn { read: ( at ) => {\n\n\t\t\t\t\t\treturn dataview.getUint32( at, little_endian );\n\n\t\t\t\t\t}, size: 4 };\n\t\t\t\t\tcase 'float32': case 'float':\treturn { read: ( at ) => {\n\n\t\t\t\t\t\treturn dataview.getFloat32( at, little_endian );\n\n\t\t\t\t\t}, size: 4 };\n\t\t\t\t\tcase 'float64': case 'double':\treturn { read: ( at ) => {\n\n\t\t\t\t\t\treturn dataview.getFloat64( at, little_endian );\n\n\t\t\t\t\t}, size: 8 };\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( let i = 0, l = properties.length; i < l; i ++ ) {\n\n\t\t\t\tconst property = properties[ i ];\n\n\t\t\t\tif ( property.type === 'list' ) {\n\n\t\t\t\t\tproperty.countReader = getBinaryReader( body, property.countType, little_endian );\n\t\t\t\t\tproperty.valueReader = getBinaryReader( body, property.itemType, little_endian );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tproperty.valueReader = getBinaryReader( body, property.type, little_endian );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction parseBinary( data, header ) {\n\n\t\t\tconst buffer = createBuffer();\n\n\t\t\tconst little_endian = ( header.format === 'binary_little_endian' );\n\t\t\tconst body = new DataView( data, header.headerLength );\n\t\t\tlet result, loc = 0;\n\n\t\t\tfor ( let currentElement = 0; currentElement < header.elements.length; currentElement ++ ) {\n\n\t\t\t\tconst elementDesc = header.elements[ currentElement ];\n\t\t\t\tconst properties = elementDesc.properties;\n\t\t\t\tconst attributeMap = mapElementAttributes( properties );\n\n\t\t\t\tsetPropertyBinaryReaders( properties, body, little_endian );\n\n\t\t\t\tfor ( let currentElementCount = 0; currentElementCount < elementDesc.count; currentElementCount ++ ) {\n\n\t\t\t\t\tresult = binaryReadElement( loc, properties );\n\t\t\t\t\tloc += result[ 1 ];\n\t\t\t\t\tconst element = result[ 0 ];\n\n\t\t\t\t\thandleElement( buffer, elementDesc.name, element, attributeMap );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn postProcess( buffer );\n\n\t\t}\n\n\t\tfunction extractHeaderText( bytes ) {\n\n\t\t\tlet i = 0;\n\t\t\tlet cont = true;\n\n\t\t\tlet line = '';\n\t\t\tconst lines = [];\n\n\t\t\tdo {\n\n\t\t\t\tconst c = String.fromCharCode( bytes[ i ++ ] );\n\n\t\t\t\tif ( c !== '\\n' && c !== '\\r' ) {\n\n\t\t\t\t\tline += c;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( line === 'end_header' ) cont = false;\n\t\t\t\t\tif ( line !== '' ) {\n\n\t\t\t\t\t\tlines.push( line );\n\t\t\t\t\t\tline = '';\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} while ( cont && i < bytes.length );\n\n\t\t\treturn lines.join( '\\r' ) + '\\r';\n\n\t\t}\n\n\t\t//\n\n\t\tlet geometry;\n\t\tconst scope = this;\n\n\t\tif ( data instanceof ArrayBuffer ) {\n\n\t\t\tconst bytes = new Uint8Array( data );\n\t\t\tconst headerText = extractHeaderText( bytes );\n\t\t\tconst header = parseHeader( headerText );\n\n\t\t\tif ( header.format === 'ascii' ) {\n\n\t\t\t\tconst text = new TextDecoder().decode( bytes );\n\n\t\t\t\tgeometry = parseASCII( text, header );\n\n\t\t\t} else {\n\n\t\t\t\tgeometry = parseBinary( data, header );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgeometry = parseASCII( data, parseHeader( data ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t}\n\n}\n\nexport { PLYLoader };\n"],"names":["$d988e066c7f02c6a$var$stats","$d988e066c7f02c6a$var$scene","$d988e066c7f02c6a$var$camera","$d988e066c7f02c6a$var$renderer","$d988e066c7f02c6a$var$bvhMesh","$d988e066c7f02c6a$var$helper","$d988e066c7f02c6a$var$pointCloud","$d988e066c7f02c6a$var$outputContainer","$d988e066c7f02c6a$var$sphereCollision","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$cd1d3d651be7f2fc$export$2e2bcd8739ae039","mode","container","document","createElement","addPanel","panel","appendChild","dom","showPanel","i","children","length","style","display","cssText","addEventListener","event","preventDefault","beginTime","performance","Date","now","prevTime","frames","fpsPanel","Panel","msPanel","self","memory","memPanel","REVISION","begin","end","time","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","name","fg","bg","min","Infinity","max","round","Math","PR","window","devicePixelRatio","WIDTH","HEIGHT","TEXT_X","TEXT_Y","GRAPH_X","GRAPH_Y","GRAPH_WIDTH","GRAPH_HEIGHT","canvas","width","height","context","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","value","maxValue","drawImage","$31ccd9a92979d6bb$export$a0dc2935489c814a","$31ccd9a92979d6bb$export$749bba8a65fa6d70","$31ccd9a92979d6bb$export$e0a981a7a32ddba4","$ilwiq","$b4YKL","$ff8ed","$31ccd9a92979d6bb$var$ray","Ray","$31ccd9a92979d6bb$var$tmpInverseMatrix","Matrix4","$31ccd9a92979d6bb$var$origMeshRaycastFunc","Mesh","prototype","raycast","raycaster","intersects","geometry","boundsTree","undefined","material","copy","matrixWorld","invert","ray","applyMatrix4","bvh","firstHitOnly","hit","convertRaycastIntersect","raycastFirst","push","hits","l","options","MeshBVH","$810f31c6ff4f494e$export$adb106eed99e8cd8","object","point","distance","distanceTo","origin","near","far","$3c85f35a8c29fa9b$export$e57d74bcb7e3bec5","$aw71y","$3c85f35a8c29fa9b$var$boundingBox","Box3","$3c85f35a8c29fa9b$var$MeshBVHRootHelper","Object3D","isMesh","displayEdges","isLineSegments","isLine","constructor","depth","group","BufferGeometry","displayParents","_group","dispose","visible","indexArray","indices","targetDepth","boundsCount","traverse","isLeaf","posIndex","positionArray","Float32Array","boundingData","terminate","arrayToBox","x","xVal","y","yVal","z","zVal","Uint8Array","Uint32Array","Uint16Array","indexLength","posOffset","indexOffset","j","setIndex","BufferAttribute","setAttribute","Group","color","edgeMaterial","opacity","meshMaterial","mesh","_roots","LineBasicMaterial","transparent","depthWrite","MeshBasicMaterial","totalRoots","root","pop","remove","add","updateMatrixWorld","args","parent","updateWorldMatrix","matrix","multiply","decompose","position","quaternion","scale","source","clone","$hBOJ2","$5Rd1x","$cecdfc71d7a8184f$var$_color","Color","$cecdfc71d7a8184f$export$363d99ab40f454cb","Loader","manager","propertyNameMapping","customPropertyMapping","load","url","onLoad","onProgress","onError","scope","loader","FileLoader","setPath","path","setResponseType","setRequestHeader","requestHeader","setWithCredentials","withCredentials","text","parse","console","error","itemError","setPropertyNameMapping","mapping","setCustomPropertyNameMapping","data","parseHeader","currentElement","headerText","headerLength","result","patternHeader","exec","Blob","size","header","comments","elements","objInfo","lines","split","line","trim","lineValues","lineType","shift","join","format","version","count","parseInt","properties","make_ply_element_property","propertValues","property","type","countType","itemType","log","parseASCIINumber","parseFloat","createBuffer","buffer","vertices","normals","uvs","faceVertexUvs","colors","customProperty","keys","mapElementAttributes","elementNames","map","findAttrName","names","includes","attrX","attrY","attrZ","attrNX","attrNY","attrNZ","attrS","attrT","attrR","attrG","attrB","parseASCII","body","patternBody","currentElementCount","elementDesc","attributeMap","element","parseASCIIElement","values","list","handleElement","postProcess","Float32BufferAttribute","toNonIndexed","computeBoundingSphere","elementName","cacheEntry","setRGB","convertSRGBToLinear","r","g","b","elementProperty","vertex_indices","vertex_index","texcoord","ArrayBuffer","bytes","extractHeaderText","cont","c","String","fromCharCode","TextDecoder","decode","parseBinary","little_endian","DataView","loc","setPropertyBinaryReaders","getBinaryReader","dataview","read","at","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","countReader","valueReader","binaryReadElement","$jiuw3","$4h5hN","$Mleu6","$5ca9G","acceleratedRaycast","computeBoundsTree","disposeBoundsTree","$d988e066c7f02c6a$var$mouse","Vector2","$d988e066c7f02c6a$var$raycaster","Raycaster","$d988e066c7f02c6a$var$params","displayHelper","helperDepth","strategy","CENTER","pointSize","raycastThreshold","useBVH","clientX","innerWidth","clientY","innerHeight","setFromCamera","startTime","inverseMatrix","localThreshold","threshold","params","Points","localThresholdSq","closestDistance","shapecast","boundsTraverseOrder","box","distanceToPoint","intersectsBounds","score","NOT_INTERSECTED","expandByScalar","intersectsBox","INTERSECTED","intersectsTriangle","triangle","distancesToRaySq","distanceSqToPoint","a","intersectObject","delta","innerText","toFixed","$d988e066c7f02c6a$var$init","getElementById","WebGLRenderer","antialias","setPixelRatio","setSize","setClearColor","Scene","PerspectiveCamera","updateProjectionMatrix","OrbitControls","default","aspect","center","PointsMaterial","vertexColors","matrixAutoUpdate","bvhGeometry","verticesLength","attributes","bvhMaterial","timeEnd","MeshBVHHelper","SphereGeometry","gui","GUI","helperFolder","addFolder","onChange","open","pointsFolder","AVERAGE","SAH","$d988e066c7f02c6a$var$render","requestAnimationFrame","render"],"version":3,"file":"pointCloudIntersection.812fc1d5.js.map"}