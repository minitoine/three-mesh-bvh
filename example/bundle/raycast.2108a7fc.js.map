{"mappings":"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","sources":["<anon>","node_modules/stats.js/build/stats.min.js","src/utils/ExtensionUtilities.js","src/utils/GeometryRayIntersectUtilities.js","src/objects/MeshBVHHelper.js","example/raycast.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4485\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4485\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"c8CJQ\", function(module, exports) {\n// stats.js - http://github.com/mrdoob/stats.js\n(function(f, e) {\n    module.exports = e();\n})(module.exports, function() {\n    var f = function() {\n        function e(a) {\n            c.appendChild(a.dom);\n            return a;\n        }\n        function u(a) {\n            for(var d = 0; d < c.children.length; d++)c.children[d].style.display = d === a ? \"block\" : \"none\";\n            l = a;\n        }\n        var l = 0, c = document.createElement(\"div\");\n        c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n        c.addEventListener(\"click\", function(a) {\n            a.preventDefault();\n            u(++l % c.children.length);\n        }, !1);\n        var k = (performance || Date).now(), g = k, a = 0, r = e(new f.Panel(\"FPS\", \"#0ff\", \"#002\")), h = e(new f.Panel(\"MS\", \"#0f0\", \"#020\"));\n        if (self.performance && self.performance.memory) var t = e(new f.Panel(\"MB\", \"#f08\", \"#201\"));\n        u(0);\n        return {\n            REVISION: 16,\n            dom: c,\n            addPanel: e,\n            showPanel: u,\n            begin: function() {\n                k = (performance || Date).now();\n            },\n            end: function() {\n                a++;\n                var c = (performance || Date).now();\n                h.update(c - k, 200);\n                if (c > g + 1E3 && (r.update(1E3 * a / (c - g), 100), g = c, a = 0, t)) {\n                    var d = performance.memory;\n                    t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                }\n                return c;\n            },\n            update: function() {\n                k = this.end();\n            },\n            domElement: c,\n            setMode: u\n        };\n    };\n    f.Panel = function(e, f, l) {\n        var c = Infinity, k = 0, g = Math.round, a = g(window.devicePixelRatio || 1), r = 80 * a, h = 48 * a, t = 3 * a, v = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n        q.width = r;\n        q.height = h;\n        q.style.cssText = \"width:80px;height:48px\";\n        var b = q.getContext(\"2d\");\n        b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n        b.textBaseline = \"top\";\n        b.fillStyle = l;\n        b.fillRect(0, 0, r, h);\n        b.fillStyle = f;\n        b.fillText(e, t, v);\n        b.fillRect(d, m, n, p);\n        b.fillStyle = l;\n        b.globalAlpha = .9;\n        b.fillRect(d, m, n, p);\n        return {\n            dom: q,\n            update: function(h, w) {\n                c = Math.min(c, h);\n                k = Math.max(k, h);\n                b.fillStyle = l;\n                b.globalAlpha = 1;\n                b.fillRect(0, 0, r, m);\n                b.fillStyle = f;\n                b.fillText(g(h) + \" \" + e + \" (\" + g(c) + \"-\" + g(k) + \")\", t, v);\n                b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                b.fillRect(d + n - a, m, a, p);\n                b.fillStyle = l;\n                b.globalAlpha = .9;\n                b.fillRect(d + n - a, m, a, g((1 - h / w) * p));\n            }\n        };\n    };\n    return f;\n});\n\n});\n\nparcelRegister(\"4h5hN\", function(module, exports) {\n\n$parcel$export(module.exports, \"acceleratedRaycast\", () => $31ccd9a92979d6bb$export$a0dc2935489c814a);\n$parcel$export(module.exports, \"computeBoundsTree\", () => $31ccd9a92979d6bb$export$749bba8a65fa6d70);\n$parcel$export(module.exports, \"disposeBoundsTree\", () => $31ccd9a92979d6bb$export$e0a981a7a32ddba4);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $b4YKL = parcelRequire(\"b4YKL\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $31ccd9a92979d6bb$var$ray = /* @__PURE__ */ new (0, $ilwiq.Ray)();\nconst $31ccd9a92979d6bb$var$tmpInverseMatrix = /* @__PURE__ */ new (0, $ilwiq.Matrix4)();\nconst $31ccd9a92979d6bb$var$origMeshRaycastFunc = (0, $ilwiq.Mesh).prototype.raycast;\nfunction $31ccd9a92979d6bb$export$a0dc2935489c814a(raycaster, intersects) {\n    if (this.geometry.boundsTree) {\n        if (this.material === undefined) return;\n        $31ccd9a92979d6bb$var$tmpInverseMatrix.copy(this.matrixWorld).invert();\n        $31ccd9a92979d6bb$var$ray.copy(raycaster.ray).applyMatrix4($31ccd9a92979d6bb$var$tmpInverseMatrix);\n        const bvh = this.geometry.boundsTree;\n        if (raycaster.firstHitOnly === true) {\n            const hit = (0, $b4YKL.convertRaycastIntersect)(bvh.raycastFirst($31ccd9a92979d6bb$var$ray, this.material), this, raycaster);\n            if (hit) intersects.push(hit);\n        } else {\n            const hits = bvh.raycast($31ccd9a92979d6bb$var$ray, this.material);\n            for(let i = 0, l = hits.length; i < l; i++){\n                const hit = (0, $b4YKL.convertRaycastIntersect)(hits[i], this, raycaster);\n                if (hit) intersects.push(hit);\n            }\n        }\n    } else $31ccd9a92979d6bb$var$origMeshRaycastFunc.call(this, raycaster, intersects);\n}\nfunction $31ccd9a92979d6bb$export$749bba8a65fa6d70(options) {\n    this.boundsTree = new (0, $ff8ed.MeshBVH)(this, options);\n    return this.boundsTree;\n}\nfunction $31ccd9a92979d6bb$export$e0a981a7a32ddba4() {\n    this.boundsTree = null;\n}\n\n});\nparcelRegister(\"b4YKL\", function(module, exports) {\n\n$parcel$export(module.exports, \"convertRaycastIntersect\", () => $810f31c6ff4f494e$export$adb106eed99e8cd8);\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nfunction $810f31c6ff4f494e$export$adb106eed99e8cd8(hit, object, raycaster) {\n    if (hit === null) return null;\n    hit.point.applyMatrix4(object.matrixWorld);\n    hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n    hit.object = object;\n    if (hit.distance < raycaster.near || hit.distance > raycaster.far) return null;\n    else return hit;\n}\n\n});\n\n\nparcelRegister(\"5ca9G\", function(module, exports) {\n\n$parcel$export(module.exports, \"MeshBVHHelper\", () => $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $aw71y = parcelRequire(\"aw71y\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $3c85f35a8c29fa9b$var$boundingBox = /* @__PURE__ */ new (0, $ilwiq.Box3)();\nclass $3c85f35a8c29fa9b$var$MeshBVHRootHelper extends (0, $ilwiq.Object3D) {\n    get isMesh() {\n        return !this.displayEdges;\n    }\n    get isLineSegments() {\n        return this.displayEdges;\n    }\n    get isLine() {\n        return this.displayEdges;\n    }\n    constructor(bvh, material, depth = 10, group = 0){\n        super();\n        this.material = material;\n        this.geometry = new (0, $ilwiq.BufferGeometry)();\n        this.name = \"MeshBVHRootHelper\";\n        this.depth = depth;\n        this.displayParents = false;\n        this.bvh = bvh;\n        this.displayEdges = true;\n        this._group = group;\n    }\n    raycast() {}\n    update() {\n        const geometry = this.geometry;\n        const boundsTree = this.bvh;\n        const group = this._group;\n        geometry.dispose();\n        this.visible = false;\n        if (boundsTree) {\n            // count the number of bounds required\n            const targetDepth = this.depth - 1;\n            const displayParents = this.displayParents;\n            let boundsCount = 0;\n            boundsTree.traverse((depth, isLeaf)=>{\n                if (depth >= targetDepth || isLeaf) {\n                    boundsCount++;\n                    return true;\n                } else if (displayParents) boundsCount++;\n            }, group);\n            // fill in the position buffer with the bounds corners\n            let posIndex = 0;\n            const positionArray = new Float32Array(24 * boundsCount);\n            boundsTree.traverse((depth, isLeaf, boundingData)=>{\n                const terminate = depth >= targetDepth || isLeaf;\n                if (terminate || displayParents) {\n                    (0, $aw71y.arrayToBox)(0, boundingData, $3c85f35a8c29fa9b$var$boundingBox);\n                    const { min: min, max: max } = $3c85f35a8c29fa9b$var$boundingBox;\n                    for(let x = -1; x <= 1; x += 2){\n                        const xVal = x < 0 ? min.x : max.x;\n                        for(let y = -1; y <= 1; y += 2){\n                            const yVal = y < 0 ? min.y : max.y;\n                            for(let z = -1; z <= 1; z += 2){\n                                const zVal = z < 0 ? min.z : max.z;\n                                positionArray[posIndex + 0] = xVal;\n                                positionArray[posIndex + 1] = yVal;\n                                positionArray[posIndex + 2] = zVal;\n                                posIndex += 3;\n                            }\n                        }\n                    }\n                    return terminate;\n                }\n            }, group);\n            let indexArray;\n            let indices;\n            if (this.displayEdges) // fill in the index buffer to point to the corner points\n            indices = new Uint8Array([\n                // x axis\n                0,\n                4,\n                1,\n                5,\n                2,\n                6,\n                3,\n                7,\n                // y axis\n                0,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                7,\n                // z axis\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7\n            ]);\n            else indices = new Uint8Array([\n                // X-, X+\n                0,\n                1,\n                2,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                6,\n                7,\n                5,\n                // Y-, Y+\n                1,\n                4,\n                5,\n                0,\n                4,\n                1,\n                2,\n                3,\n                6,\n                3,\n                7,\n                6,\n                // Z-, Z+\n                0,\n                2,\n                4,\n                2,\n                6,\n                4,\n                1,\n                5,\n                3,\n                3,\n                5,\n                7\n            ]);\n            if (positionArray.length > 65535) indexArray = new Uint32Array(indices.length * boundsCount);\n            else indexArray = new Uint16Array(indices.length * boundsCount);\n            const indexLength = indices.length;\n            for(let i = 0; i < boundsCount; i++){\n                const posOffset = i * 8;\n                const indexOffset = i * indexLength;\n                for(let j = 0; j < indexLength; j++)indexArray[indexOffset + j] = posOffset + indices[j];\n            }\n            // update the geometry\n            geometry.setIndex(new (0, $ilwiq.BufferAttribute)(indexArray, 1, false));\n            geometry.setAttribute(\"position\", new (0, $ilwiq.BufferAttribute)(positionArray, 3, false));\n            this.visible = true;\n        }\n    }\n}\nclass $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 extends (0, $ilwiq.Group) {\n    get color() {\n        return this.edgeMaterial.color;\n    }\n    get opacity() {\n        return this.edgeMaterial.opacity;\n    }\n    set opacity(v) {\n        this.edgeMaterial.opacity = v;\n        this.meshMaterial.opacity = v;\n    }\n    constructor(mesh = null, bvh = null, depth = 10){\n        // handle bvh, depth signature\n        if (mesh instanceof (0, $ff8ed.MeshBVH)) {\n            depth = bvh || 10;\n            bvh = mesh;\n            mesh = null;\n        }\n        // handle mesh, depth signature\n        if (typeof bvh === \"number\") {\n            depth = bvh;\n            bvh = null;\n        }\n        super();\n        this.name = \"MeshBVHHelper\";\n        this.depth = depth;\n        this.mesh = mesh;\n        this.bvh = bvh;\n        this.displayParents = false;\n        this.displayEdges = true;\n        this._roots = [];\n        const edgeMaterial = new (0, $ilwiq.LineBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        const meshMaterial = new (0, $ilwiq.MeshBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        meshMaterial.color = edgeMaterial.color;\n        this.edgeMaterial = edgeMaterial;\n        this.meshMaterial = meshMaterial;\n        this.update();\n    }\n    update() {\n        const bvh = this.bvh || this.mesh.geometry.boundsTree;\n        const totalRoots = bvh ? bvh._roots.length : 0;\n        while(this._roots.length > totalRoots){\n            const root = this._roots.pop();\n            root.geometry.dispose();\n            this.remove(root);\n        }\n        for(let i = 0; i < totalRoots; i++){\n            const { depth: depth, edgeMaterial: edgeMaterial, meshMaterial: meshMaterial, displayParents: displayParents, displayEdges: displayEdges } = this;\n            if (i >= this._roots.length) {\n                const root = new $3c85f35a8c29fa9b$var$MeshBVHRootHelper(bvh, edgeMaterial, depth, i);\n                this.add(root);\n                this._roots.push(root);\n            }\n            const root = this._roots[i];\n            root.bvh = bvh;\n            root.depth = depth;\n            root.displayParents = displayParents;\n            root.displayEdges = displayEdges;\n            root.material = displayEdges ? edgeMaterial : meshMaterial;\n            root.update();\n        }\n    }\n    updateMatrixWorld(...args) {\n        const mesh = this.mesh;\n        const parent = this.parent;\n        if (mesh !== null) {\n            mesh.updateWorldMatrix(true, false);\n            if (parent) this.matrix.copy(parent.matrixWorld).invert().multiply(mesh.matrixWorld);\n            else this.matrix.copy(mesh.matrixWorld);\n            this.matrix.decompose(this.position, this.quaternion, this.scale);\n        }\n        super.updateMatrixWorld(...args);\n    }\n    copy(source) {\n        this.depth = source.depth;\n        this.mesh = source.mesh;\n        this.bvh = source.bvh;\n        this.opacity = source.opacity;\n        this.color.copy(source.color);\n    }\n    clone() {\n        return new $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5(this.mesh, this.bvh, this.depth);\n    }\n    dispose() {\n        this.edgeMaterial.dispose();\n        this.meshMaterial.dispose();\n        const children = this.children;\n        for(let i = 0, l = children.length; i < l; i++)children[i].geometry.dispose();\n    }\n}\nclass $3c85f35a8c29fa9b$export$5ead38ed5c75a1c8 extends $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 {\n    constructor(...args){\n        super(...args);\n        console.warn(\"MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.\");\n    }\n}\n\n});\n\n\nvar $c8CJQ = parcelRequire(\"c8CJQ\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $4h5hN = parcelRequire(\"4h5hN\");\nvar $Mleu6 = parcelRequire(\"Mleu6\");\nvar $5ca9G = parcelRequire(\"5ca9G\");\n$ilwiq.Mesh.prototype.raycast = (0, $4h5hN.acceleratedRaycast);\n$ilwiq.BufferGeometry.prototype.computeBoundsTree = (0, $4h5hN.computeBoundsTree);\n$ilwiq.BufferGeometry.prototype.disposeBoundsTree = (0, $4h5hN.disposeBoundsTree);\nconst $20fbd9c0fa600a3a$var$bgColor = 1251612;\nlet $20fbd9c0fa600a3a$var$renderer, $20fbd9c0fa600a3a$var$scene, $20fbd9c0fa600a3a$var$stats, $20fbd9c0fa600a3a$var$camera;\nlet $20fbd9c0fa600a3a$var$geometry, $20fbd9c0fa600a3a$var$material, $20fbd9c0fa600a3a$var$boundsViz, $20fbd9c0fa600a3a$var$containerObj;\nconst $20fbd9c0fa600a3a$var$knots = [];\nconst $20fbd9c0fa600a3a$var$rayCasterObjects = [];\n// Create ray casters in the scene\nconst $20fbd9c0fa600a3a$var$raycaster = new $ilwiq.Raycaster();\nconst $20fbd9c0fa600a3a$var$sphere = new $ilwiq.SphereGeometry(0.25, 20, 20);\nconst $20fbd9c0fa600a3a$var$cylinder = new $ilwiq.CylinderGeometry(0.01, 0.01);\nconst $20fbd9c0fa600a3a$var$pointDist = 25;\n// Delta timer\nlet $20fbd9c0fa600a3a$var$lastFrameTime = null;\nlet $20fbd9c0fa600a3a$var$deltaTime = 0;\nconst $20fbd9c0fa600a3a$var$params = {\n    raycasters: {\n        count: 150,\n        speed: 1\n    },\n    mesh: {\n        splitStrategy: (0, $Mleu6.CENTER),\n        count: 1,\n        useBoundsTree: true,\n        visualizeBounds: false,\n        displayParents: false,\n        speed: 1,\n        visualBoundsDepth: 10\n    }\n};\n$20fbd9c0fa600a3a$var$init();\n$20fbd9c0fa600a3a$var$updateFromOptions();\n$20fbd9c0fa600a3a$var$render();\nfunction $20fbd9c0fa600a3a$var$init() {\n    // renderer setup\n    $20fbd9c0fa600a3a$var$renderer = new $ilwiq.WebGLRenderer({\n        antialias: true\n    });\n    $20fbd9c0fa600a3a$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $20fbd9c0fa600a3a$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $20fbd9c0fa600a3a$var$renderer.setClearColor($20fbd9c0fa600a3a$var$bgColor, 1);\n    document.body.appendChild($20fbd9c0fa600a3a$var$renderer.domElement);\n    // scene setup\n    $20fbd9c0fa600a3a$var$scene = new $ilwiq.Scene();\n    $20fbd9c0fa600a3a$var$scene.fog = new $ilwiq.Fog(1251612, 20, 60);\n    const light = new $ilwiq.DirectionalLight(0xffffff, 0.5);\n    light.position.set(1, 1, 1);\n    $20fbd9c0fa600a3a$var$scene.add(light);\n    $20fbd9c0fa600a3a$var$scene.add(new $ilwiq.AmbientLight(0xffffff, 0.4));\n    // geometry setup\n    const radius = 1;\n    const tube = 0.4;\n    const tubularSegments = 400;\n    const radialSegments = 100;\n    $20fbd9c0fa600a3a$var$containerObj = new $ilwiq.Object3D();\n    $20fbd9c0fa600a3a$var$geometry = new $ilwiq.TorusKnotGeometry(radius, tube, tubularSegments, radialSegments);\n    // const knotGeometry = new THREE.TorusKnotGeometry(radius, tube, tubularSegments, radialSegments);\n    $20fbd9c0fa600a3a$var$material = new $ilwiq.MeshPhongMaterial({\n        color: 0xE91E63\n    });\n    $20fbd9c0fa600a3a$var$containerObj.scale.multiplyScalar(10);\n    $20fbd9c0fa600a3a$var$containerObj.rotation.x = 10.989999999999943;\n    $20fbd9c0fa600a3a$var$containerObj.rotation.y = 10.989999999999943;\n    $20fbd9c0fa600a3a$var$scene.add($20fbd9c0fa600a3a$var$containerObj);\n    // camera setup\n    $20fbd9c0fa600a3a$var$camera = new $ilwiq.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);\n    $20fbd9c0fa600a3a$var$camera.position.z = 40;\n    $20fbd9c0fa600a3a$var$camera.far = 100;\n    $20fbd9c0fa600a3a$var$camera.updateProjectionMatrix();\n    // stats setup\n    $20fbd9c0fa600a3a$var$stats = new (0, (/*@__PURE__*/$parcel$interopDefault($c8CJQ)))();\n    document.body.appendChild($20fbd9c0fa600a3a$var$stats.dom);\n    // Run\n    const gui = new $jiuw3.GUI();\n    const rcFolder = gui.addFolder(\"Raycasters\");\n    rcFolder.add($20fbd9c0fa600a3a$var$params.raycasters, \"count\").min(1).max(1000).step(1).onChange(()=>$20fbd9c0fa600a3a$var$updateFromOptions());\n    rcFolder.add($20fbd9c0fa600a3a$var$params.raycasters, \"speed\").min(0).max(20);\n    rcFolder.open();\n    const meshFolder = gui.addFolder(\"Mesh\");\n    meshFolder.add($20fbd9c0fa600a3a$var$params.mesh, \"useBoundsTree\").onChange(()=>$20fbd9c0fa600a3a$var$updateFromOptions());\n    meshFolder.add($20fbd9c0fa600a3a$var$params.mesh, \"splitStrategy\", {\n        \"CENTER\": (0, $Mleu6.CENTER),\n        \"SAH\": (0, $Mleu6.SAH),\n        \"AVERAGE\": (0, $Mleu6.AVERAGE)\n    }).onChange(()=>$20fbd9c0fa600a3a$var$updateFromOptions());\n    meshFolder.add($20fbd9c0fa600a3a$var$params.mesh, \"count\").min(1).max(300).step(1).onChange(()=>$20fbd9c0fa600a3a$var$updateFromOptions());\n    meshFolder.add($20fbd9c0fa600a3a$var$params.mesh, \"speed\").min(0).max(20);\n    meshFolder.add($20fbd9c0fa600a3a$var$params.mesh, \"visualizeBounds\").onChange(()=>$20fbd9c0fa600a3a$var$updateFromOptions());\n    meshFolder.add($20fbd9c0fa600a3a$var$params.mesh, \"displayParents\").onChange(()=>$20fbd9c0fa600a3a$var$updateFromOptions());\n    meshFolder.add($20fbd9c0fa600a3a$var$params.mesh, \"visualBoundsDepth\").min(1).max(20).step(1).onChange(()=>$20fbd9c0fa600a3a$var$updateFromOptions());\n    meshFolder.open();\n    window.addEventListener(\"resize\", function() {\n        $20fbd9c0fa600a3a$var$camera.aspect = window.innerWidth / window.innerHeight;\n        $20fbd9c0fa600a3a$var$camera.updateProjectionMatrix();\n        $20fbd9c0fa600a3a$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    }, false);\n}\nfunction $20fbd9c0fa600a3a$var$addKnot() {\n    const mesh = new $ilwiq.Mesh($20fbd9c0fa600a3a$var$geometry, $20fbd9c0fa600a3a$var$material);\n    mesh.rotation.x = Math.random() * 10;\n    mesh.rotation.y = Math.random() * 10;\n    $20fbd9c0fa600a3a$var$knots.push(mesh);\n    $20fbd9c0fa600a3a$var$containerObj.add(mesh);\n}\nfunction $20fbd9c0fa600a3a$var$addRaycaster() {\n    // Objects\n    const obj = new $ilwiq.Object3D();\n    const material = new $ilwiq.MeshBasicMaterial({\n        color: 0xffffff\n    });\n    const origMesh = new $ilwiq.Mesh($20fbd9c0fa600a3a$var$sphere, material);\n    const hitMesh = new $ilwiq.Mesh($20fbd9c0fa600a3a$var$sphere, material);\n    hitMesh.scale.multiplyScalar(0.25);\n    origMesh.scale.multiplyScalar(0.5);\n    const cylinderMesh = new $ilwiq.Mesh($20fbd9c0fa600a3a$var$cylinder, new $ilwiq.MeshBasicMaterial({\n        color: 0xffffff,\n        transparent: true,\n        opacity: 0.25\n    }));\n    // Init the rotation root\n    obj.add(cylinderMesh);\n    obj.add(origMesh);\n    obj.add(hitMesh);\n    $20fbd9c0fa600a3a$var$scene.add(obj);\n    // set transforms\n    origMesh.position.set($20fbd9c0fa600a3a$var$pointDist, 0, 0);\n    obj.rotation.x = Math.random() * 10;\n    obj.rotation.y = Math.random() * 10;\n    obj.rotation.z = Math.random() * 10;\n    // reusable vectors\n    const origVec = new $ilwiq.Vector3();\n    const dirVec = new $ilwiq.Vector3();\n    const xDir = Math.random() - 0.5;\n    const yDir = Math.random() - 0.5;\n    const zDir = Math.random() - 0.5;\n    $20fbd9c0fa600a3a$var$rayCasterObjects.push({\n        update: ()=>{\n            obj.rotation.x += xDir * 0.0001 * $20fbd9c0fa600a3a$var$params.raycasters.speed * $20fbd9c0fa600a3a$var$deltaTime;\n            obj.rotation.y += yDir * 0.0001 * $20fbd9c0fa600a3a$var$params.raycasters.speed * $20fbd9c0fa600a3a$var$deltaTime;\n            obj.rotation.z += zDir * 0.0001 * $20fbd9c0fa600a3a$var$params.raycasters.speed * $20fbd9c0fa600a3a$var$deltaTime;\n            origMesh.updateMatrixWorld();\n            origVec.setFromMatrixPosition(origMesh.matrixWorld);\n            dirVec.copy(origVec).multiplyScalar(-1).normalize();\n            $20fbd9c0fa600a3a$var$raycaster.set(origVec, dirVec);\n            $20fbd9c0fa600a3a$var$raycaster.firstHitOnly = true;\n            const res = $20fbd9c0fa600a3a$var$raycaster.intersectObject($20fbd9c0fa600a3a$var$containerObj, true);\n            const length = res.length ? res[0].distance : $20fbd9c0fa600a3a$var$pointDist;\n            hitMesh.position.set($20fbd9c0fa600a3a$var$pointDist - length, 0, 0);\n            cylinderMesh.position.set($20fbd9c0fa600a3a$var$pointDist - length / 2, 0, 0);\n            cylinderMesh.scale.set(1, length, 1);\n            cylinderMesh.rotation.z = Math.PI / 2;\n        },\n        remove: ()=>{\n            $20fbd9c0fa600a3a$var$scene.remove(obj);\n        }\n    });\n}\nfunction $20fbd9c0fa600a3a$var$updateFromOptions() {\n    // Update raycaster count\n    while($20fbd9c0fa600a3a$var$rayCasterObjects.length > $20fbd9c0fa600a3a$var$params.raycasters.count)$20fbd9c0fa600a3a$var$rayCasterObjects.pop().remove();\n    while($20fbd9c0fa600a3a$var$rayCasterObjects.length < $20fbd9c0fa600a3a$var$params.raycasters.count)$20fbd9c0fa600a3a$var$addRaycaster();\n    if (!$20fbd9c0fa600a3a$var$geometry) return;\n    // Update whether or not to use the bounds tree\n    if (!$20fbd9c0fa600a3a$var$params.mesh.useBoundsTree && $20fbd9c0fa600a3a$var$geometry.boundsTree || $20fbd9c0fa600a3a$var$geometry.boundsTree && $20fbd9c0fa600a3a$var$params.mesh.splitStrategy !== $20fbd9c0fa600a3a$var$geometry.boundsTree.splitStrategy) $20fbd9c0fa600a3a$var$geometry.disposeBoundsTree();\n    if ($20fbd9c0fa600a3a$var$params.mesh.useBoundsTree && !$20fbd9c0fa600a3a$var$geometry.boundsTree) {\n        console.time(\"computing bounds tree\");\n        $20fbd9c0fa600a3a$var$geometry.computeBoundsTree({\n            maxLeafTris: 5,\n            strategy: parseFloat($20fbd9c0fa600a3a$var$params.mesh.splitStrategy)\n        });\n        $20fbd9c0fa600a3a$var$geometry.boundsTree.splitStrategy = $20fbd9c0fa600a3a$var$params.mesh.splitStrategy;\n        console.timeEnd(\"computing bounds tree\");\n        if ($20fbd9c0fa600a3a$var$boundsViz) $20fbd9c0fa600a3a$var$boundsViz.update();\n    }\n    // Update knot count\n    const oldLen = $20fbd9c0fa600a3a$var$knots.length;\n    while($20fbd9c0fa600a3a$var$knots.length > $20fbd9c0fa600a3a$var$params.mesh.count)$20fbd9c0fa600a3a$var$containerObj.remove($20fbd9c0fa600a3a$var$knots.pop());\n    while($20fbd9c0fa600a3a$var$knots.length < $20fbd9c0fa600a3a$var$params.mesh.count)$20fbd9c0fa600a3a$var$addKnot();\n    if (oldLen !== $20fbd9c0fa600a3a$var$knots.length) {\n        const lerp = (a, b, t)=>a + (b - a) * t;\n        const lerpAmt = ($20fbd9c0fa600a3a$var$knots.length - 1) / 299;\n        const dist = lerp(0, 2, lerpAmt);\n        const scale = lerp(1, 0.2, lerpAmt);\n        $20fbd9c0fa600a3a$var$knots.forEach((c)=>{\n            c.scale.set(1, 1, 1).multiplyScalar(scale);\n            const vec3 = new $ilwiq.Vector3(0, 1, 0);\n            vec3.applyAxisAngle(new $ilwiq.Vector3(1, 0, 0), Math.PI * Math.random());\n            vec3.applyAxisAngle(new $ilwiq.Vector3(0, 1, 0), 2 * Math.PI * Math.random());\n            vec3.multiplyScalar(dist);\n            c.position.set(vec3.x, vec3.y, vec3.z);\n        });\n    }\n    // Update bounds viz\n    const shouldDisplayBounds = $20fbd9c0fa600a3a$var$params.mesh.visualizeBounds && $20fbd9c0fa600a3a$var$geometry.boundsTree;\n    if ($20fbd9c0fa600a3a$var$boundsViz && !shouldDisplayBounds) {\n        $20fbd9c0fa600a3a$var$containerObj.remove($20fbd9c0fa600a3a$var$boundsViz);\n        $20fbd9c0fa600a3a$var$boundsViz = null;\n    }\n    if (!$20fbd9c0fa600a3a$var$boundsViz && shouldDisplayBounds) {\n        $20fbd9c0fa600a3a$var$boundsViz = new (0, $5ca9G.MeshBVHHelper)($20fbd9c0fa600a3a$var$knots[0]);\n        $20fbd9c0fa600a3a$var$containerObj.add($20fbd9c0fa600a3a$var$boundsViz);\n    }\n    if ($20fbd9c0fa600a3a$var$boundsViz) {\n        $20fbd9c0fa600a3a$var$boundsViz.depth = $20fbd9c0fa600a3a$var$params.mesh.visualBoundsDepth;\n        $20fbd9c0fa600a3a$var$boundsViz.displayParents = $20fbd9c0fa600a3a$var$params.mesh.displayParents;\n        $20fbd9c0fa600a3a$var$boundsViz.update();\n    }\n}\nfunction $20fbd9c0fa600a3a$var$render() {\n    $20fbd9c0fa600a3a$var$stats.begin();\n    const currTime = window.performance.now();\n    $20fbd9c0fa600a3a$var$lastFrameTime = $20fbd9c0fa600a3a$var$lastFrameTime || currTime;\n    $20fbd9c0fa600a3a$var$deltaTime = currTime - $20fbd9c0fa600a3a$var$lastFrameTime;\n    $20fbd9c0fa600a3a$var$containerObj.rotation.x += 0.0001 * $20fbd9c0fa600a3a$var$params.mesh.speed * $20fbd9c0fa600a3a$var$deltaTime;\n    $20fbd9c0fa600a3a$var$containerObj.rotation.y += 0.0001 * $20fbd9c0fa600a3a$var$params.mesh.speed * $20fbd9c0fa600a3a$var$deltaTime;\n    $20fbd9c0fa600a3a$var$containerObj.children.forEach((c)=>{\n        c.rotation.x += 0.0001 * $20fbd9c0fa600a3a$var$params.mesh.speed * $20fbd9c0fa600a3a$var$deltaTime;\n        c.rotation.y += 0.0001 * $20fbd9c0fa600a3a$var$params.mesh.speed * $20fbd9c0fa600a3a$var$deltaTime;\n    });\n    $20fbd9c0fa600a3a$var$containerObj.updateMatrixWorld();\n    $20fbd9c0fa600a3a$var$rayCasterObjects.forEach((f)=>f.update());\n    $20fbd9c0fa600a3a$var$renderer.render($20fbd9c0fa600a3a$var$scene, $20fbd9c0fa600a3a$var$camera);\n    $20fbd9c0fa600a3a$var$lastFrameTime = currTime;\n    $20fbd9c0fa600a3a$var$stats.end();\n    requestAnimationFrame($20fbd9c0fa600a3a$var$render);\n}\n\n\n//# sourceMappingURL=raycast.2108a7fc.js.map\n","// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import { Ray, Matrix4, Mesh } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst ray = /* @__PURE__ */ new Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n","// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\treturn null;\n\n\t} else {\n\n\t\treturn hit;\n\n\t}\n\n}\n","import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nclass MeshBVHRootHelper extends Object3D {\n\n\tget isMesh() {\n\n\t\treturn ! this.displayEdges;\n\n\t}\n\n\tget isLineSegments() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tget isLine() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tconstructor( bvh, material, depth = 10, group = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.material = material;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.name = 'MeshBVHRootHelper';\n\t\tthis.depth = depth;\n\t\tthis.displayParents = false;\n\t\tthis.bvh = bvh;\n\t\tthis.displayEdges = true;\n\t\tthis._group = group;\n\n\t}\n\n\traycast() {}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst boundsTree = this.bvh;\n\t\tconst group = this._group;\n\t\tgeometry.dispose();\n\t\tthis.visible = false;\n\t\tif ( boundsTree ) {\n\n\t\t\t// count the number of bounds required\n\t\t\tconst targetDepth = this.depth - 1;\n\t\t\tconst displayParents = this.displayParents;\n\t\t\tlet boundsCount = 0;\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\tif ( depth >= targetDepth || isLeaf ) {\n\n\t\t\t\t\tboundsCount ++;\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\t// fill in the position buffer with the bounds corners\n\t\t\tlet posIndex = 0;\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\tconst terminate = depth >= targetDepth || isLeaf;\n\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn terminate;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\tlet indexArray;\n\t\t\tlet indices;\n\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t// x axis\n\t\t\t\t\t0, 4,\n\t\t\t\t\t1, 5,\n\t\t\t\t\t2, 6,\n\t\t\t\t\t3, 7,\n\n\t\t\t\t\t// y axis\n\t\t\t\t\t0, 2,\n\t\t\t\t\t1, 3,\n\t\t\t\t\t4, 6,\n\t\t\t\t\t5, 7,\n\n\t\t\t\t\t// z axis\n\t\t\t\t\t0, 1,\n\t\t\t\t\t2, 3,\n\t\t\t\t\t4, 5,\n\t\t\t\t\t6, 7,\n\t\t\t\t] );\n\n\t\t\t} else {\n\n\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t// X-, X+\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t} else {\n\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t}\n\n\t\t\tconst indexLength = indices.length;\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\tconst posOffset = i * 8;\n\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the geometry\n\t\t\tgeometry.setIndex(\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\n\t\t\t);\n\t\t\tgeometry.setAttribute(\n\t\t\t\t'position',\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\n\t\t\t);\n\t\t\tthis.visible = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass MeshBVHHelper extends Group {\n\n\tget color() {\n\n\t\treturn this.edgeMaterial.color;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.edgeMaterial.opacity;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tthis.edgeMaterial.opacity = v;\n\t\tthis.meshMaterial.opacity = v;\n\n\t}\n\n\tconstructor( mesh = null, bvh = null, depth = 10 ) {\n\n\t\t// handle bvh, depth signature\n\t\tif ( mesh instanceof MeshBVH ) {\n\n\t\t\tdepth = bvh || 10;\n\t\t\tbvh = mesh;\n\t\t\tmesh = null;\n\n\t\t}\n\n\t\t// handle mesh, depth signature\n\t\tif ( typeof bvh === 'number' ) {\n\n\t\t\tdepth = bvh;\n\t\t\tbvh = null;\n\n\t\t}\n\n\t\tsuper();\n\n\t\tthis.name = 'MeshBVHHelper';\n\t\tthis.depth = depth;\n\t\tthis.mesh = mesh;\n\t\tthis.bvh = bvh;\n\t\tthis.displayParents = false;\n\t\tthis.displayEdges = true;\n\t\tthis._roots = [];\n\n\t\tconst edgeMaterial = new LineBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tconst meshMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\tthis.edgeMaterial = edgeMaterial;\n\t\tthis.meshMaterial = meshMaterial;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst bvh = this.bvh || this.mesh.geometry.boundsTree;\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\tconst root = this._roots.pop();\n\t\t\troot.geometry.dispose();\n\t\t\tthis.remove( root );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\tconst { depth, edgeMaterial, meshMaterial, displayParents, displayEdges } = this;\n\n\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\tconst root = new MeshBVHRootHelper( bvh, edgeMaterial, depth, i );\n\t\t\t\tthis.add( root );\n\t\t\t\tthis._roots.push( root );\n\n\t\t\t}\n\n\t\t\tconst root = this._roots[ i ];\n\t\t\troot.bvh = bvh;\n\t\t\troot.depth = depth;\n\t\t\troot.displayParents = displayParents;\n\t\t\troot.displayEdges = displayEdges;\n\t\t\troot.material = displayEdges ? edgeMaterial : meshMaterial;\n\t\t\troot.update();\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( ...args ) {\n\n\t\tconst mesh = this.mesh;\n\t\tconst parent = this.parent;\n\n\t\tif ( mesh !== null ) {\n\n\t\t\tmesh.updateWorldMatrix( true, false );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( parent.matrixWorld )\n\t\t\t\t\t.invert()\n\t\t\t\t\t.multiply( mesh.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( mesh.matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.matrix.decompose(\n\t\t\t\tthis.position,\n\t\t\t\tthis.quaternion,\n\t\t\t\tthis.scale,\n\t\t\t);\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( ...args );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.depth = source.depth;\n\t\tthis.mesh = source.mesh;\n\t\tthis.bvh = source.bvh;\n\t\tthis.opacity = source.opacity;\n\t\tthis.color.copy( source.color );\n\n\t}\n\n\tclone() {\n\n\t\treturn new MeshBVHHelper( this.mesh, this.bvh, this.depth );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.edgeMaterial.dispose();\n\t\tthis.meshMaterial.dispose();\n\n\t\tconst children = this.children;\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport class MeshBVHVisualizer extends MeshBVHHelper {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconsole.warn( 'MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.' );\n\n\t}\n\n}\n\nexport { MeshBVHHelper };\n","import Stats from 'stats.js';\nimport * as dat from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport * as THREE from 'three';\nimport {\n\tacceleratedRaycast, computeBoundsTree, disposeBoundsTree,\n\tCENTER, SAH, AVERAGE, MeshBVHHelper,\n} from '..';\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nconst bgColor = 0x263238 / 2;\n\nlet renderer, scene, stats, camera;\nlet geometry, material, boundsViz, containerObj;\nconst knots = [];\nconst rayCasterObjects = [];\n\n// Create ray casters in the scene\nconst raycaster = new THREE.Raycaster();\nconst sphere = new THREE.SphereGeometry( 0.25, 20, 20 );\nconst cylinder = new THREE.CylinderGeometry( 0.01, 0.01 );\nconst pointDist = 25;\n\n// Delta timer\nlet lastFrameTime = null;\nlet deltaTime = 0;\n\nconst params = {\n\traycasters: {\n\t\tcount: 150,\n\t\tspeed: 1\n\t},\n\n\tmesh: {\n\t\tsplitStrategy: CENTER,\n\t\tcount: 1,\n\t\tuseBoundsTree: true,\n\t\tvisualizeBounds: false,\n\t\tdisplayParents: false,\n\t\tspeed: 1,\n\t\tvisualBoundsDepth: 10\n\t}\n};\n\ninit();\nupdateFromOptions();\nrender();\n\nfunction init() {\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\tscene.fog = new THREE.Fog( 0x263238 / 2, 20, 60 );\n\n\tconst light = new THREE.DirectionalLight( 0xffffff, 0.5 );\n\tlight.position.set( 1, 1, 1 );\n\tscene.add( light );\n\tscene.add( new THREE.AmbientLight( 0xffffff, 0.4 ) );\n\n\t// geometry setup\n\tconst radius = 1;\n\tconst tube = 0.4;\n\tconst tubularSegments = 400;\n\tconst radialSegments = 100;\n\n\tcontainerObj = new THREE.Object3D();\n\tgeometry = new THREE.TorusKnotGeometry( radius, tube, tubularSegments, radialSegments );\n\t// const knotGeometry = new THREE.TorusKnotGeometry(radius, tube, tubularSegments, radialSegments);\n\tmaterial = new THREE.MeshPhongMaterial( { color: 0xE91E63 } );\n\tcontainerObj.scale.multiplyScalar( 10 );\n\tcontainerObj.rotation.x = 10.989999999999943;\n\tcontainerObj.rotation.y = 10.989999999999943;\n\tscene.add( containerObj );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.z = 40;\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\t// Run\n\tconst gui = new dat.GUI();\n\tconst rcFolder = gui.addFolder( 'Raycasters' );\n\trcFolder.add( params.raycasters, 'count' ).min( 1 ).max( 1000 ).step( 1 ).onChange( () => updateFromOptions() );\n\trcFolder.add( params.raycasters, 'speed' ).min( 0 ).max( 20 );\n\trcFolder.open();\n\n\tconst meshFolder = gui.addFolder( 'Mesh' );\n\tmeshFolder.add( params.mesh, 'useBoundsTree' ).onChange( () => updateFromOptions() );\n\tmeshFolder.add( params.mesh, 'splitStrategy', { 'CENTER': CENTER, 'SAH': SAH, 'AVERAGE': AVERAGE } ).onChange( () => updateFromOptions() );\n\tmeshFolder.add( params.mesh, 'count' ).min( 1 ).max( 300 ).step( 1 ).onChange( () => updateFromOptions() );\n\tmeshFolder.add( params.mesh, 'speed' ).min( 0 ).max( 20 );\n\tmeshFolder.add( params.mesh, 'visualizeBounds' ).onChange( () => updateFromOptions() );\n\tmeshFolder.add( params.mesh, 'displayParents' ).onChange( () => updateFromOptions() );\n\tmeshFolder.add( params.mesh, 'visualBoundsDepth' ).min( 1 ).max( 20 ).step( 1 ).onChange( () => updateFromOptions() );\n\tmeshFolder.open();\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n}\n\nfunction addKnot() {\n\n\tconst mesh = new THREE.Mesh( geometry, material );\n\tmesh.rotation.x = Math.random() * 10;\n\tmesh.rotation.y = Math.random() * 10;\n\tknots.push( mesh );\n\tcontainerObj.add( mesh );\n\n}\n\nfunction addRaycaster() {\n\n\t// Objects\n\tconst obj = new THREE.Object3D();\n\tconst material = new THREE.MeshBasicMaterial( { color: 0xffffff } );\n\tconst origMesh = new THREE.Mesh( sphere, material );\n\tconst hitMesh = new THREE.Mesh( sphere, material );\n\thitMesh.scale.multiplyScalar( 0.25 );\n\torigMesh.scale.multiplyScalar( 0.5 );\n\n\tconst cylinderMesh = new THREE.Mesh( cylinder, new THREE.MeshBasicMaterial( { color: 0xffffff, transparent: true, opacity: 0.25 } ) );\n\n\t// Init the rotation root\n\tobj.add( cylinderMesh );\n\tobj.add( origMesh );\n\tobj.add( hitMesh );\n\tscene.add( obj );\n\n\t// set transforms\n\torigMesh.position.set( pointDist, 0, 0 );\n\tobj.rotation.x = Math.random() * 10;\n\tobj.rotation.y = Math.random() * 10;\n\tobj.rotation.z = Math.random() * 10;\n\n\t// reusable vectors\n\tconst origVec = new THREE.Vector3();\n\tconst dirVec = new THREE.Vector3();\n\tconst xDir = ( Math.random() - 0.5 );\n\tconst yDir = ( Math.random() - 0.5 );\n\tconst zDir = ( Math.random() - 0.5 );\n\trayCasterObjects.push( {\n\t\tupdate: () => {\n\n\t\t\tobj.rotation.x += xDir * 0.0001 * params.raycasters.speed * deltaTime;\n\t\t\tobj.rotation.y += yDir * 0.0001 * params.raycasters.speed * deltaTime;\n\t\t\tobj.rotation.z += zDir * 0.0001 * params.raycasters.speed * deltaTime;\n\n\t\t\torigMesh.updateMatrixWorld();\n\t\t\torigVec.setFromMatrixPosition( origMesh.matrixWorld );\n\t\t\tdirVec.copy( origVec ).multiplyScalar( - 1 ).normalize();\n\n\t\t\traycaster.set( origVec, dirVec );\n\t\t\traycaster.firstHitOnly = true;\n\t\t\tconst res = raycaster.intersectObject( containerObj, true );\n\t\t\tconst length = res.length ? res[ 0 ].distance : pointDist;\n\n\t\t\thitMesh.position.set( pointDist - length, 0, 0 );\n\n\t\t\tcylinderMesh.position.set( pointDist - ( length / 2 ), 0, 0 );\n\t\t\tcylinderMesh.scale.set( 1, length, 1 );\n\n\t\t\tcylinderMesh.rotation.z = Math.PI / 2;\n\n\t\t},\n\n\t\tremove: () => {\n\n\t\t\tscene.remove( obj );\n\n\t\t}\n\t} );\n\n}\n\nfunction updateFromOptions() {\n\n\t// Update raycaster count\n\twhile ( rayCasterObjects.length > params.raycasters.count ) {\n\n\t\trayCasterObjects.pop().remove();\n\n\t}\n\n\twhile ( rayCasterObjects.length < params.raycasters.count ) {\n\n\t\taddRaycaster();\n\n\t}\n\n\tif ( ! geometry ) {\n\n\t\treturn;\n\n\t}\n\n\t// Update whether or not to use the bounds tree\n\tif (\n\t\t! params.mesh.useBoundsTree && geometry.boundsTree ||\n\t\tgeometry.boundsTree && params.mesh.splitStrategy !== geometry.boundsTree.splitStrategy\n\t) {\n\n\t\tgeometry.disposeBoundsTree();\n\n\t}\n\n\tif ( params.mesh.useBoundsTree && ! geometry.boundsTree ) {\n\n\t\tconsole.time( 'computing bounds tree' );\n\t\tgeometry.computeBoundsTree( {\n\t\t\tmaxLeafTris: 5,\n\t\t\tstrategy: parseFloat( params.mesh.splitStrategy ),\n\t\t} );\n\t\tgeometry.boundsTree.splitStrategy = params.mesh.splitStrategy;\n\t\tconsole.timeEnd( 'computing bounds tree' );\n\n\t\tif ( boundsViz ) {\n\n\t\t\tboundsViz.update();\n\n\t\t}\n\n\t}\n\n\t// Update knot count\n\tconst oldLen = knots.length;\n\twhile ( knots.length > params.mesh.count ) {\n\n\t\tcontainerObj.remove( knots.pop() );\n\n\t}\n\n\twhile ( knots.length < params.mesh.count ) {\n\n\t\taddKnot();\n\n\t}\n\n\tif ( oldLen !== knots.length ) {\n\n\t\tconst lerp = ( a, b, t ) => a + ( b - a ) * t;\n\t\tconst lerpAmt = ( knots.length - 1 ) / ( 300 - 1 );\n\t\tconst dist = lerp( 0, 2, lerpAmt );\n\t\tconst scale = lerp( 1, 0.2, lerpAmt );\n\n\t\tknots.forEach( c => {\n\n\t\t\tc.scale.set( 1, 1, 1 ).multiplyScalar( scale );\n\n\t\t\tconst vec3 = new THREE.Vector3( 0, 1, 0 );\n\t\t\tvec3.applyAxisAngle( new THREE.Vector3( 1, 0, 0 ), Math.PI * Math.random() );\n\t\t\tvec3.applyAxisAngle( new THREE.Vector3( 0, 1, 0 ), 2 * Math.PI * Math.random() );\n\t\t\tvec3.multiplyScalar( dist );\n\n\t\t\tc.position.set( vec3.x, vec3.y, vec3.z );\n\n\t\t} );\n\n\t}\n\n\t// Update bounds viz\n\tconst shouldDisplayBounds = params.mesh.visualizeBounds && geometry.boundsTree;\n\tif ( boundsViz && ! shouldDisplayBounds ) {\n\n\t\tcontainerObj.remove( boundsViz );\n\t\tboundsViz = null;\n\n\t}\n\n\tif ( ! boundsViz && shouldDisplayBounds ) {\n\n\t\tboundsViz = new MeshBVHHelper( knots[ 0 ] );\n\t\tcontainerObj.add( boundsViz );\n\n\t}\n\n\tif ( boundsViz ) {\n\n\t\tboundsViz.depth = params.mesh.visualBoundsDepth;\n\t\tboundsViz.displayParents = params.mesh.displayParents;\n\t\tboundsViz.update();\n\n\t}\n\n}\n\nfunction render() {\n\n\tstats.begin();\n\n\tconst currTime = window.performance.now();\n\tlastFrameTime = lastFrameTime || currTime;\n\tdeltaTime = currTime - lastFrameTime;\n\n\tcontainerObj.rotation.x += 0.0001 * params.mesh.speed * deltaTime;\n\tcontainerObj.rotation.y += 0.0001 * params.mesh.speed * deltaTime;\n\tcontainerObj.children.forEach( c => {\n\n\t\tc.rotation.x += 0.0001 * params.mesh.speed * deltaTime;\n\t\tc.rotation.y += 0.0001 * params.mesh.speed * deltaTime;\n\n\t} );\n\tcontainerObj.updateMatrixWorld();\n\n\trayCasterObjects.forEach( f => f.update() );\n\n\trenderer.render( scene, camera );\n\n\tlastFrameTime = currTime;\n\n\tstats.end();\n\n\trequestAnimationFrame( render );\n\n}\n"],"names":["$20fbd9c0fa600a3a$var$renderer","$20fbd9c0fa600a3a$var$scene","$20fbd9c0fa600a3a$var$stats","$20fbd9c0fa600a3a$var$camera","$20fbd9c0fa600a3a$var$geometry","$20fbd9c0fa600a3a$var$material","$20fbd9c0fa600a3a$var$boundsViz","$20fbd9c0fa600a3a$var$containerObj","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","f","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","m","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","$31ccd9a92979d6bb$export$a0dc2935489c814a","$31ccd9a92979d6bb$export$749bba8a65fa6d70","$31ccd9a92979d6bb$export$e0a981a7a32ddba4","$ilwiq","$b4YKL","$ff8ed","$31ccd9a92979d6bb$var$ray","Ray","$31ccd9a92979d6bb$var$tmpInverseMatrix","Matrix4","$31ccd9a92979d6bb$var$origMeshRaycastFunc","Mesh","prototype","raycast","raycaster","intersects","geometry","boundsTree","undefined","material","copy","matrixWorld","invert","ray","applyMatrix4","bvh","firstHitOnly","hit","convertRaycastIntersect","raycastFirst","push","hits","i","options","MeshBVH","$810f31c6ff4f494e$export$adb106eed99e8cd8","object","point","distance","distanceTo","origin","near","far","$3c85f35a8c29fa9b$export$e57d74bcb7e3bec5","$aw71y","$3c85f35a8c29fa9b$var$boundingBox","Box3","$3c85f35a8c29fa9b$var$MeshBVHRootHelper","Object3D","isMesh","displayEdges","isLineSegments","isLine","constructor","depth","group","BufferGeometry","name","displayParents","_group","dispose","visible","indexArray","indices","targetDepth","boundsCount","traverse","isLeaf","posIndex","positionArray","Float32Array","boundingData","terminate","arrayToBox","x","xVal","y","yVal","z","zVal","Uint8Array","Uint32Array","Uint16Array","indexLength","posOffset","indexOffset","j","setIndex","BufferAttribute","setAttribute","Group","color","edgeMaterial","opacity","meshMaterial","mesh","_roots","LineBasicMaterial","transparent","depthWrite","MeshBasicMaterial","totalRoots","root","pop","remove","add","updateMatrixWorld","args","parent","updateWorldMatrix","matrix","multiply","decompose","position","quaternion","scale","source","clone","$c8CJQ","$jiuw3","$4h5hN","$Mleu6","$5ca9G","acceleratedRaycast","computeBoundsTree","disposeBoundsTree","$20fbd9c0fa600a3a$var$knots","$20fbd9c0fa600a3a$var$rayCasterObjects","$20fbd9c0fa600a3a$var$raycaster","Raycaster","$20fbd9c0fa600a3a$var$sphere","SphereGeometry","$20fbd9c0fa600a3a$var$cylinder","CylinderGeometry","$20fbd9c0fa600a3a$var$lastFrameTime","$20fbd9c0fa600a3a$var$deltaTime","$20fbd9c0fa600a3a$var$params","raycasters","count","speed","splitStrategy","CENTER","useBoundsTree","visualizeBounds","visualBoundsDepth","$20fbd9c0fa600a3a$var$updateFromOptions","$20fbd9c0fa600a3a$var$addRaycaster","obj","origMesh","hitMesh","multiplyScalar","cylinderMesh","rotation","random","origVec","Vector3","dirVec","xDir","yDir","zDir","setFromMatrixPosition","normalize","res","intersectObject","$20fbd9c0fa600a3a$var$pointDist","PI","console","time","maxLeafTris","strategy","parseFloat","timeEnd","oldLen","$20fbd9c0fa600a3a$var$addKnot","lerpAmt","dist","forEach","vec3","applyAxisAngle","shouldDisplayBounds","MeshBVHHelper","$20fbd9c0fa600a3a$var$init","WebGLRenderer","antialias","setPixelRatio","setSize","innerWidth","innerHeight","setClearColor","body","Scene","fog","Fog","light","DirectionalLight","AmbientLight","TorusKnotGeometry","MeshPhongMaterial","PerspectiveCamera","updateProjectionMatrix","__esModule","default","gui","GUI","rcFolder","addFolder","step","onChange","open","meshFolder","SAH","AVERAGE","aspect","$20fbd9c0fa600a3a$var$render","currTime","render","requestAnimationFrame"],"version":3,"file":"raycast.2108a7fc.js.map"}