{"mappings":"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","sources":["<anon>","node_modules/stats.js/build/stats.min.js","src/utils/ExtensionUtilities.js","src/utils/GeometryRayIntersectUtilities.js","src/objects/MeshBVHHelper.js","example/shapecast.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4485\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4485\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"c8CJQ\", function(module, exports) {\n// stats.js - http://github.com/mrdoob/stats.js\n(function(f, e) {\n    module.exports = e();\n})(module.exports, function() {\n    var f = function() {\n        function e(a) {\n            c.appendChild(a.dom);\n            return a;\n        }\n        function u(a) {\n            for(var d = 0; d < c.children.length; d++)c.children[d].style.display = d === a ? \"block\" : \"none\";\n            l = a;\n        }\n        var l = 0, c = document.createElement(\"div\");\n        c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n        c.addEventListener(\"click\", function(a) {\n            a.preventDefault();\n            u(++l % c.children.length);\n        }, !1);\n        var k = (performance || Date).now(), g = k, a = 0, r = e(new f.Panel(\"FPS\", \"#0ff\", \"#002\")), h = e(new f.Panel(\"MS\", \"#0f0\", \"#020\"));\n        if (self.performance && self.performance.memory) var t = e(new f.Panel(\"MB\", \"#f08\", \"#201\"));\n        u(0);\n        return {\n            REVISION: 16,\n            dom: c,\n            addPanel: e,\n            showPanel: u,\n            begin: function() {\n                k = (performance || Date).now();\n            },\n            end: function() {\n                a++;\n                var c = (performance || Date).now();\n                h.update(c - k, 200);\n                if (c > g + 1E3 && (r.update(1E3 * a / (c - g), 100), g = c, a = 0, t)) {\n                    var d = performance.memory;\n                    t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                }\n                return c;\n            },\n            update: function() {\n                k = this.end();\n            },\n            domElement: c,\n            setMode: u\n        };\n    };\n    f.Panel = function(e, f, l) {\n        var c = Infinity, k = 0, g = Math.round, a = g(window.devicePixelRatio || 1), r = 80 * a, h = 48 * a, t = 3 * a, v = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n        q.width = r;\n        q.height = h;\n        q.style.cssText = \"width:80px;height:48px\";\n        var b = q.getContext(\"2d\");\n        b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n        b.textBaseline = \"top\";\n        b.fillStyle = l;\n        b.fillRect(0, 0, r, h);\n        b.fillStyle = f;\n        b.fillText(e, t, v);\n        b.fillRect(d, m, n, p);\n        b.fillStyle = l;\n        b.globalAlpha = .9;\n        b.fillRect(d, m, n, p);\n        return {\n            dom: q,\n            update: function(h, w) {\n                c = Math.min(c, h);\n                k = Math.max(k, h);\n                b.fillStyle = l;\n                b.globalAlpha = 1;\n                b.fillRect(0, 0, r, m);\n                b.fillStyle = f;\n                b.fillText(g(h) + \" \" + e + \" (\" + g(c) + \"-\" + g(k) + \")\", t, v);\n                b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                b.fillRect(d + n - a, m, a, p);\n                b.fillStyle = l;\n                b.globalAlpha = .9;\n                b.fillRect(d + n - a, m, a, g((1 - h / w) * p));\n            }\n        };\n    };\n    return f;\n});\n\n});\n\nparcelRegister(\"4h5hN\", function(module, exports) {\n\n$parcel$export(module.exports, \"acceleratedRaycast\", () => $31ccd9a92979d6bb$export$a0dc2935489c814a);\n$parcel$export(module.exports, \"computeBoundsTree\", () => $31ccd9a92979d6bb$export$749bba8a65fa6d70);\n$parcel$export(module.exports, \"disposeBoundsTree\", () => $31ccd9a92979d6bb$export$e0a981a7a32ddba4);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $b4YKL = parcelRequire(\"b4YKL\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $31ccd9a92979d6bb$var$ray = /* @__PURE__ */ new (0, $ilwiq.Ray)();\nconst $31ccd9a92979d6bb$var$tmpInverseMatrix = /* @__PURE__ */ new (0, $ilwiq.Matrix4)();\nconst $31ccd9a92979d6bb$var$origMeshRaycastFunc = (0, $ilwiq.Mesh).prototype.raycast;\nfunction $31ccd9a92979d6bb$export$a0dc2935489c814a(raycaster, intersects) {\n    if (this.geometry.boundsTree) {\n        if (this.material === undefined) return;\n        $31ccd9a92979d6bb$var$tmpInverseMatrix.copy(this.matrixWorld).invert();\n        $31ccd9a92979d6bb$var$ray.copy(raycaster.ray).applyMatrix4($31ccd9a92979d6bb$var$tmpInverseMatrix);\n        const bvh = this.geometry.boundsTree;\n        if (raycaster.firstHitOnly === true) {\n            const hit = (0, $b4YKL.convertRaycastIntersect)(bvh.raycastFirst($31ccd9a92979d6bb$var$ray, this.material), this, raycaster);\n            if (hit) intersects.push(hit);\n        } else {\n            const hits = bvh.raycast($31ccd9a92979d6bb$var$ray, this.material);\n            for(let i = 0, l = hits.length; i < l; i++){\n                const hit = (0, $b4YKL.convertRaycastIntersect)(hits[i], this, raycaster);\n                if (hit) intersects.push(hit);\n            }\n        }\n    } else $31ccd9a92979d6bb$var$origMeshRaycastFunc.call(this, raycaster, intersects);\n}\nfunction $31ccd9a92979d6bb$export$749bba8a65fa6d70(options) {\n    this.boundsTree = new (0, $ff8ed.MeshBVH)(this, options);\n    return this.boundsTree;\n}\nfunction $31ccd9a92979d6bb$export$e0a981a7a32ddba4() {\n    this.boundsTree = null;\n}\n\n});\nparcelRegister(\"b4YKL\", function(module, exports) {\n\n$parcel$export(module.exports, \"convertRaycastIntersect\", () => $810f31c6ff4f494e$export$adb106eed99e8cd8);\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nfunction $810f31c6ff4f494e$export$adb106eed99e8cd8(hit, object, raycaster) {\n    if (hit === null) return null;\n    hit.point.applyMatrix4(object.matrixWorld);\n    hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n    hit.object = object;\n    if (hit.distance < raycaster.near || hit.distance > raycaster.far) return null;\n    else return hit;\n}\n\n});\n\n\nparcelRegister(\"5ca9G\", function(module, exports) {\n\n$parcel$export(module.exports, \"MeshBVHHelper\", () => $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $aw71y = parcelRequire(\"aw71y\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $3c85f35a8c29fa9b$var$boundingBox = /* @__PURE__ */ new (0, $ilwiq.Box3)();\nclass $3c85f35a8c29fa9b$var$MeshBVHRootHelper extends (0, $ilwiq.Object3D) {\n    get isMesh() {\n        return !this.displayEdges;\n    }\n    get isLineSegments() {\n        return this.displayEdges;\n    }\n    get isLine() {\n        return this.displayEdges;\n    }\n    constructor(bvh, material, depth = 10, group = 0){\n        super();\n        this.material = material;\n        this.geometry = new (0, $ilwiq.BufferGeometry)();\n        this.name = \"MeshBVHRootHelper\";\n        this.depth = depth;\n        this.displayParents = false;\n        this.bvh = bvh;\n        this.displayEdges = true;\n        this._group = group;\n    }\n    raycast() {}\n    update() {\n        const geometry = this.geometry;\n        const boundsTree = this.bvh;\n        const group = this._group;\n        geometry.dispose();\n        this.visible = false;\n        if (boundsTree) {\n            // count the number of bounds required\n            const targetDepth = this.depth - 1;\n            const displayParents = this.displayParents;\n            let boundsCount = 0;\n            boundsTree.traverse((depth, isLeaf)=>{\n                if (depth >= targetDepth || isLeaf) {\n                    boundsCount++;\n                    return true;\n                } else if (displayParents) boundsCount++;\n            }, group);\n            // fill in the position buffer with the bounds corners\n            let posIndex = 0;\n            const positionArray = new Float32Array(24 * boundsCount);\n            boundsTree.traverse((depth, isLeaf, boundingData)=>{\n                const terminate = depth >= targetDepth || isLeaf;\n                if (terminate || displayParents) {\n                    (0, $aw71y.arrayToBox)(0, boundingData, $3c85f35a8c29fa9b$var$boundingBox);\n                    const { min: min, max: max } = $3c85f35a8c29fa9b$var$boundingBox;\n                    for(let x = -1; x <= 1; x += 2){\n                        const xVal = x < 0 ? min.x : max.x;\n                        for(let y = -1; y <= 1; y += 2){\n                            const yVal = y < 0 ? min.y : max.y;\n                            for(let z = -1; z <= 1; z += 2){\n                                const zVal = z < 0 ? min.z : max.z;\n                                positionArray[posIndex + 0] = xVal;\n                                positionArray[posIndex + 1] = yVal;\n                                positionArray[posIndex + 2] = zVal;\n                                posIndex += 3;\n                            }\n                        }\n                    }\n                    return terminate;\n                }\n            }, group);\n            let indexArray;\n            let indices;\n            if (this.displayEdges) // fill in the index buffer to point to the corner points\n            indices = new Uint8Array([\n                // x axis\n                0,\n                4,\n                1,\n                5,\n                2,\n                6,\n                3,\n                7,\n                // y axis\n                0,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                7,\n                // z axis\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7\n            ]);\n            else indices = new Uint8Array([\n                // X-, X+\n                0,\n                1,\n                2,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                6,\n                7,\n                5,\n                // Y-, Y+\n                1,\n                4,\n                5,\n                0,\n                4,\n                1,\n                2,\n                3,\n                6,\n                3,\n                7,\n                6,\n                // Z-, Z+\n                0,\n                2,\n                4,\n                2,\n                6,\n                4,\n                1,\n                5,\n                3,\n                3,\n                5,\n                7\n            ]);\n            if (positionArray.length > 65535) indexArray = new Uint32Array(indices.length * boundsCount);\n            else indexArray = new Uint16Array(indices.length * boundsCount);\n            const indexLength = indices.length;\n            for(let i = 0; i < boundsCount; i++){\n                const posOffset = i * 8;\n                const indexOffset = i * indexLength;\n                for(let j = 0; j < indexLength; j++)indexArray[indexOffset + j] = posOffset + indices[j];\n            }\n            // update the geometry\n            geometry.setIndex(new (0, $ilwiq.BufferAttribute)(indexArray, 1, false));\n            geometry.setAttribute(\"position\", new (0, $ilwiq.BufferAttribute)(positionArray, 3, false));\n            this.visible = true;\n        }\n    }\n}\nclass $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 extends (0, $ilwiq.Group) {\n    get color() {\n        return this.edgeMaterial.color;\n    }\n    get opacity() {\n        return this.edgeMaterial.opacity;\n    }\n    set opacity(v) {\n        this.edgeMaterial.opacity = v;\n        this.meshMaterial.opacity = v;\n    }\n    constructor(mesh = null, bvh = null, depth = 10){\n        // handle bvh, depth signature\n        if (mesh instanceof (0, $ff8ed.MeshBVH)) {\n            depth = bvh || 10;\n            bvh = mesh;\n            mesh = null;\n        }\n        // handle mesh, depth signature\n        if (typeof bvh === \"number\") {\n            depth = bvh;\n            bvh = null;\n        }\n        super();\n        this.name = \"MeshBVHHelper\";\n        this.depth = depth;\n        this.mesh = mesh;\n        this.bvh = bvh;\n        this.displayParents = false;\n        this.displayEdges = true;\n        this._roots = [];\n        const edgeMaterial = new (0, $ilwiq.LineBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        const meshMaterial = new (0, $ilwiq.MeshBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        meshMaterial.color = edgeMaterial.color;\n        this.edgeMaterial = edgeMaterial;\n        this.meshMaterial = meshMaterial;\n        this.update();\n    }\n    update() {\n        const bvh = this.bvh || this.mesh.geometry.boundsTree;\n        const totalRoots = bvh ? bvh._roots.length : 0;\n        while(this._roots.length > totalRoots){\n            const root = this._roots.pop();\n            root.geometry.dispose();\n            this.remove(root);\n        }\n        for(let i = 0; i < totalRoots; i++){\n            const { depth: depth, edgeMaterial: edgeMaterial, meshMaterial: meshMaterial, displayParents: displayParents, displayEdges: displayEdges } = this;\n            if (i >= this._roots.length) {\n                const root = new $3c85f35a8c29fa9b$var$MeshBVHRootHelper(bvh, edgeMaterial, depth, i);\n                this.add(root);\n                this._roots.push(root);\n            }\n            const root = this._roots[i];\n            root.bvh = bvh;\n            root.depth = depth;\n            root.displayParents = displayParents;\n            root.displayEdges = displayEdges;\n            root.material = displayEdges ? edgeMaterial : meshMaterial;\n            root.update();\n        }\n    }\n    updateMatrixWorld(...args) {\n        const mesh = this.mesh;\n        const parent = this.parent;\n        if (mesh !== null) {\n            mesh.updateWorldMatrix(true, false);\n            if (parent) this.matrix.copy(parent.matrixWorld).invert().multiply(mesh.matrixWorld);\n            else this.matrix.copy(mesh.matrixWorld);\n            this.matrix.decompose(this.position, this.quaternion, this.scale);\n        }\n        super.updateMatrixWorld(...args);\n    }\n    copy(source) {\n        this.depth = source.depth;\n        this.mesh = source.mesh;\n        this.bvh = source.bvh;\n        this.opacity = source.opacity;\n        this.color.copy(source.color);\n    }\n    clone() {\n        return new $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5(this.mesh, this.bvh, this.depth);\n    }\n    dispose() {\n        this.edgeMaterial.dispose();\n        this.meshMaterial.dispose();\n        const children = this.children;\n        for(let i = 0, l = children.length; i < l; i++)children[i].geometry.dispose();\n    }\n}\nclass $3c85f35a8c29fa9b$export$5ead38ed5c75a1c8 extends $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 {\n    constructor(...args){\n        super(...args);\n        console.warn(\"MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.\");\n    }\n}\n\n});\n\n\nvar $c8CJQ = parcelRequire(\"c8CJQ\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n\nvar $fUhpq = parcelRequire(\"fUhpq\");\n\nvar $4h5hN = parcelRequire(\"4h5hN\");\nvar $5ca9G = parcelRequire(\"5ca9G\");\n$ilwiq.Mesh.prototype.raycast = (0, $4h5hN.acceleratedRaycast);\n$ilwiq.BufferGeometry.prototype.computeBoundsTree = (0, $4h5hN.computeBoundsTree);\n$ilwiq.BufferGeometry.prototype.disposeBoundsTree = (0, $4h5hN.disposeBoundsTree);\nconst $d3bbca0489b071b6$var$params = {\n    speed: 1,\n    visualizeBounds: false,\n    visualBoundsDepth: 10,\n    shape: \"sphere\",\n    position: new $ilwiq.Vector3(),\n    rotation: new $ilwiq.Euler(),\n    scale: new $ilwiq.Vector3(1, 1, 1)\n};\nlet $d3bbca0489b071b6$var$stats;\nlet $d3bbca0489b071b6$var$scene, $d3bbca0489b071b6$var$camera, $d3bbca0489b071b6$var$renderer, $d3bbca0489b071b6$var$orbitControls, $d3bbca0489b071b6$var$boundsViz, $d3bbca0489b071b6$var$transformControls;\nlet $d3bbca0489b071b6$var$targetMesh;\nlet $d3bbca0489b071b6$var$shapes = {};\nfunction $d3bbca0489b071b6$var$init() {\n    const bgColor = 1251612;\n    // renderer setup\n    $d3bbca0489b071b6$var$renderer = new $ilwiq.WebGLRenderer({\n        antialias: true\n    });\n    $d3bbca0489b071b6$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $d3bbca0489b071b6$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $d3bbca0489b071b6$var$renderer.setClearColor(bgColor, 1);\n    document.body.appendChild($d3bbca0489b071b6$var$renderer.domElement);\n    // scene setup\n    $d3bbca0489b071b6$var$scene = new $ilwiq.Scene();\n    $d3bbca0489b071b6$var$scene.fog = new $ilwiq.Fog(1251612, 20, 60);\n    const light = new $ilwiq.DirectionalLight(0xffffff, 0.5);\n    light.position.set(1, 1, 1);\n    $d3bbca0489b071b6$var$scene.add(light);\n    $d3bbca0489b071b6$var$scene.add(new $ilwiq.AmbientLight(0xffffff, 0.4));\n    // geometry setup\n    const radius = 1;\n    const tube = 0.4;\n    const tubularSegments = 400;\n    const radialSegments = 100;\n    const knotGeometry = new $ilwiq.TorusKnotGeometry(radius, tube, tubularSegments, radialSegments);\n    const material = new $ilwiq.MeshPhongMaterial({\n        color: 0xffffff,\n        side: $ilwiq.DoubleSide\n    });\n    $d3bbca0489b071b6$var$targetMesh = new $ilwiq.Mesh(knotGeometry, material);\n    $d3bbca0489b071b6$var$targetMesh.geometry.computeBoundsTree();\n    $d3bbca0489b071b6$var$scene.add($d3bbca0489b071b6$var$targetMesh);\n    // camera setup\n    $d3bbca0489b071b6$var$camera = new $ilwiq.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);\n    $d3bbca0489b071b6$var$camera.position.set(3, 3, 3);\n    $d3bbca0489b071b6$var$camera.far = 100;\n    $d3bbca0489b071b6$var$camera.updateProjectionMatrix();\n    $d3bbca0489b071b6$var$transformControls = new (0, $fUhpq.TransformControls)($d3bbca0489b071b6$var$camera, $d3bbca0489b071b6$var$renderer.domElement);\n    $d3bbca0489b071b6$var$scene.add($d3bbca0489b071b6$var$transformControls);\n    $d3bbca0489b071b6$var$orbitControls = new (0, $5Rd1x.OrbitControls)($d3bbca0489b071b6$var$camera, $d3bbca0489b071b6$var$renderer.domElement);\n    // stats setup\n    $d3bbca0489b071b6$var$stats = new (0, (/*@__PURE__*/$parcel$interopDefault($c8CJQ)))();\n    document.body.appendChild($d3bbca0489b071b6$var$stats.dom);\n    const shapeMaterial = new $ilwiq.MeshStandardMaterial({\n        metalness: 0.1,\n        transparent: true,\n        opacity: 0.75,\n        premultipliedAlpha: true\n    });\n    $d3bbca0489b071b6$var$shapes.sphere = new $ilwiq.Mesh(new $ilwiq.SphereGeometry(1, 50, 50), shapeMaterial);\n    $d3bbca0489b071b6$var$scene.add($d3bbca0489b071b6$var$shapes.sphere);\n    $d3bbca0489b071b6$var$shapes.box = new $ilwiq.Mesh(new $ilwiq.BoxGeometry(1, 1, 1), shapeMaterial);\n    $d3bbca0489b071b6$var$scene.add($d3bbca0489b071b6$var$shapes.box);\n    $d3bbca0489b071b6$var$shapes.geometry = new $ilwiq.Mesh(new $ilwiq.TorusKnotGeometry(.5, .2, 200, 50), shapeMaterial);\n    $d3bbca0489b071b6$var$shapes.geometry.geometry.computeBoundsTree();\n    $d3bbca0489b071b6$var$scene.add($d3bbca0489b071b6$var$shapes.geometry);\n    // Code for debugging triangle intersection\n    // const t1 = new THREE.Triangle();\n    // const t2 = new THREE.Triangle();\n    // t1.a.set( - 1, - 1, 0 );\n    // t1.b.set( 1, - 1, 0 );\n    // t1.c.set( 0, 1, 0 );\n    // t2.a.set( - 1, 0, - 0.5 );\n    // t2.b.set( 0, 0, 1 );\n    // t2.c.set( - 2, 0, 1 );\n    // const res = triangleIntersectsTriangle( t1, t2 );\n    // console.log( 'intersects ', res );\n    // var lineMat = new THREE.LineBasicMaterial({ color: 0x0000ff });\n    // var geometry = new THREE.Geometry();\n    // geometry.vertices.push( t1.a, t1.b, t1.c, t1.a );\n    // var line = new THREE.Line( geometry, lineMat );\n    // scene.add( line );\n    // var geometry = new THREE.Geometry();\n    // geometry.vertices.push( t2.a, t2.b, t2.c, t2.a );\n    // var line = new THREE.Line( geometry, lineMat );\n    // scene.add( line );\n    // \ttargetMesh.visible = false;\n    const gui = new $jiuw3.GUI();\n    gui.add($d3bbca0489b071b6$var$params, \"speed\").min(0).max(10);\n    gui.add($d3bbca0489b071b6$var$params, \"visualizeBounds\").onChange(()=>$d3bbca0489b071b6$var$updateFromOptions());\n    gui.add($d3bbca0489b071b6$var$params, \"visualBoundsDepth\").min(1).max(40).step(1).onChange(()=>$d3bbca0489b071b6$var$updateFromOptions());\n    gui.add($d3bbca0489b071b6$var$params, \"shape\", [\n        \"sphere\",\n        \"box\",\n        \"geometry\"\n    ]);\n    gui.add($d3bbca0489b071b6$var$transformControls, \"mode\", [\n        \"translate\",\n        \"rotate\"\n    ]);\n    const posFolder = gui.addFolder(\"position\");\n    posFolder.add($d3bbca0489b071b6$var$params.position, \"x\").min(-5).max(5).step(0.001);\n    posFolder.add($d3bbca0489b071b6$var$params.position, \"y\").min(-5).max(5).step(0.001);\n    posFolder.add($d3bbca0489b071b6$var$params.position, \"z\").min(-5).max(5).step(0.001);\n    posFolder.open();\n    const rotFolder = gui.addFolder(\"rotation\");\n    rotFolder.add($d3bbca0489b071b6$var$params.rotation, \"x\").min(-Math.PI).max(Math.PI).step(0.001);\n    rotFolder.add($d3bbca0489b071b6$var$params.rotation, \"y\").min(-Math.PI).max(Math.PI).step(0.001);\n    rotFolder.add($d3bbca0489b071b6$var$params.rotation, \"z\").min(-Math.PI).max(Math.PI).step(0.001);\n    rotFolder.open();\n    gui.open();\n    $d3bbca0489b071b6$var$transformControls.addEventListener(\"change\", function() {\n        $d3bbca0489b071b6$var$params.position.copy($d3bbca0489b071b6$var$shapes[$d3bbca0489b071b6$var$params.shape].position);\n        $d3bbca0489b071b6$var$params.rotation.copy($d3bbca0489b071b6$var$shapes[$d3bbca0489b071b6$var$params.shape].rotation);\n        $d3bbca0489b071b6$var$params.scale.copy($d3bbca0489b071b6$var$shapes[$d3bbca0489b071b6$var$params.shape].scale);\n        gui.controllersRecursive().forEach((c)=>c.updateDisplay());\n    });\n    $d3bbca0489b071b6$var$transformControls.addEventListener(\"mouseDown\", function() {\n        $d3bbca0489b071b6$var$orbitControls.enabled = false;\n    });\n    $d3bbca0489b071b6$var$transformControls.addEventListener(\"mouseUp\", function() {\n        $d3bbca0489b071b6$var$orbitControls.enabled = true;\n    });\n    $d3bbca0489b071b6$var$orbitControls.addEventListener(\"start\", function() {\n        $d3bbca0489b071b6$var$transformControls.enabled = false;\n    });\n    $d3bbca0489b071b6$var$orbitControls.addEventListener(\"end\", function() {\n        $d3bbca0489b071b6$var$transformControls.enabled = true;\n    });\n    window.addEventListener(\"resize\", function() {\n        $d3bbca0489b071b6$var$camera.aspect = window.innerWidth / window.innerHeight;\n        $d3bbca0489b071b6$var$camera.updateProjectionMatrix();\n        $d3bbca0489b071b6$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    }, false);\n    window.addEventListener(\"keydown\", function(e) {\n        switch(e.key){\n            case \"w\":\n                $d3bbca0489b071b6$var$transformControls.mode = \"translate\";\n                break;\n            case \"e\":\n                $d3bbca0489b071b6$var$transformControls.mode = \"rotate\";\n                break;\n        }\n        gui.controllersRecursive().forEach((c)=>c.updateDisplay());\n    });\n}\nfunction $d3bbca0489b071b6$var$updateFromOptions() {\n    // Update bounds viz\n    if ($d3bbca0489b071b6$var$boundsViz && !$d3bbca0489b071b6$var$params.visualizeBounds) {\n        $d3bbca0489b071b6$var$scene.remove($d3bbca0489b071b6$var$boundsViz);\n        $d3bbca0489b071b6$var$boundsViz = null;\n    }\n    if (!$d3bbca0489b071b6$var$boundsViz && $d3bbca0489b071b6$var$params.visualizeBounds) {\n        $d3bbca0489b071b6$var$boundsViz = new (0, $5ca9G.MeshBVHHelper)($d3bbca0489b071b6$var$targetMesh);\n        $d3bbca0489b071b6$var$scene.add($d3bbca0489b071b6$var$boundsViz);\n    }\n    if ($d3bbca0489b071b6$var$boundsViz) $d3bbca0489b071b6$var$boundsViz.depth = $d3bbca0489b071b6$var$params.visualBoundsDepth;\n}\nlet $d3bbca0489b071b6$var$lastTime = window.performance.now();\nfunction $d3bbca0489b071b6$var$render() {\n    const delta = window.performance.now() - $d3bbca0489b071b6$var$lastTime;\n    $d3bbca0489b071b6$var$lastTime = window.performance.now();\n    $d3bbca0489b071b6$var$targetMesh.rotation.y += $d3bbca0489b071b6$var$params.speed * delta * 0.001;\n    $d3bbca0489b071b6$var$targetMesh.updateMatrixWorld();\n    $d3bbca0489b071b6$var$stats.begin();\n    if ($d3bbca0489b071b6$var$boundsViz) $d3bbca0489b071b6$var$boundsViz.update();\n    $d3bbca0489b071b6$var$renderer.render($d3bbca0489b071b6$var$scene, $d3bbca0489b071b6$var$camera);\n    $d3bbca0489b071b6$var$stats.end();\n    // casts\n    for(const shape in $d3bbca0489b071b6$var$shapes)$d3bbca0489b071b6$var$shapes[shape].visible = false;\n    const s = $d3bbca0489b071b6$var$params.shape;\n    const shape = $d3bbca0489b071b6$var$shapes[s];\n    shape.visible = true;\n    shape.position.copy($d3bbca0489b071b6$var$params.position);\n    shape.rotation.copy($d3bbca0489b071b6$var$params.rotation);\n    shape.scale.copy($d3bbca0489b071b6$var$params.scale);\n    const transformMatrix = new $ilwiq.Matrix4().copy($d3bbca0489b071b6$var$targetMesh.matrixWorld).invert().multiply(shape.matrixWorld);\n    if (s === \"sphere\") {\n        const sphere = new $ilwiq.Sphere(undefined, 1);\n        sphere.applyMatrix4(transformMatrix);\n        const hit = $d3bbca0489b071b6$var$targetMesh.geometry.boundsTree.intersectsSphere(sphere);\n        shape.material.color.set(hit ? 0xE91E63 : 0x666666);\n        shape.material.emissive.set(0xE91E63).multiplyScalar(hit ? 0.25 : 0);\n    } else if (s === \"box\") {\n        const box = new $ilwiq.Box3();\n        box.min.set(-0.5, -0.5, -0.5);\n        box.max.set(0.5, 0.5, 0.5);\n        const hit = $d3bbca0489b071b6$var$targetMesh.geometry.boundsTree.intersectsBox(box, transformMatrix);\n        shape.material.color.set(hit ? 0xE91E63 : 0x666666);\n        shape.material.emissive.set(0xE91E63).multiplyScalar(hit ? 0.25 : 0);\n    } else if (s === \"geometry\") {\n        const hit = $d3bbca0489b071b6$var$targetMesh.geometry.boundsTree.intersectsGeometry(shape.geometry, transformMatrix);\n        shape.material.color.set(hit ? 0xE91E63 : 0x666666);\n        shape.material.emissive.set(0xE91E63).multiplyScalar(hit ? 0.25 : 0);\n    }\n    if ($d3bbca0489b071b6$var$transformControls.object !== shape) $d3bbca0489b071b6$var$transformControls.attach(shape);\n    requestAnimationFrame($d3bbca0489b071b6$var$render);\n}\n$d3bbca0489b071b6$var$init();\n$d3bbca0489b071b6$var$updateFromOptions();\n$d3bbca0489b071b6$var$render();\n\n\n//# sourceMappingURL=shapecast.9bb13e8b.js.map\n","// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import { Ray, Matrix4, Mesh } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst ray = /* @__PURE__ */ new Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n","// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\treturn null;\n\n\t} else {\n\n\t\treturn hit;\n\n\t}\n\n}\n","import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nclass MeshBVHRootHelper extends Object3D {\n\n\tget isMesh() {\n\n\t\treturn ! this.displayEdges;\n\n\t}\n\n\tget isLineSegments() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tget isLine() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tconstructor( bvh, material, depth = 10, group = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.material = material;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.name = 'MeshBVHRootHelper';\n\t\tthis.depth = depth;\n\t\tthis.displayParents = false;\n\t\tthis.bvh = bvh;\n\t\tthis.displayEdges = true;\n\t\tthis._group = group;\n\n\t}\n\n\traycast() {}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst boundsTree = this.bvh;\n\t\tconst group = this._group;\n\t\tgeometry.dispose();\n\t\tthis.visible = false;\n\t\tif ( boundsTree ) {\n\n\t\t\t// count the number of bounds required\n\t\t\tconst targetDepth = this.depth - 1;\n\t\t\tconst displayParents = this.displayParents;\n\t\t\tlet boundsCount = 0;\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\tif ( depth >= targetDepth || isLeaf ) {\n\n\t\t\t\t\tboundsCount ++;\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\t// fill in the position buffer with the bounds corners\n\t\t\tlet posIndex = 0;\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\tconst terminate = depth >= targetDepth || isLeaf;\n\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn terminate;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\tlet indexArray;\n\t\t\tlet indices;\n\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t// x axis\n\t\t\t\t\t0, 4,\n\t\t\t\t\t1, 5,\n\t\t\t\t\t2, 6,\n\t\t\t\t\t3, 7,\n\n\t\t\t\t\t// y axis\n\t\t\t\t\t0, 2,\n\t\t\t\t\t1, 3,\n\t\t\t\t\t4, 6,\n\t\t\t\t\t5, 7,\n\n\t\t\t\t\t// z axis\n\t\t\t\t\t0, 1,\n\t\t\t\t\t2, 3,\n\t\t\t\t\t4, 5,\n\t\t\t\t\t6, 7,\n\t\t\t\t] );\n\n\t\t\t} else {\n\n\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t// X-, X+\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t} else {\n\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t}\n\n\t\t\tconst indexLength = indices.length;\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\tconst posOffset = i * 8;\n\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the geometry\n\t\t\tgeometry.setIndex(\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\n\t\t\t);\n\t\t\tgeometry.setAttribute(\n\t\t\t\t'position',\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\n\t\t\t);\n\t\t\tthis.visible = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass MeshBVHHelper extends Group {\n\n\tget color() {\n\n\t\treturn this.edgeMaterial.color;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.edgeMaterial.opacity;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tthis.edgeMaterial.opacity = v;\n\t\tthis.meshMaterial.opacity = v;\n\n\t}\n\n\tconstructor( mesh = null, bvh = null, depth = 10 ) {\n\n\t\t// handle bvh, depth signature\n\t\tif ( mesh instanceof MeshBVH ) {\n\n\t\t\tdepth = bvh || 10;\n\t\t\tbvh = mesh;\n\t\t\tmesh = null;\n\n\t\t}\n\n\t\t// handle mesh, depth signature\n\t\tif ( typeof bvh === 'number' ) {\n\n\t\t\tdepth = bvh;\n\t\t\tbvh = null;\n\n\t\t}\n\n\t\tsuper();\n\n\t\tthis.name = 'MeshBVHHelper';\n\t\tthis.depth = depth;\n\t\tthis.mesh = mesh;\n\t\tthis.bvh = bvh;\n\t\tthis.displayParents = false;\n\t\tthis.displayEdges = true;\n\t\tthis._roots = [];\n\n\t\tconst edgeMaterial = new LineBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tconst meshMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\tthis.edgeMaterial = edgeMaterial;\n\t\tthis.meshMaterial = meshMaterial;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst bvh = this.bvh || this.mesh.geometry.boundsTree;\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\tconst root = this._roots.pop();\n\t\t\troot.geometry.dispose();\n\t\t\tthis.remove( root );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\tconst { depth, edgeMaterial, meshMaterial, displayParents, displayEdges } = this;\n\n\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\tconst root = new MeshBVHRootHelper( bvh, edgeMaterial, depth, i );\n\t\t\t\tthis.add( root );\n\t\t\t\tthis._roots.push( root );\n\n\t\t\t}\n\n\t\t\tconst root = this._roots[ i ];\n\t\t\troot.bvh = bvh;\n\t\t\troot.depth = depth;\n\t\t\troot.displayParents = displayParents;\n\t\t\troot.displayEdges = displayEdges;\n\t\t\troot.material = displayEdges ? edgeMaterial : meshMaterial;\n\t\t\troot.update();\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( ...args ) {\n\n\t\tconst mesh = this.mesh;\n\t\tconst parent = this.parent;\n\n\t\tif ( mesh !== null ) {\n\n\t\t\tmesh.updateWorldMatrix( true, false );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( parent.matrixWorld )\n\t\t\t\t\t.invert()\n\t\t\t\t\t.multiply( mesh.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( mesh.matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.matrix.decompose(\n\t\t\t\tthis.position,\n\t\t\t\tthis.quaternion,\n\t\t\t\tthis.scale,\n\t\t\t);\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( ...args );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.depth = source.depth;\n\t\tthis.mesh = source.mesh;\n\t\tthis.bvh = source.bvh;\n\t\tthis.opacity = source.opacity;\n\t\tthis.color.copy( source.color );\n\n\t}\n\n\tclone() {\n\n\t\treturn new MeshBVHHelper( this.mesh, this.bvh, this.depth );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.edgeMaterial.dispose();\n\t\tthis.meshMaterial.dispose();\n\n\t\tconst children = this.children;\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport class MeshBVHVisualizer extends MeshBVHHelper {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconsole.warn( 'MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.' );\n\n\t}\n\n}\n\nexport { MeshBVHHelper };\n","import Stats from 'stats.js';\nimport * as dat from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls.js';\nimport { acceleratedRaycast, computeBoundsTree, disposeBoundsTree, MeshBVHHelper } from '..';\n\nTHREE.Mesh.prototype.raycast = acceleratedRaycast;\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\nTHREE.BufferGeometry.prototype.disposeBoundsTree = disposeBoundsTree;\n\nconst params = {\n\n\tspeed: 1,\n\tvisualizeBounds: false,\n\tvisualBoundsDepth: 10,\n\tshape: 'sphere',\n\tposition: new THREE.Vector3(),\n\trotation: new THREE.Euler(),\n\tscale: new THREE.Vector3( 1, 1, 1 ),\n};\n\nlet stats;\nlet scene, camera, renderer, orbitControls, boundsViz, transformControls;\nlet targetMesh;\nlet shapes = {};\n\nfunction init() {\n\n\tconst bgColor = 0x263238 / 2;\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\tscene.fog = new THREE.Fog( 0x263238 / 2, 20, 60 );\n\n\tconst light = new THREE.DirectionalLight( 0xffffff, 0.5 );\n\tlight.position.set( 1, 1, 1 );\n\tscene.add( light );\n\tscene.add( new THREE.AmbientLight( 0xffffff, 0.4 ) );\n\n\t// geometry setup\n\tconst radius = 1;\n\tconst tube = 0.4;\n\tconst tubularSegments = 400;\n\tconst radialSegments = 100;\n\n\tconst knotGeometry = new THREE.TorusKnotGeometry( radius, tube, tubularSegments, radialSegments );\n\tconst material = new THREE.MeshPhongMaterial( { color: 0xffffff, side: THREE.DoubleSide } );\n\ttargetMesh = new THREE.Mesh( knotGeometry, material );\n\ttargetMesh.geometry.computeBoundsTree();\n\tscene.add( targetMesh );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 3, 3, 3 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\ttransformControls = new TransformControls( camera, renderer.domElement );\n\tscene.add( transformControls );\n\n\torbitControls = new OrbitControls( camera, renderer.domElement );\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\tconst shapeMaterial = new THREE.MeshStandardMaterial( {\n\t\tmetalness: 0.1,\n\t\ttransparent: true,\n\t\topacity: 0.75,\n\t\tpremultipliedAlpha: true\n\t} );\n\tshapes.sphere = new THREE.Mesh( new THREE.SphereGeometry( 1, 50, 50 ), shapeMaterial );\n\tscene.add( shapes.sphere );\n\n\tshapes.box = new THREE.Mesh( new THREE.BoxGeometry( 1, 1, 1 ), shapeMaterial );\n\tscene.add( shapes.box );\n\n\tshapes.geometry = new THREE.Mesh( new THREE.TorusKnotGeometry( .5, .2, 200, 50 ), shapeMaterial );\n\tshapes.geometry.geometry.computeBoundsTree();\n\tscene.add( shapes.geometry );\n\n\t// Code for debugging triangle intersection\n\t// const t1 = new THREE.Triangle();\n\t// const t2 = new THREE.Triangle();\n\n\t// t1.a.set( - 1, - 1, 0 );\n\t// t1.b.set( 1, - 1, 0 );\n\t// t1.c.set( 0, 1, 0 );\n\n\t// t2.a.set( - 1, 0, - 0.5 );\n\t// t2.b.set( 0, 0, 1 );\n\t// t2.c.set( - 2, 0, 1 );\n\n\t// const res = triangleIntersectsTriangle( t1, t2 );\n\t// console.log( 'intersects ', res );\n\n\t// var lineMat = new THREE.LineBasicMaterial({ color: 0x0000ff });\n\n\t// var geometry = new THREE.Geometry();\n\t// geometry.vertices.push( t1.a, t1.b, t1.c, t1.a );\n\t// var line = new THREE.Line( geometry, lineMat );\n\t// scene.add( line );\n\n\t// var geometry = new THREE.Geometry();\n\t// geometry.vertices.push( t2.a, t2.b, t2.c, t2.a );\n\t// var line = new THREE.Line( geometry, lineMat );\n\t// scene.add( line );\n\n\t// \ttargetMesh.visible = false;\n\n\tconst gui = new dat.GUI();\n\tgui.add( params, 'speed' ).min( 0 ).max( 10 );\n\tgui.add( params, 'visualizeBounds' ).onChange( () => updateFromOptions() );\n\tgui.add( params, 'visualBoundsDepth' ).min( 1 ).max( 40 ).step( 1 ).onChange( () => updateFromOptions() );\n\tgui.add( params, 'shape', [ 'sphere', 'box', 'geometry' ] );\n\n\tgui.add( transformControls, 'mode', [ 'translate', 'rotate' ] );\n\n\tconst posFolder = gui.addFolder( 'position' );\n\tposFolder.add( params.position, 'x' ).min( - 5 ).max( 5 ).step( 0.001 );\n\tposFolder.add( params.position, 'y' ).min( - 5 ).max( 5 ).step( 0.001 );\n\tposFolder.add( params.position, 'z' ).min( - 5 ).max( 5 ).step( 0.001 );\n\tposFolder.open();\n\n\tconst rotFolder = gui.addFolder( 'rotation' );\n\trotFolder.add( params.rotation, 'x' ).min( - Math.PI ).max( Math.PI ).step( 0.001 );\n\trotFolder.add( params.rotation, 'y' ).min( - Math.PI ).max( Math.PI ).step( 0.001 );\n\trotFolder.add( params.rotation, 'z' ).min( - Math.PI ).max( Math.PI ).step( 0.001 );\n\trotFolder.open();\n\n\tgui.open();\n\n\ttransformControls.addEventListener( 'change', function () {\n\n\t\tparams.position.copy( shapes[ params.shape ].position );\n\t\tparams.rotation.copy( shapes[ params.shape ].rotation );\n\t\tparams.scale.copy( shapes[ params.shape ].scale );\n\t\tgui.controllersRecursive().forEach( c => c.updateDisplay() );\n\n\t} );\n\n\ttransformControls.addEventListener( 'mouseDown', function () {\n\n\t\torbitControls.enabled = false;\n\n\t} );\n\n\ttransformControls.addEventListener( 'mouseUp', function () {\n\n\t\torbitControls.enabled = true;\n\n\t} );\n\n\torbitControls.addEventListener( 'start', function () {\n\n\t\ttransformControls.enabled = false;\n\n\t} );\n\n\torbitControls.addEventListener( 'end', function () {\n\n\t\ttransformControls.enabled = true;\n\n\t} );\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n\twindow.addEventListener( 'keydown', function ( e ) {\n\n\t\tswitch ( e.key ) {\n\n\t\t\tcase 'w':\n\t\t\t\ttransformControls.mode = 'translate';\n\t\t\t\tbreak;\n\t\t\tcase 'e':\n\t\t\t\ttransformControls.mode = 'rotate';\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tgui.controllersRecursive().forEach( c => c.updateDisplay() );\n\n\t} );\n\n}\n\nfunction updateFromOptions() {\n\n\t// Update bounds viz\n\tif ( boundsViz && ! params.visualizeBounds ) {\n\n\t\tscene.remove( boundsViz );\n\t\tboundsViz = null;\n\n\t}\n\n\tif ( ! boundsViz && params.visualizeBounds ) {\n\n\t\tboundsViz = new MeshBVHHelper( targetMesh );\n\t\tscene.add( boundsViz );\n\n\t}\n\n\tif ( boundsViz ) {\n\n\t\tboundsViz.depth = params.visualBoundsDepth;\n\n\t}\n\n}\n\nlet lastTime = window.performance.now();\nfunction render() {\n\n\tconst delta = window.performance.now() - lastTime;\n\tlastTime = window.performance.now();\n\n\ttargetMesh.rotation.y += params.speed * delta * 0.001;\n\ttargetMesh.updateMatrixWorld();\n\n\tstats.begin();\n\n\tif ( boundsViz ) boundsViz.update();\n\n\trenderer.render( scene, camera );\n\tstats.end();\n\n\t// casts\n\tfor ( const shape in shapes ) shapes[ shape ].visible = false;\n\n\tconst s = params.shape;\n\tconst shape = shapes[ s ];\n\tshape.visible = true;\n\tshape.position.copy( params.position );\n\tshape.rotation.copy( params.rotation );\n\tshape.scale.copy( params.scale );\n\n\tconst transformMatrix =\n\t\tnew THREE.Matrix4()\n\t\t    .copy( targetMesh.matrixWorld ).invert()\n\t\t\t.multiply( shape.matrixWorld );\n\n\tif ( s === 'sphere' ) {\n\n\t\tconst sphere = new THREE.Sphere( undefined, 1 );\n\t\tsphere.applyMatrix4( transformMatrix );\n\n\t\tconst hit = targetMesh.geometry.boundsTree.intersectsSphere( sphere );\n\t\tshape.material.color.set( hit ? 0xE91E63 : 0x666666 );\n\t\tshape.material.emissive.set( 0xE91E63 ).multiplyScalar( hit ? 0.25 : 0 );\n\n\t} else if ( s === 'box' ) {\n\n\t\tconst box = new THREE.Box3();\n\t\tbox.min.set( - 0.5, - 0.5, - 0.5 );\n\t\tbox.max.set( 0.5, 0.5, 0.5 );\n\n\t\tconst hit = targetMesh.geometry.boundsTree.intersectsBox( box, transformMatrix );\n\t\tshape.material.color.set( hit ? 0xE91E63 : 0x666666 );\n\t\tshape.material.emissive.set( 0xE91E63 ).multiplyScalar( hit ? 0.25 : 0 );\n\n\t} else if ( s === 'geometry' ) {\n\n\t\tconst hit = targetMesh.geometry.boundsTree.intersectsGeometry( shape.geometry, transformMatrix );\n\t\tshape.material.color.set( hit ? 0xE91E63 : 0x666666 );\n\t\tshape.material.emissive.set( 0xE91E63 ).multiplyScalar( hit ? 0.25 : 0 );\n\n\t}\n\n\tif ( transformControls.object !== shape ) {\n\n\t\ttransformControls.attach( shape );\n\n\t}\n\n\trequestAnimationFrame( render );\n\n}\n\n\ninit();\nupdateFromOptions();\nrender();\n"],"names":["$d3bbca0489b071b6$var$stats","$d3bbca0489b071b6$var$scene","$d3bbca0489b071b6$var$camera","$d3bbca0489b071b6$var$renderer","$d3bbca0489b071b6$var$orbitControls","$d3bbca0489b071b6$var$boundsViz","$d3bbca0489b071b6$var$transformControls","$d3bbca0489b071b6$var$targetMesh","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","f","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","m","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","$31ccd9a92979d6bb$export$a0dc2935489c814a","$31ccd9a92979d6bb$export$749bba8a65fa6d70","$31ccd9a92979d6bb$export$e0a981a7a32ddba4","$ilwiq","$b4YKL","$ff8ed","$31ccd9a92979d6bb$var$ray","Ray","$31ccd9a92979d6bb$var$tmpInverseMatrix","Matrix4","$31ccd9a92979d6bb$var$origMeshRaycastFunc","Mesh","prototype","raycast","raycaster","intersects","geometry","boundsTree","undefined","material","copy","matrixWorld","invert","ray","applyMatrix4","bvh","firstHitOnly","hit","convertRaycastIntersect","raycastFirst","push","hits","i","options","MeshBVH","$810f31c6ff4f494e$export$adb106eed99e8cd8","object","point","distance","distanceTo","origin","near","far","$3c85f35a8c29fa9b$export$e57d74bcb7e3bec5","$aw71y","$3c85f35a8c29fa9b$var$boundingBox","Box3","$3c85f35a8c29fa9b$var$MeshBVHRootHelper","Object3D","isMesh","displayEdges","isLineSegments","isLine","constructor","depth","group","BufferGeometry","name","displayParents","_group","dispose","visible","indexArray","indices","targetDepth","boundsCount","traverse","isLeaf","posIndex","positionArray","Float32Array","boundingData","terminate","arrayToBox","x","xVal","y","yVal","z","zVal","Uint8Array","Uint32Array","Uint16Array","indexLength","posOffset","indexOffset","j","setIndex","BufferAttribute","setAttribute","Group","color","edgeMaterial","opacity","meshMaterial","mesh","_roots","LineBasicMaterial","transparent","depthWrite","MeshBasicMaterial","totalRoots","root","pop","remove","add","updateMatrixWorld","args","parent","updateWorldMatrix","matrix","multiply","decompose","position","quaternion","scale","source","clone","$c8CJQ","$jiuw3","$5Rd1x","$fUhpq","$4h5hN","$5ca9G","acceleratedRaycast","computeBoundsTree","disposeBoundsTree","$d3bbca0489b071b6$var$params","speed","visualizeBounds","visualBoundsDepth","shape","Vector3","rotation","Euler","$d3bbca0489b071b6$var$shapes","$d3bbca0489b071b6$var$updateFromOptions","MeshBVHHelper","$d3bbca0489b071b6$var$lastTime","$d3bbca0489b071b6$var$init","WebGLRenderer","antialias","setPixelRatio","setSize","innerWidth","innerHeight","setClearColor","body","Scene","fog","Fog","light","DirectionalLight","AmbientLight","knotGeometry","TorusKnotGeometry","MeshPhongMaterial","side","DoubleSide","PerspectiveCamera","updateProjectionMatrix","TransformControls","OrbitControls","__esModule","default","shapeMaterial","MeshStandardMaterial","metalness","premultipliedAlpha","sphere","SphereGeometry","box","BoxGeometry","gui","GUI","onChange","step","posFolder","addFolder","open","rotFolder","PI","controllersRecursive","forEach","updateDisplay","enabled","aspect","key","mode","$d3bbca0489b071b6$var$render","delta","render","transformMatrix","Sphere","intersectsSphere","emissive","multiplyScalar","intersectsBox","intersectsGeometry","attach","requestAnimationFrame"],"version":3,"file":"shapecast.9bb13e8b.js.map"}