{"mappings":"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","sources":["<anon>","node_modules/stats.js/build/stats.min.js","src/utils/ExtensionUtilities.js","src/utils/GeometryRayIntersectUtilities.js","src/debug/Debug.js","src/objects/MeshBVHHelper.js","example/skinnedMesh.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire4485\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire4485\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"c8CJQ\", function(module, exports) {\n// stats.js - http://github.com/mrdoob/stats.js\n(function(f, e) {\n    module.exports = e();\n})(module.exports, function() {\n    var f = function() {\n        function e(a) {\n            c.appendChild(a.dom);\n            return a;\n        }\n        function u(a) {\n            for(var d = 0; d < c.children.length; d++)c.children[d].style.display = d === a ? \"block\" : \"none\";\n            l = a;\n        }\n        var l = 0, c = document.createElement(\"div\");\n        c.style.cssText = \"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";\n        c.addEventListener(\"click\", function(a) {\n            a.preventDefault();\n            u(++l % c.children.length);\n        }, !1);\n        var k = (performance || Date).now(), g = k, a = 0, r = e(new f.Panel(\"FPS\", \"#0ff\", \"#002\")), h = e(new f.Panel(\"MS\", \"#0f0\", \"#020\"));\n        if (self.performance && self.performance.memory) var t = e(new f.Panel(\"MB\", \"#f08\", \"#201\"));\n        u(0);\n        return {\n            REVISION: 16,\n            dom: c,\n            addPanel: e,\n            showPanel: u,\n            begin: function() {\n                k = (performance || Date).now();\n            },\n            end: function() {\n                a++;\n                var c = (performance || Date).now();\n                h.update(c - k, 200);\n                if (c > g + 1E3 && (r.update(1E3 * a / (c - g), 100), g = c, a = 0, t)) {\n                    var d = performance.memory;\n                    t.update(d.usedJSHeapSize / 1048576, d.jsHeapSizeLimit / 1048576);\n                }\n                return c;\n            },\n            update: function() {\n                k = this.end();\n            },\n            domElement: c,\n            setMode: u\n        };\n    };\n    f.Panel = function(e, f, l) {\n        var c = Infinity, k = 0, g = Math.round, a = g(window.devicePixelRatio || 1), r = 80 * a, h = 48 * a, t = 3 * a, v = 2 * a, d = 3 * a, m = 15 * a, n = 74 * a, p = 30 * a, q = document.createElement(\"canvas\");\n        q.width = r;\n        q.height = h;\n        q.style.cssText = \"width:80px;height:48px\";\n        var b = q.getContext(\"2d\");\n        b.font = \"bold \" + 9 * a + \"px Helvetica,Arial,sans-serif\";\n        b.textBaseline = \"top\";\n        b.fillStyle = l;\n        b.fillRect(0, 0, r, h);\n        b.fillStyle = f;\n        b.fillText(e, t, v);\n        b.fillRect(d, m, n, p);\n        b.fillStyle = l;\n        b.globalAlpha = .9;\n        b.fillRect(d, m, n, p);\n        return {\n            dom: q,\n            update: function(h, w) {\n                c = Math.min(c, h);\n                k = Math.max(k, h);\n                b.fillStyle = l;\n                b.globalAlpha = 1;\n                b.fillRect(0, 0, r, m);\n                b.fillStyle = f;\n                b.fillText(g(h) + \" \" + e + \" (\" + g(c) + \"-\" + g(k) + \")\", t, v);\n                b.drawImage(q, d + a, m, n - a, p, d, m, n - a, p);\n                b.fillRect(d + n - a, m, a, p);\n                b.fillStyle = l;\n                b.globalAlpha = .9;\n                b.fillRect(d + n - a, m, a, g((1 - h / w) * p));\n            }\n        };\n    };\n    return f;\n});\n\n});\n\nparcelRegister(\"4h5hN\", function(module, exports) {\n\n$parcel$export(module.exports, \"acceleratedRaycast\", () => $31ccd9a92979d6bb$export$a0dc2935489c814a);\n$parcel$export(module.exports, \"computeBoundsTree\", () => $31ccd9a92979d6bb$export$749bba8a65fa6d70);\n$parcel$export(module.exports, \"disposeBoundsTree\", () => $31ccd9a92979d6bb$export$e0a981a7a32ddba4);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $b4YKL = parcelRequire(\"b4YKL\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $31ccd9a92979d6bb$var$ray = /* @__PURE__ */ new (0, $ilwiq.Ray)();\nconst $31ccd9a92979d6bb$var$tmpInverseMatrix = /* @__PURE__ */ new (0, $ilwiq.Matrix4)();\nconst $31ccd9a92979d6bb$var$origMeshRaycastFunc = (0, $ilwiq.Mesh).prototype.raycast;\nfunction $31ccd9a92979d6bb$export$a0dc2935489c814a(raycaster, intersects) {\n    if (this.geometry.boundsTree) {\n        if (this.material === undefined) return;\n        $31ccd9a92979d6bb$var$tmpInverseMatrix.copy(this.matrixWorld).invert();\n        $31ccd9a92979d6bb$var$ray.copy(raycaster.ray).applyMatrix4($31ccd9a92979d6bb$var$tmpInverseMatrix);\n        const bvh = this.geometry.boundsTree;\n        if (raycaster.firstHitOnly === true) {\n            const hit = (0, $b4YKL.convertRaycastIntersect)(bvh.raycastFirst($31ccd9a92979d6bb$var$ray, this.material), this, raycaster);\n            if (hit) intersects.push(hit);\n        } else {\n            const hits = bvh.raycast($31ccd9a92979d6bb$var$ray, this.material);\n            for(let i = 0, l = hits.length; i < l; i++){\n                const hit = (0, $b4YKL.convertRaycastIntersect)(hits[i], this, raycaster);\n                if (hit) intersects.push(hit);\n            }\n        }\n    } else $31ccd9a92979d6bb$var$origMeshRaycastFunc.call(this, raycaster, intersects);\n}\nfunction $31ccd9a92979d6bb$export$749bba8a65fa6d70(options) {\n    this.boundsTree = new (0, $ff8ed.MeshBVH)(this, options);\n    return this.boundsTree;\n}\nfunction $31ccd9a92979d6bb$export$e0a981a7a32ddba4() {\n    this.boundsTree = null;\n}\n\n});\nparcelRegister(\"b4YKL\", function(module, exports) {\n\n$parcel$export(module.exports, \"convertRaycastIntersect\", () => $810f31c6ff4f494e$export$adb106eed99e8cd8);\n// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nfunction $810f31c6ff4f494e$export$adb106eed99e8cd8(hit, object, raycaster) {\n    if (hit === null) return null;\n    hit.point.applyMatrix4(object.matrixWorld);\n    hit.distance = hit.point.distanceTo(raycaster.ray.origin);\n    hit.object = object;\n    if (hit.distance < raycaster.near || hit.distance > raycaster.far) return null;\n    else return hit;\n}\n\n});\n\n\nparcelRegister(\"38WKP\", function(module, exports) {\n\n$parcel$export(module.exports, \"getBVHExtremes\", () => $249fb1d4ac2bb894$export$de5f6c317656a6ce);\n$parcel$export(module.exports, \"estimateMemoryInBytes\", () => $249fb1d4ac2bb894$export$d677314be3f8df27);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $Mleu6 = parcelRequire(\"Mleu6\");\n\nvar $aw71y = parcelRequire(\"aw71y\");\n\nvar $2zRsl = parcelRequire(\"2zRsl\");\nconst $249fb1d4ac2bb894$var$_box1 = /* @__PURE__ */ new (0, $ilwiq.Box3)();\nconst $249fb1d4ac2bb894$var$_box2 = /* @__PURE__ */ new (0, $ilwiq.Box3)();\nconst $249fb1d4ac2bb894$var$_vec = /* @__PURE__ */ new (0, $ilwiq.Vector3)();\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\nfunction $249fb1d4ac2bb894$var$getPrimitiveSize(el) {\n    switch(typeof el){\n        case \"number\":\n            return 8;\n        case \"string\":\n            return el.length * 2;\n        case \"boolean\":\n            return 4;\n        default:\n            return 0;\n    }\n}\nfunction $249fb1d4ac2bb894$var$isTypedArray(arr) {\n    const regex = /(Uint|Int|Float)(8|16|32)Array/;\n    return regex.test(arr.constructor.name);\n}\nfunction $249fb1d4ac2bb894$var$getRootExtremes(bvh, group) {\n    const result = {\n        nodeCount: 0,\n        leafNodeCount: 0,\n        depth: {\n            min: Infinity,\n            max: -Infinity\n        },\n        tris: {\n            min: Infinity,\n            max: -Infinity\n        },\n        splits: [\n            0,\n            0,\n            0\n        ],\n        surfaceAreaScore: 0\n    };\n    bvh.traverse((depth, isLeaf, boundingData, offsetOrSplit, count)=>{\n        const l0 = boundingData[3] - boundingData[0];\n        const l1 = boundingData[4] - boundingData[1];\n        const l2 = boundingData[5] - boundingData[2];\n        const surfaceArea = 2 * (l0 * l1 + l1 * l2 + l2 * l0);\n        result.nodeCount++;\n        if (isLeaf) {\n            result.leafNodeCount++;\n            result.depth.min = Math.min(depth, result.depth.min);\n            result.depth.max = Math.max(depth, result.depth.max);\n            result.tris.min = Math.min(count, result.tris.min);\n            result.tris.max = Math.max(count, result.tris.max);\n            result.surfaceAreaScore += surfaceArea * (0, $Mleu6.TRIANGLE_INTERSECT_COST) * count;\n        } else {\n            result.splits[offsetOrSplit]++;\n            result.surfaceAreaScore += surfaceArea * (0, $Mleu6.TRAVERSAL_COST);\n        }\n    }, group);\n    // If there are no leaf nodes because the tree hasn't finished generating yet.\n    if (result.tris.min === Infinity) {\n        result.tris.min = 0;\n        result.tris.max = 0;\n    }\n    if (result.depth.min === Infinity) {\n        result.depth.min = 0;\n        result.depth.max = 0;\n    }\n    return result;\n}\nfunction $249fb1d4ac2bb894$export$de5f6c317656a6ce(bvh) {\n    return bvh._roots.map((root, i)=>$249fb1d4ac2bb894$var$getRootExtremes(bvh, i));\n}\nfunction $249fb1d4ac2bb894$export$d677314be3f8df27(obj) {\n    const traversed = new Set();\n    const stack = [\n        obj\n    ];\n    let bytes = 0;\n    while(stack.length){\n        const curr = stack.pop();\n        if (traversed.has(curr)) continue;\n        traversed.add(curr);\n        for(let key in curr){\n            if (!curr.hasOwnProperty(key)) continue;\n            bytes += $249fb1d4ac2bb894$var$getPrimitiveSize(key);\n            const value = curr[key];\n            if (value && (typeof value === \"object\" || typeof value === \"function\")) {\n                if ($249fb1d4ac2bb894$var$isTypedArray(value)) bytes += value.byteLength;\n                else if ((0, $2zRsl.isSharedArrayBufferSupported)() && value instanceof SharedArrayBuffer) bytes += value.byteLength;\n                else if (value instanceof ArrayBuffer) bytes += value.byteLength;\n                else stack.push(value);\n            } else bytes += $249fb1d4ac2bb894$var$getPrimitiveSize(value);\n        }\n    }\n    return bytes;\n}\nfunction $249fb1d4ac2bb894$export$51e58a02740fe411(bvh) {\n    const geometry = bvh.geometry;\n    const depthStack = [];\n    const index = geometry.index;\n    const position = geometry.getAttribute(\"position\");\n    let passes = true;\n    bvh.traverse((depth, isLeaf, boundingData, offset, count)=>{\n        const info = {\n            depth: depth,\n            isLeaf: isLeaf,\n            boundingData: boundingData,\n            offset: offset,\n            count: count\n        };\n        depthStack[depth] = info;\n        (0, $aw71y.arrayToBox)(0, boundingData, $249fb1d4ac2bb894$var$_box1);\n        const parent = depthStack[depth - 1];\n        if (isLeaf) // check triangles\n        for(let i = offset, l = offset + count; i < l; i++){\n            const triIndex = bvh.resolveTriangleIndex(i);\n            let i0 = 3 * triIndex;\n            let i1 = 3 * triIndex + 1;\n            let i2 = 3 * triIndex + 2;\n            if (index) {\n                i0 = index.getX(i0);\n                i1 = index.getX(i1);\n                i2 = index.getX(i2);\n            }\n            let isContained;\n            $249fb1d4ac2bb894$var$_vec.fromBufferAttribute(position, i0);\n            isContained = $249fb1d4ac2bb894$var$_box1.containsPoint($249fb1d4ac2bb894$var$_vec);\n            $249fb1d4ac2bb894$var$_vec.fromBufferAttribute(position, i1);\n            isContained = isContained && $249fb1d4ac2bb894$var$_box1.containsPoint($249fb1d4ac2bb894$var$_vec);\n            $249fb1d4ac2bb894$var$_vec.fromBufferAttribute(position, i2);\n            isContained = isContained && $249fb1d4ac2bb894$var$_box1.containsPoint($249fb1d4ac2bb894$var$_vec);\n            console.assert(isContained, \"Leaf bounds does not fully contain triangle.\");\n            passes = passes && isContained;\n        }\n        if (parent) {\n            // check if my bounds fit in my parents\n            (0, $aw71y.arrayToBox)(0, boundingData, $249fb1d4ac2bb894$var$_box2);\n            const isContained = $249fb1d4ac2bb894$var$_box2.containsBox($249fb1d4ac2bb894$var$_box1);\n            console.assert(isContained, \"Parent bounds does not fully contain child.\");\n            passes = passes && isContained;\n        }\n    });\n    return passes;\n}\n// Returns a simple, human readable object that represents the BVH.\nfunction $249fb1d4ac2bb894$export$b16a0ec7b99c6f74(bvh) {\n    const depthStack = [];\n    bvh.traverse((depth, isLeaf, boundingData, offset, count)=>{\n        const info = {\n            bounds: (0, $aw71y.arrayToBox)(0, boundingData, new (0, $ilwiq.Box3)())\n        };\n        if (isLeaf) {\n            info.count = count;\n            info.offset = offset;\n        } else {\n            info.left = null;\n            info.right = null;\n        }\n        depthStack[depth] = info;\n        // traversal hits the left then right node\n        const parent = depthStack[depth - 1];\n        if (parent) {\n            if (parent.left === null) parent.left = info;\n            else parent.right = info;\n        }\n    });\n    return depthStack[0];\n}\n\n});\n\nparcelRegister(\"5ca9G\", function(module, exports) {\n\n$parcel$export(module.exports, \"MeshBVHHelper\", () => $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5);\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $aw71y = parcelRequire(\"aw71y\");\n\nvar $ff8ed = parcelRequire(\"ff8ed\");\nconst $3c85f35a8c29fa9b$var$boundingBox = /* @__PURE__ */ new (0, $ilwiq.Box3)();\nclass $3c85f35a8c29fa9b$var$MeshBVHRootHelper extends (0, $ilwiq.Object3D) {\n    get isMesh() {\n        return !this.displayEdges;\n    }\n    get isLineSegments() {\n        return this.displayEdges;\n    }\n    get isLine() {\n        return this.displayEdges;\n    }\n    constructor(bvh, material, depth = 10, group = 0){\n        super();\n        this.material = material;\n        this.geometry = new (0, $ilwiq.BufferGeometry)();\n        this.name = \"MeshBVHRootHelper\";\n        this.depth = depth;\n        this.displayParents = false;\n        this.bvh = bvh;\n        this.displayEdges = true;\n        this._group = group;\n    }\n    raycast() {}\n    update() {\n        const geometry = this.geometry;\n        const boundsTree = this.bvh;\n        const group = this._group;\n        geometry.dispose();\n        this.visible = false;\n        if (boundsTree) {\n            // count the number of bounds required\n            const targetDepth = this.depth - 1;\n            const displayParents = this.displayParents;\n            let boundsCount = 0;\n            boundsTree.traverse((depth, isLeaf)=>{\n                if (depth >= targetDepth || isLeaf) {\n                    boundsCount++;\n                    return true;\n                } else if (displayParents) boundsCount++;\n            }, group);\n            // fill in the position buffer with the bounds corners\n            let posIndex = 0;\n            const positionArray = new Float32Array(24 * boundsCount);\n            boundsTree.traverse((depth, isLeaf, boundingData)=>{\n                const terminate = depth >= targetDepth || isLeaf;\n                if (terminate || displayParents) {\n                    (0, $aw71y.arrayToBox)(0, boundingData, $3c85f35a8c29fa9b$var$boundingBox);\n                    const { min: min, max: max } = $3c85f35a8c29fa9b$var$boundingBox;\n                    for(let x = -1; x <= 1; x += 2){\n                        const xVal = x < 0 ? min.x : max.x;\n                        for(let y = -1; y <= 1; y += 2){\n                            const yVal = y < 0 ? min.y : max.y;\n                            for(let z = -1; z <= 1; z += 2){\n                                const zVal = z < 0 ? min.z : max.z;\n                                positionArray[posIndex + 0] = xVal;\n                                positionArray[posIndex + 1] = yVal;\n                                positionArray[posIndex + 2] = zVal;\n                                posIndex += 3;\n                            }\n                        }\n                    }\n                    return terminate;\n                }\n            }, group);\n            let indexArray;\n            let indices;\n            if (this.displayEdges) // fill in the index buffer to point to the corner points\n            indices = new Uint8Array([\n                // x axis\n                0,\n                4,\n                1,\n                5,\n                2,\n                6,\n                3,\n                7,\n                // y axis\n                0,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                7,\n                // z axis\n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7\n            ]);\n            else indices = new Uint8Array([\n                // X-, X+\n                0,\n                1,\n                2,\n                2,\n                1,\n                3,\n                4,\n                6,\n                5,\n                6,\n                7,\n                5,\n                // Y-, Y+\n                1,\n                4,\n                5,\n                0,\n                4,\n                1,\n                2,\n                3,\n                6,\n                3,\n                7,\n                6,\n                // Z-, Z+\n                0,\n                2,\n                4,\n                2,\n                6,\n                4,\n                1,\n                5,\n                3,\n                3,\n                5,\n                7\n            ]);\n            if (positionArray.length > 65535) indexArray = new Uint32Array(indices.length * boundsCount);\n            else indexArray = new Uint16Array(indices.length * boundsCount);\n            const indexLength = indices.length;\n            for(let i = 0; i < boundsCount; i++){\n                const posOffset = i * 8;\n                const indexOffset = i * indexLength;\n                for(let j = 0; j < indexLength; j++)indexArray[indexOffset + j] = posOffset + indices[j];\n            }\n            // update the geometry\n            geometry.setIndex(new (0, $ilwiq.BufferAttribute)(indexArray, 1, false));\n            geometry.setAttribute(\"position\", new (0, $ilwiq.BufferAttribute)(positionArray, 3, false));\n            this.visible = true;\n        }\n    }\n}\nclass $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 extends (0, $ilwiq.Group) {\n    get color() {\n        return this.edgeMaterial.color;\n    }\n    get opacity() {\n        return this.edgeMaterial.opacity;\n    }\n    set opacity(v) {\n        this.edgeMaterial.opacity = v;\n        this.meshMaterial.opacity = v;\n    }\n    constructor(mesh = null, bvh = null, depth = 10){\n        // handle bvh, depth signature\n        if (mesh instanceof (0, $ff8ed.MeshBVH)) {\n            depth = bvh || 10;\n            bvh = mesh;\n            mesh = null;\n        }\n        // handle mesh, depth signature\n        if (typeof bvh === \"number\") {\n            depth = bvh;\n            bvh = null;\n        }\n        super();\n        this.name = \"MeshBVHHelper\";\n        this.depth = depth;\n        this.mesh = mesh;\n        this.bvh = bvh;\n        this.displayParents = false;\n        this.displayEdges = true;\n        this._roots = [];\n        const edgeMaterial = new (0, $ilwiq.LineBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        const meshMaterial = new (0, $ilwiq.MeshBasicMaterial)({\n            color: 0x00FF88,\n            transparent: true,\n            opacity: 0.3,\n            depthWrite: false\n        });\n        meshMaterial.color = edgeMaterial.color;\n        this.edgeMaterial = edgeMaterial;\n        this.meshMaterial = meshMaterial;\n        this.update();\n    }\n    update() {\n        const bvh = this.bvh || this.mesh.geometry.boundsTree;\n        const totalRoots = bvh ? bvh._roots.length : 0;\n        while(this._roots.length > totalRoots){\n            const root = this._roots.pop();\n            root.geometry.dispose();\n            this.remove(root);\n        }\n        for(let i = 0; i < totalRoots; i++){\n            const { depth: depth, edgeMaterial: edgeMaterial, meshMaterial: meshMaterial, displayParents: displayParents, displayEdges: displayEdges } = this;\n            if (i >= this._roots.length) {\n                const root = new $3c85f35a8c29fa9b$var$MeshBVHRootHelper(bvh, edgeMaterial, depth, i);\n                this.add(root);\n                this._roots.push(root);\n            }\n            const root = this._roots[i];\n            root.bvh = bvh;\n            root.depth = depth;\n            root.displayParents = displayParents;\n            root.displayEdges = displayEdges;\n            root.material = displayEdges ? edgeMaterial : meshMaterial;\n            root.update();\n        }\n    }\n    updateMatrixWorld(...args) {\n        const mesh = this.mesh;\n        const parent = this.parent;\n        if (mesh !== null) {\n            mesh.updateWorldMatrix(true, false);\n            if (parent) this.matrix.copy(parent.matrixWorld).invert().multiply(mesh.matrixWorld);\n            else this.matrix.copy(mesh.matrixWorld);\n            this.matrix.decompose(this.position, this.quaternion, this.scale);\n        }\n        super.updateMatrixWorld(...args);\n    }\n    copy(source) {\n        this.depth = source.depth;\n        this.mesh = source.mesh;\n        this.bvh = source.bvh;\n        this.opacity = source.opacity;\n        this.color.copy(source.color);\n    }\n    clone() {\n        return new $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5(this.mesh, this.bvh, this.depth);\n    }\n    dispose() {\n        this.edgeMaterial.dispose();\n        this.meshMaterial.dispose();\n        const children = this.children;\n        for(let i = 0, l = children.length; i < l; i++)children[i].geometry.dispose();\n    }\n}\nclass $3c85f35a8c29fa9b$export$5ead38ed5c75a1c8 extends $3c85f35a8c29fa9b$export$e57d74bcb7e3bec5 {\n    constructor(...args){\n        super(...args);\n        console.warn(\"MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.\");\n    }\n}\n\n});\n\n\nvar $ilwiq = parcelRequire(\"ilwiq\");\n\nvar $7lx9d = parcelRequire(\"7lx9d\");\n\nvar $c8CJQ = parcelRequire(\"c8CJQ\");\n\nvar $jiuw3 = parcelRequire(\"jiuw3\");\n\nvar $4h5hN = parcelRequire(\"4h5hN\");\nvar $38WKP = parcelRequire(\"38WKP\");\nvar $5ca9G = parcelRequire(\"5ca9G\");\nvar $jAT47 = parcelRequire(\"jAT47\");\n\nvar $5Rd1x = parcelRequire(\"5Rd1x\");\n$ilwiq.BufferGeometry.prototype.computeBoundsTree = (0, $4h5hN.computeBoundsTree);\nconst $f06a0a82aa9331ef$var$params = {\n    display: true,\n    displayOriginal: true,\n    material: \"wireframe\",\n    updatePositionOnly: false,\n    skeletonHelper: false,\n    bvhHelper: true,\n    bvhHelperDepth: 10,\n    autoUpdate: true,\n    updateRate: 2.5,\n    pause: false,\n    regenerate: ()=>{\n        $f06a0a82aa9331ef$var$regenerateMesh();\n    }\n};\nlet $f06a0a82aa9331ef$var$renderer, $f06a0a82aa9331ef$var$camera, $f06a0a82aa9331ef$var$scene, $f06a0a82aa9331ef$var$clock, $f06a0a82aa9331ef$var$gui, $f06a0a82aa9331ef$var$stats;\nlet $f06a0a82aa9331ef$var$outputContainer;\nlet $f06a0a82aa9331ef$var$controls, $f06a0a82aa9331ef$var$mixer, $f06a0a82aa9331ef$var$animationAction, $f06a0a82aa9331ef$var$model;\nlet $f06a0a82aa9331ef$var$bvhHelper, $f06a0a82aa9331ef$var$skeletonHelper, $f06a0a82aa9331ef$var$meshHelper, $f06a0a82aa9331ef$var$staticGeometryGenerator;\nlet $f06a0a82aa9331ef$var$timeSinceUpdate = 0;\nlet $f06a0a82aa9331ef$var$initialExtremes = null;\nlet $f06a0a82aa9331ef$var$wireframeMaterial, $f06a0a82aa9331ef$var$normalMaterials, $f06a0a82aa9331ef$var$originalMaterials;\n$f06a0a82aa9331ef$var$init();\n$f06a0a82aa9331ef$var$render();\n// TODO: afford use of materials on the final model to validate\nfunction $f06a0a82aa9331ef$var$init() {\n    const bgColor = 0x111111;\n    $f06a0a82aa9331ef$var$outputContainer = document.getElementById(\"output\");\n    // renderer setup\n    $f06a0a82aa9331ef$var$renderer = new $ilwiq.WebGLRenderer({\n        antialias: true\n    });\n    $f06a0a82aa9331ef$var$renderer.setPixelRatio(window.devicePixelRatio);\n    $f06a0a82aa9331ef$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    $f06a0a82aa9331ef$var$renderer.setClearColor(bgColor, 1);\n    $f06a0a82aa9331ef$var$renderer.shadowMap.enabled = true;\n    $f06a0a82aa9331ef$var$renderer.shadowMap.type = $ilwiq.PCFSoftShadowMap;\n    $f06a0a82aa9331ef$var$renderer.outputEncoding = $ilwiq.sRGBEncoding;\n    document.body.appendChild($f06a0a82aa9331ef$var$renderer.domElement);\n    // scene setup\n    $f06a0a82aa9331ef$var$scene = new $ilwiq.Scene();\n    const light = new $ilwiq.DirectionalLight(0xffffff, 1);\n    light.position.set(5, 5, 2.5);\n    light.shadow.mapSize.setScalar(1024);\n    light.shadow.normalBias = 1e-2;\n    light.castShadow = true;\n    const shadowCam = light.shadow.camera;\n    shadowCam.left = shadowCam.bottom = -7.5;\n    shadowCam.right = shadowCam.top = 7.5;\n    shadowCam.updateProjectionMatrix();\n    $f06a0a82aa9331ef$var$scene.add(light);\n    $f06a0a82aa9331ef$var$scene.add(new $ilwiq.AmbientLight(0xb0bec5, 0.8));\n    // camera setup\n    $f06a0a82aa9331ef$var$camera = new $ilwiq.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 50);\n    $f06a0a82aa9331ef$var$camera.position.set(10, 0, 0);\n    $f06a0a82aa9331ef$var$camera.far = 100;\n    $f06a0a82aa9331ef$var$camera.updateProjectionMatrix();\n    $f06a0a82aa9331ef$var$controls = new (0, $5Rd1x.OrbitControls)($f06a0a82aa9331ef$var$camera, $f06a0a82aa9331ef$var$renderer.domElement);\n    $f06a0a82aa9331ef$var$clock = new $ilwiq.Clock();\n    // stats setup\n    $f06a0a82aa9331ef$var$stats = new (0, (/*@__PURE__*/$parcel$interopDefault($c8CJQ)))();\n    document.body.appendChild($f06a0a82aa9331ef$var$stats.dom);\n    // load the model\n    new (0, $7lx9d.GLTFLoader)().load(\"https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/trex/scene.gltf\", (gltf)=>{\n        // prep the model and add it to the scene\n        $f06a0a82aa9331ef$var$model = gltf.scene;\n        $f06a0a82aa9331ef$var$model.traverse((object)=>{\n            if (object.isMesh) {\n                object.castShadow = true;\n                object.receiveShadow = true;\n                object.frustumCulled = false;\n            }\n        });\n        $f06a0a82aa9331ef$var$model.updateMatrixWorld(true);\n        $f06a0a82aa9331ef$var$scene.add($f06a0a82aa9331ef$var$model);\n        // skeleton helper\n        $f06a0a82aa9331ef$var$skeletonHelper = new $ilwiq.SkeletonHelper($f06a0a82aa9331ef$var$model);\n        $f06a0a82aa9331ef$var$skeletonHelper.visible = false;\n        $f06a0a82aa9331ef$var$scene.add($f06a0a82aa9331ef$var$skeletonHelper);\n        // animations\n        const animations = gltf.animations;\n        $f06a0a82aa9331ef$var$mixer = new $ilwiq.AnimationMixer($f06a0a82aa9331ef$var$model);\n        $f06a0a82aa9331ef$var$animationAction = $f06a0a82aa9331ef$var$mixer.clipAction(animations[0]);\n        $f06a0a82aa9331ef$var$animationAction.play();\n        $f06a0a82aa9331ef$var$animationAction.paused = $f06a0a82aa9331ef$var$params.pause;\n        // camera setup\n        const box = new $ilwiq.Box3();\n        box.setFromObject($f06a0a82aa9331ef$var$model);\n        box.getCenter($f06a0a82aa9331ef$var$controls.target);\n        box.getCenter($f06a0a82aa9331ef$var$camera.position);\n        $f06a0a82aa9331ef$var$camera.position.x = 7.5;\n        $f06a0a82aa9331ef$var$camera.position.z = 3.5;\n        $f06a0a82aa9331ef$var$controls.update();\n        // prep the geometry\n        $f06a0a82aa9331ef$var$staticGeometryGenerator = new (0, $jAT47.StaticGeometryGenerator)($f06a0a82aa9331ef$var$model);\n        $f06a0a82aa9331ef$var$originalMaterials = $f06a0a82aa9331ef$var$staticGeometryGenerator.getMaterials();\n        $f06a0a82aa9331ef$var$normalMaterials = $f06a0a82aa9331ef$var$originalMaterials.map((m)=>{\n            return new $ilwiq.MeshNormalMaterial({\n                normalMap: m.normalMap\n            });\n        });\n        $f06a0a82aa9331ef$var$wireframeMaterial = new $ilwiq.MeshBasicMaterial({\n            wireframe: true,\n            transparent: true,\n            opacity: 0.05,\n            depthWrite: false\n        });\n        $f06a0a82aa9331ef$var$meshHelper = new $ilwiq.Mesh(new $ilwiq.BufferGeometry(), $f06a0a82aa9331ef$var$wireframeMaterial);\n        $f06a0a82aa9331ef$var$meshHelper.receiveShadow = true;\n        $f06a0a82aa9331ef$var$scene.add($f06a0a82aa9331ef$var$meshHelper);\n        $f06a0a82aa9331ef$var$bvhHelper = new (0, $5ca9G.MeshBVHHelper)($f06a0a82aa9331ef$var$meshHelper, 10);\n        $f06a0a82aa9331ef$var$scene.add($f06a0a82aa9331ef$var$bvhHelper);\n        $f06a0a82aa9331ef$var$regenerateMesh();\n    });\n    const plane = new $ilwiq.Mesh(new $ilwiq.PlaneBufferGeometry(), new $ilwiq.ShadowMaterial({\n        color: 0xffffff,\n        opacity: 0.025,\n        transparent: true\n    }));\n    plane.rotation.x = -Math.PI / 2;\n    plane.receiveShadow = true;\n    plane.scale.setScalar(50);\n    $f06a0a82aa9331ef$var$scene.add(plane);\n    $f06a0a82aa9331ef$var$gui = new (0, $jiuw3.GUI)();\n    const staticFolder = $f06a0a82aa9331ef$var$gui.addFolder(\"static mesh\");\n    staticFolder.add($f06a0a82aa9331ef$var$params, \"display\");\n    staticFolder.add($f06a0a82aa9331ef$var$params, \"displayOriginal\");\n    staticFolder.add($f06a0a82aa9331ef$var$params, \"material\", [\n        \"wireframe\",\n        \"normal\",\n        \"original\"\n    ]).onChange((v)=>{\n        if (!$f06a0a82aa9331ef$var$meshHelper) return;\n        switch(v){\n            case \"wireframe\":\n                $f06a0a82aa9331ef$var$meshHelper.material = $f06a0a82aa9331ef$var$wireframeMaterial;\n                $f06a0a82aa9331ef$var$meshHelper.castShadow = false;\n                break;\n            case \"normal\":\n                $f06a0a82aa9331ef$var$meshHelper.material = $f06a0a82aa9331ef$var$normalMaterials;\n                $f06a0a82aa9331ef$var$meshHelper.castShadow = true;\n                break;\n            case \"original\":\n                $f06a0a82aa9331ef$var$meshHelper.material = $f06a0a82aa9331ef$var$originalMaterials;\n                $f06a0a82aa9331ef$var$meshHelper.castShadow = true;\n                break;\n        }\n    });\n    staticFolder.add($f06a0a82aa9331ef$var$params, \"updatePositionOnly\").onChange((v)=>{\n        $f06a0a82aa9331ef$var$staticGeometryGenerator.attributes = v ? [\n            \"position\"\n        ] : [\n            \"position\",\n            \"normal\",\n            \"tangent\",\n            \"uv\",\n            \"uv2\"\n        ];\n        // TODO: if we don't dispose and create a new geometry then it seems like the performance gets slower with the\n        // original meshes??\n        const geometry = $f06a0a82aa9331ef$var$meshHelper.geometry;\n        geometry.dispose();\n        for(const key in geometry.attributes)geometry.deleteAttribute(key);\n    });\n    staticFolder.open();\n    const helperFolder = $f06a0a82aa9331ef$var$gui.addFolder(\"helpers\");\n    helperFolder.add($f06a0a82aa9331ef$var$params, \"skeletonHelper\");\n    helperFolder.add($f06a0a82aa9331ef$var$params, \"bvhHelper\");\n    helperFolder.add($f06a0a82aa9331ef$var$params, \"bvhHelperDepth\", 1, 20, 1).onChange((v)=>{\n        $f06a0a82aa9331ef$var$bvhHelper.depth = parseInt(v);\n        $f06a0a82aa9331ef$var$bvhHelper.update();\n    });\n    helperFolder.open();\n    const bvhFolder = $f06a0a82aa9331ef$var$gui.addFolder(\"bvh animation\");\n    bvhFolder.add($f06a0a82aa9331ef$var$params, \"autoUpdate\");\n    bvhFolder.add($f06a0a82aa9331ef$var$params, \"updateRate\", 0, 5, 0.001);\n    bvhFolder.add($f06a0a82aa9331ef$var$params, \"pause\").onChange((v)=>{\n        if ($f06a0a82aa9331ef$var$animationAction) $f06a0a82aa9331ef$var$animationAction.paused = v;\n    });\n    bvhFolder.add($f06a0a82aa9331ef$var$params, \"regenerate\");\n    bvhFolder.open();\n    $f06a0a82aa9331ef$var$gui.open();\n    window.addEventListener(\"resize\", function() {\n        $f06a0a82aa9331ef$var$camera.aspect = window.innerWidth / window.innerHeight;\n        $f06a0a82aa9331ef$var$camera.updateProjectionMatrix();\n        $f06a0a82aa9331ef$var$renderer.setSize(window.innerWidth, window.innerHeight);\n    }, false);\n}\n// regenerate the mesh and bvh\nfunction $f06a0a82aa9331ef$var$regenerateMesh() {\n    if ($f06a0a82aa9331ef$var$meshHelper) {\n        let generateTime, refitTime, startTime;\n        // time the geometry generation\n        startTime = window.performance.now();\n        $f06a0a82aa9331ef$var$staticGeometryGenerator.generate($f06a0a82aa9331ef$var$meshHelper.geometry);\n        generateTime = window.performance.now() - startTime;\n        // time the bvh refitting\n        startTime = window.performance.now();\n        if (!$f06a0a82aa9331ef$var$meshHelper.geometry.boundsTree) {\n            $f06a0a82aa9331ef$var$meshHelper.geometry.computeBoundsTree();\n            refitTime = \"-\";\n        } else {\n            $f06a0a82aa9331ef$var$meshHelper.geometry.boundsTree.refit();\n            refitTime = (window.performance.now() - startTime).toFixed(2);\n        }\n        $f06a0a82aa9331ef$var$bvhHelper.update();\n        $f06a0a82aa9331ef$var$timeSinceUpdate = 0;\n        const extremes = (0, $38WKP.getBVHExtremes)($f06a0a82aa9331ef$var$meshHelper.geometry.boundsTree);\n        if ($f06a0a82aa9331ef$var$initialExtremes === null) $f06a0a82aa9331ef$var$initialExtremes = extremes;\n        let score = 0;\n        let initialScore = 0;\n        for(const i in extremes){\n            score += extremes[i].surfaceAreaScore;\n            initialScore += $f06a0a82aa9331ef$var$initialExtremes[i].surfaceAreaScore;\n        }\n        const degradation = score / initialScore - 1.0;\n        // update time display\n        $f06a0a82aa9331ef$var$outputContainer.innerHTML = `mesh generation time: ${generateTime.toFixed(2)} ms\\n` + `refit time: ${refitTime} ms\\n` + `bvh degradation: ${(100 * degradation).toFixed(2)}%`;\n    }\n}\nfunction $f06a0a82aa9331ef$var$render() {\n    $f06a0a82aa9331ef$var$stats.update();\n    requestAnimationFrame($f06a0a82aa9331ef$var$render);\n    const delta = Math.min($f06a0a82aa9331ef$var$clock.getDelta(), 0.03);\n    // update animation and helpers\n    if ($f06a0a82aa9331ef$var$mixer) {\n        $f06a0a82aa9331ef$var$mixer.update(delta);\n        $f06a0a82aa9331ef$var$skeletonHelper.visible = $f06a0a82aa9331ef$var$params.skeletonHelper;\n        $f06a0a82aa9331ef$var$meshHelper.visible = $f06a0a82aa9331ef$var$params.display;\n        $f06a0a82aa9331ef$var$bvhHelper.visible = $f06a0a82aa9331ef$var$params.bvhHelper;\n        $f06a0a82aa9331ef$var$model.visible = $f06a0a82aa9331ef$var$params.displayOriginal;\n    }\n    $f06a0a82aa9331ef$var$scene.updateMatrixWorld(true);\n    // refit on a cycle\n    if ($f06a0a82aa9331ef$var$params.autoUpdate && !$f06a0a82aa9331ef$var$params.pause) {\n        if ($f06a0a82aa9331ef$var$timeSinceUpdate > $f06a0a82aa9331ef$var$params.updateRate) $f06a0a82aa9331ef$var$regenerateMesh();\n        $f06a0a82aa9331ef$var$timeSinceUpdate += delta;\n    } else $f06a0a82aa9331ef$var$timeSinceUpdate = 0;\n    $f06a0a82aa9331ef$var$renderer.render($f06a0a82aa9331ef$var$scene, $f06a0a82aa9331ef$var$camera);\n}\n\n\n//# sourceMappingURL=skinnedMesh.49d8c0b2.js.map\n","// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import { Ray, Matrix4, Mesh } from 'three';\nimport { convertRaycastIntersect } from './GeometryRayIntersectUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst ray = /* @__PURE__ */ new Ray();\nconst tmpInverseMatrix = /* @__PURE__ */ new Matrix4();\nconst origMeshRaycastFunc = Mesh.prototype.raycast;\n\nexport function acceleratedRaycast( raycaster, intersects ) {\n\n\tif ( this.geometry.boundsTree ) {\n\n\t\tif ( this.material === undefined ) return;\n\n\t\ttmpInverseMatrix.copy( this.matrixWorld ).invert();\n\t\tray.copy( raycaster.ray ).applyMatrix4( tmpInverseMatrix );\n\n\t\tconst bvh = this.geometry.boundsTree;\n\t\tif ( raycaster.firstHitOnly === true ) {\n\n\t\t\tconst hit = convertRaycastIntersect( bvh.raycastFirst( ray, this.material ), this, raycaster );\n\t\t\tif ( hit ) {\n\n\t\t\t\tintersects.push( hit );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst hits = bvh.raycast( ray, this.material );\n\t\t\tfor ( let i = 0, l = hits.length; i < l; i ++ ) {\n\n\t\t\t\tconst hit = convertRaycastIntersect( hits[ i ], this, raycaster );\n\t\t\t\tif ( hit ) {\n\n\t\t\t\t\tintersects.push( hit );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t} else {\n\n\t\torigMeshRaycastFunc.call( this, raycaster, intersects );\n\n\t}\n\n}\n\nexport function computeBoundsTree( options ) {\n\n\tthis.boundsTree = new MeshBVH( this, options );\n\treturn this.boundsTree;\n\n}\n\nexport function disposeBoundsTree() {\n\n\tthis.boundsTree = null;\n\n}\n","// converts the given BVH raycast intersection to align with the three.js raycast\n// structure (include object, world space distance and point).\nexport function convertRaycastIntersect( hit, object, raycaster ) {\n\n\tif ( hit === null ) {\n\n\t\treturn null;\n\n\t}\n\n\thit.point.applyMatrix4( object.matrixWorld );\n\thit.distance = hit.point.distanceTo( raycaster.ray.origin );\n\thit.object = object;\n\n\tif ( hit.distance < raycaster.near || hit.distance > raycaster.far ) {\n\n\t\treturn null;\n\n\t} else {\n\n\t\treturn hit;\n\n\t}\n\n}\n","import { Box3, Vector3 } from 'three';\nimport { TRAVERSAL_COST, TRIANGLE_INTERSECT_COST } from '../core/Constants.js';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { isSharedArrayBufferSupported } from '../utils/BufferUtils.js';\n\nconst _box1 = /* @__PURE__ */ new Box3();\nconst _box2 = /* @__PURE__ */ new Box3();\nconst _vec = /* @__PURE__ */ new Vector3();\n\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\nfunction getPrimitiveSize( el ) {\n\n\tswitch ( typeof el ) {\n\n\t\tcase 'number':\n\t\t\treturn 8;\n\t\tcase 'string':\n\t\t\treturn el.length * 2;\n\t\tcase 'boolean':\n\t\t\treturn 4;\n\t\tdefault:\n\t\t\treturn 0;\n\n\t}\n\n}\n\nfunction isTypedArray( arr ) {\n\n\tconst regex = /(Uint|Int|Float)(8|16|32)Array/;\n\treturn regex.test( arr.constructor.name );\n\n}\n\nfunction getRootExtremes( bvh, group ) {\n\n\tconst result = {\n\t\tnodeCount: 0,\n\t\tleafNodeCount: 0,\n\n\t\tdepth: {\n\t\t\tmin: Infinity, max: - Infinity\n\t\t},\n\t\ttris: {\n\t\t\tmin: Infinity, max: - Infinity\n\t\t},\n\t\tsplits: [ 0, 0, 0 ],\n\t\tsurfaceAreaScore: 0,\n\t};\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offsetOrSplit, count ) => {\n\n\t\tconst l0 = boundingData[ 0 + 3 ] - boundingData[ 0 ];\n\t\tconst l1 = boundingData[ 1 + 3 ] - boundingData[ 1 ];\n\t\tconst l2 = boundingData[ 2 + 3 ] - boundingData[ 2 ];\n\n\t\tconst surfaceArea = 2 * ( l0 * l1 + l1 * l2 + l2 * l0 );\n\n\t\tresult.nodeCount ++;\n\t\tif ( isLeaf ) {\n\n\t\t\tresult.leafNodeCount ++;\n\n\t\t\tresult.depth.min = Math.min( depth, result.depth.min );\n\t\t\tresult.depth.max = Math.max( depth, result.depth.max );\n\n\t\t\tresult.tris.min = Math.min( count, result.tris.min );\n\t\t\tresult.tris.max = Math.max( count, result.tris.max );\n\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\n\n\t\t} else {\n\n\t\t\tresult.splits[ offsetOrSplit ] ++;\n\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\n\n\t\t}\n\n\t}, group );\n\n\t// If there are no leaf nodes because the tree hasn't finished generating yet.\n\tif ( result.tris.min === Infinity ) {\n\n\t\tresult.tris.min = 0;\n\t\tresult.tris.max = 0;\n\n\t}\n\n\tif ( result.depth.min === Infinity ) {\n\n\t\tresult.depth.min = 0;\n\t\tresult.depth.max = 0;\n\n\t}\n\n\treturn result;\n\n}\n\nfunction getBVHExtremes( bvh ) {\n\n\treturn bvh._roots.map( ( root, i ) => getRootExtremes( bvh, i ) );\n\n}\n\nfunction estimateMemoryInBytes( obj ) {\n\n\tconst traversed = new Set();\n\tconst stack = [ obj ];\n\tlet bytes = 0;\n\n\twhile ( stack.length ) {\n\n\t\tconst curr = stack.pop();\n\t\tif ( traversed.has( curr ) ) {\n\n\t\t\tcontinue;\n\n\t\t}\n\n\t\ttraversed.add( curr );\n\n\t\tfor ( let key in curr ) {\n\n\t\t\tif ( ! curr.hasOwnProperty( key ) ) {\n\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\tbytes += getPrimitiveSize( key );\n\n\t\t\tconst value = curr[ key ];\n\t\t\tif ( value && ( typeof value === 'object' || typeof value === 'function' ) ) {\n\n\t\t\t\tif ( isTypedArray( value ) ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else if ( isSharedArrayBufferSupported() && value instanceof SharedArrayBuffer ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else if ( value instanceof ArrayBuffer ) {\n\n\t\t\t\t\tbytes += value.byteLength;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tstack.push( value );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tbytes += getPrimitiveSize( value );\n\n\t\t\t}\n\n\n\t\t}\n\n\t}\n\n\treturn bytes;\n\n}\n\nfunction validateBounds( bvh ) {\n\n\tconst geometry = bvh.geometry;\n\tconst depthStack = [];\n\tconst index = geometry.index;\n\tconst position = geometry.getAttribute( 'position' );\n\tlet passes = true;\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\tconst info = {\n\t\t\tdepth,\n\t\t\tisLeaf,\n\t\t\tboundingData,\n\t\t\toffset,\n\t\t\tcount,\n\t\t};\n\t\tdepthStack[ depth ] = info;\n\n\t\tarrayToBox( 0, boundingData, _box1 );\n\t\tconst parent = depthStack[ depth - 1 ];\n\n\t\tif ( isLeaf ) {\n\n\t\t\t// check triangles\n\t\t\tfor ( let i = offset, l = offset + count; i < l; i ++ ) {\n\n\t\t\t\tconst triIndex = bvh.resolveTriangleIndex( i );\n\t\t\t\tlet i0 = 3 * triIndex;\n\t\t\t\tlet i1 = 3 * triIndex + 1;\n\t\t\t\tlet i2 = 3 * triIndex + 2;\n\n\t\t\t\tif ( index ) {\n\n\t\t\t\t\ti0 = index.getX( i0 );\n\t\t\t\t\ti1 = index.getX( i1 );\n\t\t\t\t\ti2 = index.getX( i2 );\n\n\t\t\t\t}\n\n\t\t\t\tlet isContained;\n\n\t\t\t\t_vec.fromBufferAttribute( position, i0 );\n\t\t\t\tisContained = _box1.containsPoint( _vec );\n\n\t\t\t\t_vec.fromBufferAttribute( position, i1 );\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\t_vec.fromBufferAttribute( position, i2 );\n\t\t\t\tisContained = isContained && _box1.containsPoint( _vec );\n\n\t\t\t\tconsole.assert( isContained, 'Leaf bounds does not fully contain triangle.' );\n\t\t\t\tpasses = passes && isContained;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( parent ) {\n\n\t\t\t// check if my bounds fit in my parents\n\t\t\tarrayToBox( 0, boundingData, _box2 );\n\n\t\t\tconst isContained = _box2.containsBox( _box1 );\n\t\t\tconsole.assert( isContained, 'Parent bounds does not fully contain child.' );\n\t\t\tpasses = passes && isContained;\n\n\t\t}\n\n\t} );\n\n\treturn passes;\n\n}\n\n// Returns a simple, human readable object that represents the BVH.\nfunction getJSONStructure( bvh ) {\n\n\tconst depthStack = [];\n\n\tbvh.traverse( ( depth, isLeaf, boundingData, offset, count ) => {\n\n\t\tconst info = {\n\t\t\tbounds: arrayToBox( 0, boundingData, new Box3() ),\n\t\t};\n\n\t\tif ( isLeaf ) {\n\n\t\t\tinfo.count = count;\n\t\t\tinfo.offset = offset;\n\n\t\t} else {\n\n\t\t\tinfo.left = null;\n\t\t\tinfo.right = null;\n\n\t\t}\n\n\t\tdepthStack[ depth ] = info;\n\n\t\t// traversal hits the left then right node\n\t\tconst parent = depthStack[ depth - 1 ];\n\t\tif ( parent ) {\n\n\t\t\tif ( parent.left === null ) {\n\n\t\t\t\tparent.left = info;\n\n\t\t\t} else {\n\n\t\t\t\tparent.right = info;\n\n\t\t\t}\n\n\t\t}\n\n\t} );\n\n\treturn depthStack[ 0 ];\n\n}\n\nexport { estimateMemoryInBytes, getBVHExtremes, validateBounds, getJSONStructure };\n","import { LineBasicMaterial, BufferAttribute, Box3, Group, MeshBasicMaterial, Object3D, BufferGeometry } from 'three';\nimport { arrayToBox } from '../utils/ArrayBoxUtilities.js';\nimport { MeshBVH } from '../core/MeshBVH.js';\n\nconst boundingBox = /* @__PURE__ */ new Box3();\nclass MeshBVHRootHelper extends Object3D {\n\n\tget isMesh() {\n\n\t\treturn ! this.displayEdges;\n\n\t}\n\n\tget isLineSegments() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tget isLine() {\n\n\t\treturn this.displayEdges;\n\n\t}\n\n\tconstructor( bvh, material, depth = 10, group = 0 ) {\n\n\t\tsuper();\n\n\t\tthis.material = material;\n\t\tthis.geometry = new BufferGeometry();\n\t\tthis.name = 'MeshBVHRootHelper';\n\t\tthis.depth = depth;\n\t\tthis.displayParents = false;\n\t\tthis.bvh = bvh;\n\t\tthis.displayEdges = true;\n\t\tthis._group = group;\n\n\t}\n\n\traycast() {}\n\n\tupdate() {\n\n\t\tconst geometry = this.geometry;\n\t\tconst boundsTree = this.bvh;\n\t\tconst group = this._group;\n\t\tgeometry.dispose();\n\t\tthis.visible = false;\n\t\tif ( boundsTree ) {\n\n\t\t\t// count the number of bounds required\n\t\t\tconst targetDepth = this.depth - 1;\n\t\t\tconst displayParents = this.displayParents;\n\t\t\tlet boundsCount = 0;\n\t\t\tboundsTree.traverse( ( depth, isLeaf ) => {\n\n\t\t\t\tif ( depth >= targetDepth || isLeaf ) {\n\n\t\t\t\t\tboundsCount ++;\n\t\t\t\t\treturn true;\n\n\t\t\t\t} else if ( displayParents ) {\n\n\t\t\t\t\tboundsCount ++;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\t// fill in the position buffer with the bounds corners\n\t\t\tlet posIndex = 0;\n\t\t\tconst positionArray = new Float32Array( 8 * 3 * boundsCount );\n\t\t\tboundsTree.traverse( ( depth, isLeaf, boundingData ) => {\n\n\t\t\t\tconst terminate = depth >= targetDepth || isLeaf;\n\t\t\t\tif ( terminate || displayParents ) {\n\n\t\t\t\t\tarrayToBox( 0, boundingData, boundingBox );\n\n\t\t\t\t\tconst { min, max } = boundingBox;\n\t\t\t\t\tfor ( let x = - 1; x <= 1; x += 2 ) {\n\n\t\t\t\t\t\tconst xVal = x < 0 ? min.x : max.x;\n\t\t\t\t\t\tfor ( let y = - 1; y <= 1; y += 2 ) {\n\n\t\t\t\t\t\t\tconst yVal = y < 0 ? min.y : max.y;\n\t\t\t\t\t\t\tfor ( let z = - 1; z <= 1; z += 2 ) {\n\n\t\t\t\t\t\t\t\tconst zVal = z < 0 ? min.z : max.z;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 0 ] = xVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 1 ] = yVal;\n\t\t\t\t\t\t\t\tpositionArray[ posIndex + 2 ] = zVal;\n\n\t\t\t\t\t\t\t\tposIndex += 3;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn terminate;\n\n\t\t\t\t}\n\n\t\t\t}, group );\n\n\t\t\tlet indexArray;\n\t\t\tlet indices;\n\t\t\tif ( this.displayEdges ) {\n\n\t\t\t\t// fill in the index buffer to point to the corner points\n\t\t\t\tindices = new Uint8Array( [\n\t\t\t\t\t// x axis\n\t\t\t\t\t0, 4,\n\t\t\t\t\t1, 5,\n\t\t\t\t\t2, 6,\n\t\t\t\t\t3, 7,\n\n\t\t\t\t\t// y axis\n\t\t\t\t\t0, 2,\n\t\t\t\t\t1, 3,\n\t\t\t\t\t4, 6,\n\t\t\t\t\t5, 7,\n\n\t\t\t\t\t// z axis\n\t\t\t\t\t0, 1,\n\t\t\t\t\t2, 3,\n\t\t\t\t\t4, 5,\n\t\t\t\t\t6, 7,\n\t\t\t\t] );\n\n\t\t\t} else {\n\n\t\t\t\tindices = new Uint8Array( [\n\n\t\t\t\t\t// X-, X+\n\t\t\t\t\t0, 1, 2,\n\t\t\t\t\t2, 1, 3,\n\n\t\t\t\t\t4, 6, 5,\n\t\t\t\t\t6, 7, 5,\n\n\t\t\t\t\t// Y-, Y+\n\t\t\t\t\t1, 4, 5,\n\t\t\t\t\t0, 4, 1,\n\n\t\t\t\t\t2, 3, 6,\n\t\t\t\t\t3, 7, 6,\n\n\t\t\t\t\t// Z-, Z+\n\t\t\t\t\t0, 2, 4,\n\t\t\t\t\t2, 6, 4,\n\n\t\t\t\t\t1, 5, 3,\n\t\t\t\t\t3, 5, 7,\n\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( positionArray.length > 65535 ) {\n\n\t\t\t\tindexArray = new Uint32Array( indices.length * boundsCount );\n\n\t\t\t} else {\n\n\t\t\t\tindexArray = new Uint16Array( indices.length * boundsCount );\n\n\t\t\t}\n\n\t\t\tconst indexLength = indices.length;\n\t\t\tfor ( let i = 0; i < boundsCount; i ++ ) {\n\n\t\t\t\tconst posOffset = i * 8;\n\t\t\t\tconst indexOffset = i * indexLength;\n\t\t\t\tfor ( let j = 0; j < indexLength; j ++ ) {\n\n\t\t\t\t\tindexArray[ indexOffset + j ] = posOffset + indices[ j ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// update the geometry\n\t\t\tgeometry.setIndex(\n\t\t\t\tnew BufferAttribute( indexArray, 1, false ),\n\t\t\t);\n\t\t\tgeometry.setAttribute(\n\t\t\t\t'position',\n\t\t\t\tnew BufferAttribute( positionArray, 3, false ),\n\t\t\t);\n\t\t\tthis.visible = true;\n\n\t\t}\n\n\t}\n\n}\n\nclass MeshBVHHelper extends Group {\n\n\tget color() {\n\n\t\treturn this.edgeMaterial.color;\n\n\t}\n\n\tget opacity() {\n\n\t\treturn this.edgeMaterial.opacity;\n\n\t}\n\n\tset opacity( v ) {\n\n\t\tthis.edgeMaterial.opacity = v;\n\t\tthis.meshMaterial.opacity = v;\n\n\t}\n\n\tconstructor( mesh = null, bvh = null, depth = 10 ) {\n\n\t\t// handle bvh, depth signature\n\t\tif ( mesh instanceof MeshBVH ) {\n\n\t\t\tdepth = bvh || 10;\n\t\t\tbvh = mesh;\n\t\t\tmesh = null;\n\n\t\t}\n\n\t\t// handle mesh, depth signature\n\t\tif ( typeof bvh === 'number' ) {\n\n\t\t\tdepth = bvh;\n\t\t\tbvh = null;\n\n\t\t}\n\n\t\tsuper();\n\n\t\tthis.name = 'MeshBVHHelper';\n\t\tthis.depth = depth;\n\t\tthis.mesh = mesh;\n\t\tthis.bvh = bvh;\n\t\tthis.displayParents = false;\n\t\tthis.displayEdges = true;\n\t\tthis._roots = [];\n\n\t\tconst edgeMaterial = new LineBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tconst meshMaterial = new MeshBasicMaterial( {\n\t\t\tcolor: 0x00FF88,\n\t\t\ttransparent: true,\n\t\t\topacity: 0.3,\n\t\t\tdepthWrite: false,\n\t\t} );\n\n\t\tmeshMaterial.color = edgeMaterial.color;\n\n\t\tthis.edgeMaterial = edgeMaterial;\n\t\tthis.meshMaterial = meshMaterial;\n\n\t\tthis.update();\n\n\t}\n\n\tupdate() {\n\n\t\tconst bvh = this.bvh || this.mesh.geometry.boundsTree;\n\t\tconst totalRoots = bvh ? bvh._roots.length : 0;\n\t\twhile ( this._roots.length > totalRoots ) {\n\n\t\t\tconst root = this._roots.pop();\n\t\t\troot.geometry.dispose();\n\t\t\tthis.remove( root );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < totalRoots; i ++ ) {\n\n\t\t\tconst { depth, edgeMaterial, meshMaterial, displayParents, displayEdges } = this;\n\n\t\t\tif ( i >= this._roots.length ) {\n\n\t\t\t\tconst root = new MeshBVHRootHelper( bvh, edgeMaterial, depth, i );\n\t\t\t\tthis.add( root );\n\t\t\t\tthis._roots.push( root );\n\n\t\t\t}\n\n\t\t\tconst root = this._roots[ i ];\n\t\t\troot.bvh = bvh;\n\t\t\troot.depth = depth;\n\t\t\troot.displayParents = displayParents;\n\t\t\troot.displayEdges = displayEdges;\n\t\t\troot.material = displayEdges ? edgeMaterial : meshMaterial;\n\t\t\troot.update();\n\n\t\t}\n\n\t}\n\n\tupdateMatrixWorld( ...args ) {\n\n\t\tconst mesh = this.mesh;\n\t\tconst parent = this.parent;\n\n\t\tif ( mesh !== null ) {\n\n\t\t\tmesh.updateWorldMatrix( true, false );\n\n\t\t\tif ( parent ) {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( parent.matrixWorld )\n\t\t\t\t\t.invert()\n\t\t\t\t\t.multiply( mesh.matrixWorld );\n\n\t\t\t} else {\n\n\t\t\t\tthis.matrix\n\t\t\t\t\t.copy( mesh.matrixWorld );\n\n\t\t\t}\n\n\t\t\tthis.matrix.decompose(\n\t\t\t\tthis.position,\n\t\t\t\tthis.quaternion,\n\t\t\t\tthis.scale,\n\t\t\t);\n\n\t\t}\n\n\t\tsuper.updateMatrixWorld( ...args );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.depth = source.depth;\n\t\tthis.mesh = source.mesh;\n\t\tthis.bvh = source.bvh;\n\t\tthis.opacity = source.opacity;\n\t\tthis.color.copy( source.color );\n\n\t}\n\n\tclone() {\n\n\t\treturn new MeshBVHHelper( this.mesh, this.bvh, this.depth );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.edgeMaterial.dispose();\n\t\tthis.meshMaterial.dispose();\n\n\t\tconst children = this.children;\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tchildren[ i ].geometry.dispose();\n\n\t\t}\n\n\t}\n\n}\n\nexport class MeshBVHVisualizer extends MeshBVHHelper {\n\n\tconstructor( ...args ) {\n\n\t\tsuper( ...args );\n\n\t\tconsole.warn( 'MeshBVHVisualizer: MeshBVHVisualizer has been deprecated. Use MeshBVHHelper, instead.' );\n\n\t}\n\n}\n\nexport { MeshBVHHelper };\n","import * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';\nimport Stats from 'stats.js';\nimport { GUI } from 'three/examples/jsm/libs/lil-gui.module.min.js';\nimport { computeBoundsTree, MeshBVHHelper, getBVHExtremes, StaticGeometryGenerator } from '..';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\n\nTHREE.BufferGeometry.prototype.computeBoundsTree = computeBoundsTree;\n\nconst params = {\n\tdisplay: true,\n\tdisplayOriginal: true,\n\tmaterial: 'wireframe',\n\tupdatePositionOnly: false,\n\n\tskeletonHelper: false,\n\tbvhHelper: true,\n\tbvhHelperDepth: 10,\n\n\tautoUpdate: true,\n\tupdateRate: 2.5,\n\tpause: false,\n\tregenerate: () => {\n\n\t\tregenerateMesh();\n\n\t}\n};\n\nlet renderer, camera, scene, clock, gui, stats;\nlet outputContainer;\nlet controls, mixer, animationAction, model;\nlet bvhHelper, skeletonHelper, meshHelper, staticGeometryGenerator;\nlet timeSinceUpdate = 0;\nlet initialExtremes = null;\nlet wireframeMaterial, normalMaterials, originalMaterials;\n\ninit();\nrender();\n\n// TODO: afford use of materials on the final model to validate\n\nfunction init() {\n\n\tconst bgColor = 0x111111;\n\n\toutputContainer = document.getElementById( 'output' );\n\n\t// renderer setup\n\trenderer = new THREE.WebGLRenderer( { antialias: true } );\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( window.innerWidth, window.innerHeight );\n\trenderer.setClearColor( bgColor, 1 );\n\trenderer.shadowMap.enabled = true;\n\trenderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\trenderer.outputEncoding = THREE.sRGBEncoding;\n\tdocument.body.appendChild( renderer.domElement );\n\n\t// scene setup\n\tscene = new THREE.Scene();\n\n\tconst light = new THREE.DirectionalLight( 0xffffff, 1 );\n\tlight.position.set( 5, 5, 2.5 );\n\tlight.shadow.mapSize.setScalar( 1024 );\n\tlight.shadow.normalBias = 1e-2;\n\tlight.castShadow = true;\n\n\tconst shadowCam = light.shadow.camera;\n\tshadowCam.left = shadowCam.bottom = - 7.5;\n\tshadowCam.right = shadowCam.top = 7.5;\n\tshadowCam.updateProjectionMatrix();\n\tscene.add( light );\n\tscene.add( new THREE.AmbientLight( 0xb0bec5, 0.8 ) );\n\n\t// camera setup\n\tcamera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 0.1, 50 );\n\tcamera.position.set( 10, 0, 0 );\n\tcamera.far = 100;\n\tcamera.updateProjectionMatrix();\n\n\tcontrols = new OrbitControls( camera, renderer.domElement );\n\n\tclock = new THREE.Clock();\n\n\t// stats setup\n\tstats = new Stats();\n\tdocument.body.appendChild( stats.dom );\n\n\t// load the model\n\tnew GLTFLoader()\n\t\t.load( 'https://raw.githubusercontent.com/gkjohnson/3d-demo-data/main/models/trex/scene.gltf', gltf => {\n\n\t\t\t// prep the model and add it to the scene\n\t\t\tmodel = gltf.scene;\n\t\t\tmodel.traverse( object => {\n\n\t\t\t\tif ( object.isMesh ) {\n\n\t\t\t\t\tobject.castShadow = true;\n\t\t\t\t\tobject.receiveShadow = true;\n\t\t\t\t\tobject.frustumCulled = false;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tmodel.updateMatrixWorld( true );\n\t\t\tscene.add( model );\n\n\t\t\t// skeleton helper\n\t\t\tskeletonHelper = new THREE.SkeletonHelper( model );\n\t\t\tskeletonHelper.visible = false;\n\t\t\tscene.add( skeletonHelper );\n\n\t\t\t// animations\n\t\t\tconst animations = gltf.animations;\n\t\t\tmixer = new THREE.AnimationMixer( model );\n\n\t\t\tanimationAction = mixer.clipAction( animations[ 0 ] );\n\t\t\tanimationAction.play();\n\t\t\tanimationAction.paused = params.pause;\n\n\t\t\t// camera setup\n\t\t\tconst box = new THREE.Box3();\n\t\t\tbox.setFromObject( model );\n\t\t\tbox.getCenter( controls.target );\n\t\t\tbox.getCenter( camera.position );\n\t\t\tcamera.position.x = 7.5;\n\t\t\tcamera.position.z = 3.5;\n\t\t\tcontrols.update();\n\n\t\t\t// prep the geometry\n\t\t\tstaticGeometryGenerator = new StaticGeometryGenerator( model );\n\t\t\toriginalMaterials = staticGeometryGenerator.getMaterials();\n\n\t\t\tnormalMaterials = originalMaterials.map( m => {\n\n\t\t\t\treturn new THREE.MeshNormalMaterial( {\n\t\t\t\t\tnormalMap: m.normalMap\n\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t\twireframeMaterial = new THREE.MeshBasicMaterial( {\n\t\t\t\twireframe: true,\n\t\t\t\ttransparent: true,\n\t\t\t\topacity: 0.05,\n\t\t\t\tdepthWrite: false,\n\t\t\t} );\n\t\t\tmeshHelper = new THREE.Mesh( new THREE.BufferGeometry(), wireframeMaterial );\n\t\t\tmeshHelper.receiveShadow = true;\n\n\t\t\tscene.add( meshHelper );\n\n\t\t\tbvhHelper = new MeshBVHHelper( meshHelper, 10 );\n\t\t\tscene.add( bvhHelper );\n\n\t\t\tregenerateMesh();\n\n\t\t} );\n\n\n\tconst plane = new THREE.Mesh( new THREE.PlaneBufferGeometry(), new THREE.ShadowMaterial( { color: 0xffffff, opacity: 0.025, transparent: true } ) );\n\tplane.rotation.x = - Math.PI / 2;\n\tplane.receiveShadow = true;\n\tplane.scale.setScalar( 50 );\n\tscene.add( plane );\n\n\tgui = new GUI();\n\tconst staticFolder = gui.addFolder( 'static mesh' );\n\tstaticFolder.add( params, 'display' );\n\tstaticFolder.add( params, 'displayOriginal' );\n\tstaticFolder.add( params, 'material', [ 'wireframe', 'normal', 'original' ] ).onChange( v => {\n\n\t\tif ( ! meshHelper ) {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tswitch ( v ) {\n\n\t\t\tcase 'wireframe':\n\t\t\t\tmeshHelper.material = wireframeMaterial;\n\t\t\t\tmeshHelper.castShadow = false;\n\t\t\t\tbreak;\n\t\t\tcase 'normal':\n\t\t\t\tmeshHelper.material = normalMaterials;\n\t\t\t\tmeshHelper.castShadow = true;\n\t\t\t\tbreak;\n\t\t\tcase 'original':\n\t\t\t\tmeshHelper.material = originalMaterials;\n\t\t\t\tmeshHelper.castShadow = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t} );\n\tstaticFolder.add( params, 'updatePositionOnly' ).onChange( v => {\n\n\t\tstaticGeometryGenerator.attributes = v ? [ 'position' ] : [ 'position', 'normal', 'tangent', 'uv', 'uv2' ];\n\n\t\t// TODO: if we don't dispose and create a new geometry then it seems like the performance gets slower with the\n\t\t// original meshes??\n\t\tconst geometry = meshHelper.geometry;\n\t\tgeometry.dispose();\n\t\tfor ( const key in geometry.attributes ) {\n\n\t\t\tgeometry.deleteAttribute( key );\n\n\t\t}\n\n\t} );\n\tstaticFolder.open();\n\n\tconst helperFolder = gui.addFolder( 'helpers' );\n\thelperFolder.add( params, 'skeletonHelper' );\n\thelperFolder.add( params, 'bvhHelper' );\n\thelperFolder.add( params, 'bvhHelperDepth', 1, 20, 1 ).onChange( v => {\n\n\t\tbvhHelper.depth = parseInt( v );\n\t\tbvhHelper.update();\n\n\t} );\n\thelperFolder.open();\n\n\tconst bvhFolder = gui.addFolder( 'bvh animation' );\n\tbvhFolder.add( params, 'autoUpdate' );\n\tbvhFolder.add( params, 'updateRate', 0, 5, 0.001 );\n\tbvhFolder.add( params, 'pause' ).onChange( v => {\n\n\t\tif ( animationAction ) {\n\n\t\t\tanimationAction.paused = v;\n\n\t\t}\n\n\t} );\n\tbvhFolder.add( params, 'regenerate' );\n\tbvhFolder.open();\n\n\tgui.open();\n\n\twindow.addEventListener( 'resize', function () {\n\n\t\tcamera.aspect = window.innerWidth / window.innerHeight;\n\t\tcamera.updateProjectionMatrix();\n\n\t\trenderer.setSize( window.innerWidth, window.innerHeight );\n\n\t}, false );\n\n}\n\n// regenerate the mesh and bvh\nfunction regenerateMesh() {\n\n\tif ( meshHelper ) {\n\n\t\tlet generateTime, refitTime, startTime;\n\n\t\t// time the geometry generation\n\t\tstartTime = window.performance.now();\n\t\tstaticGeometryGenerator.generate( meshHelper.geometry );\n\t\tgenerateTime = window.performance.now() - startTime;\n\n\t\t// time the bvh refitting\n\t\tstartTime = window.performance.now();\n\t\tif ( ! meshHelper.geometry.boundsTree ) {\n\n\t\t\tmeshHelper.geometry.computeBoundsTree();\n\t\t\trefitTime = '-';\n\n\t\t} else {\n\n\t\t\tmeshHelper.geometry.boundsTree.refit();\n\t\t\trefitTime = ( window.performance.now() - startTime ).toFixed( 2 );\n\n\t\t}\n\n\t\tbvhHelper.update();\n\t\ttimeSinceUpdate = 0;\n\n\t\tconst extremes = getBVHExtremes( meshHelper.geometry.boundsTree );\n\t\tif ( initialExtremes === null ) {\n\n\t\t\tinitialExtremes = extremes;\n\n\t\t}\n\n\t\tlet score = 0;\n\t\tlet initialScore = 0;\n\t\tfor ( const i in extremes ) {\n\n\t\t\tscore += extremes[ i ].surfaceAreaScore;\n\t\t\tinitialScore += initialExtremes[ i ].surfaceAreaScore;\n\n\t\t}\n\n\t\tconst degradation = ( score / initialScore ) - 1.0;\n\n\t\t// update time display\n\t\toutputContainer.innerHTML =\n\t\t\t`mesh generation time: ${ generateTime.toFixed( 2 ) } ms\\n` +\n\t\t\t`refit time: ${ refitTime } ms\\n` +\n\t\t\t`bvh degradation: ${ ( 100 * degradation ).toFixed( 2 ) }%`;\n\n\t}\n\n}\n\nfunction render() {\n\n\tstats.update();\n\trequestAnimationFrame( render );\n\n\tconst delta = Math.min( clock.getDelta(), 30 * 0.001 );\n\n\t// update animation and helpers\n\tif ( mixer ) {\n\n\t\tmixer.update( delta );\n\t\tskeletonHelper.visible = params.skeletonHelper;\n\t\tmeshHelper.visible = params.display;\n\t\tbvhHelper.visible = params.bvhHelper;\n\t\tmodel.visible = params.displayOriginal;\n\n\t}\n\n\tscene.updateMatrixWorld( true );\n\n\t// refit on a cycle\n\tif ( params.autoUpdate && ! params.pause ) {\n\n\t\tif ( timeSinceUpdate > params.updateRate ) {\n\n\t\t\tregenerateMesh();\n\n\t\t}\n\n\t\ttimeSinceUpdate += delta;\n\n\t} else {\n\n\t\ttimeSinceUpdate = 0;\n\n\t}\n\n\trenderer.render( scene, camera );\n\n}\n"],"names":["$f06a0a82aa9331ef$var$renderer","$f06a0a82aa9331ef$var$camera","$f06a0a82aa9331ef$var$scene","$f06a0a82aa9331ef$var$clock","$f06a0a82aa9331ef$var$gui","$f06a0a82aa9331ef$var$stats","$f06a0a82aa9331ef$var$outputContainer","$f06a0a82aa9331ef$var$controls","$f06a0a82aa9331ef$var$mixer","$f06a0a82aa9331ef$var$animationAction","$f06a0a82aa9331ef$var$model","$f06a0a82aa9331ef$var$bvhHelper","$f06a0a82aa9331ef$var$skeletonHelper","$f06a0a82aa9331ef$var$meshHelper","$f06a0a82aa9331ef$var$staticGeometryGenerator","$f06a0a82aa9331ef$var$wireframeMaterial","$f06a0a82aa9331ef$var$normalMaterials","$f06a0a82aa9331ef$var$originalMaterials","$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","f","a","c","appendChild","dom","u","d","children","length","style","display","l","document","createElement","cssText","addEventListener","preventDefault","k","performance","Date","now","g","r","Panel","h","self","memory","t","REVISION","addPanel","showPanel","begin","end","update","usedJSHeapSize","jsHeapSizeLimit","domElement","setMode","Infinity","Math","round","window","devicePixelRatio","m","p","q","width","height","b","getContext","font","textBaseline","fillStyle","fillRect","fillText","globalAlpha","w","min","max","drawImage","$31ccd9a92979d6bb$export$a0dc2935489c814a","$31ccd9a92979d6bb$export$749bba8a65fa6d70","$31ccd9a92979d6bb$export$e0a981a7a32ddba4","$ilwiq","$b4YKL","$ff8ed","$31ccd9a92979d6bb$var$ray","Ray","$31ccd9a92979d6bb$var$tmpInverseMatrix","Matrix4","$31ccd9a92979d6bb$var$origMeshRaycastFunc","Mesh","prototype","raycast","raycaster","intersects","geometry","boundsTree","undefined","material","copy","matrixWorld","invert","ray","applyMatrix4","bvh","firstHitOnly","hit","convertRaycastIntersect","raycastFirst","push","hits","i","options","MeshBVH","$810f31c6ff4f494e$export$adb106eed99e8cd8","object","point","distance","distanceTo","origin","near","far","$249fb1d4ac2bb894$export$de5f6c317656a6ce","$249fb1d4ac2bb894$export$d677314be3f8df27","$Mleu6","$2zRsl","$249fb1d4ac2bb894$var$getPrimitiveSize","el","_roots","map","root","$249fb1d4ac2bb894$var$getRootExtremes","group","result","nodeCount","leafNodeCount","depth","tris","splits","surfaceAreaScore","traverse","isLeaf","boundingData","offsetOrSplit","count","l0","l1","l2","surfaceArea","TRIANGLE_INTERSECT_COST","TRAVERSAL_COST","obj","traversed","Set","stack","bytes","curr","pop","has","key","add","hasOwnProperty","value","regex","test","arr","constructor","name","byteLength","isSharedArrayBufferSupported","SharedArrayBuffer","ArrayBuffer","$3c85f35a8c29fa9b$export$e57d74bcb7e3bec5","$aw71y","$3c85f35a8c29fa9b$var$boundingBox","Box3","$3c85f35a8c29fa9b$var$MeshBVHRootHelper","Object3D","isMesh","displayEdges","isLineSegments","isLine","BufferGeometry","displayParents","_group","dispose","visible","indexArray","indices","targetDepth","boundsCount","posIndex","positionArray","Float32Array","terminate","arrayToBox","x","xVal","y","yVal","z","zVal","Uint8Array","Uint32Array","Uint16Array","indexLength","posOffset","indexOffset","j","setIndex","BufferAttribute","setAttribute","Group","color","edgeMaterial","opacity","meshMaterial","mesh","LineBasicMaterial","transparent","depthWrite","MeshBasicMaterial","totalRoots","remove","updateMatrixWorld","args","parent","updateWorldMatrix","matrix","multiply","decompose","position","quaternion","scale","source","clone","$7lx9d","$c8CJQ","$jiuw3","$4h5hN","$38WKP","$5ca9G","$jAT47","$5Rd1x","computeBoundsTree","$f06a0a82aa9331ef$var$params","displayOriginal","updatePositionOnly","skeletonHelper","bvhHelper","bvhHelperDepth","autoUpdate","updateRate","pause","regenerate","$f06a0a82aa9331ef$var$regenerateMesh","$f06a0a82aa9331ef$var$timeSinceUpdate","$f06a0a82aa9331ef$var$initialExtremes","generateTime","refitTime","startTime","generate","refit","toFixed","extremes","getBVHExtremes","score","initialScore","degradation","innerHTML","$f06a0a82aa9331ef$var$init","getElementById","WebGLRenderer","antialias","setPixelRatio","setSize","innerWidth","innerHeight","setClearColor","shadowMap","enabled","type","PCFSoftShadowMap","outputEncoding","sRGBEncoding","body","Scene","light","DirectionalLight","shadow","mapSize","setScalar","normalBias","castShadow","shadowCam","camera","left","bottom","right","top","updateProjectionMatrix","AmbientLight","PerspectiveCamera","OrbitControls","Clock","__esModule","default","GLTFLoader","load","gltf","scene","receiveShadow","frustumCulled","SkeletonHelper","animations","AnimationMixer","clipAction","play","paused","box","setFromObject","getCenter","target","StaticGeometryGenerator","getMaterials","MeshNormalMaterial","normalMap","wireframe","MeshBVHHelper","plane","PlaneBufferGeometry","ShadowMaterial","rotation","PI","staticFolder","GUI","addFolder","onChange","attributes","deleteAttribute","open","helperFolder","parseInt","bvhFolder","aspect","$f06a0a82aa9331ef$var$render","requestAnimationFrame","delta","getDelta","render"],"version":3,"file":"skinnedMesh.49d8c0b2.js.map"}